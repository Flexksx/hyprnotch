// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/gtk3/index.ts
import Astal7 from "gi://Astal?version=3.0";
import Gtk4 from "gi://Gtk?version=3.0";
import Gdk from "gi://Gdk?version=3.0";

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/variable.ts
import Astal3 from "gi://AstalIO";

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/binding.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;
var binding_default = Binding;

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/time.ts
import Astal from "gi://AstalIO";
var Time = Astal.Time;
function interval(interval2, callback) {
  return Astal.Time.interval(interval2, () => void callback?.());
}
function timeout(timeout2, callback) {
  return Astal.Time.timeout(timeout2, () => void callback?.());
}

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/process.ts
import Astal2 from "gi://AstalIO";
var Process = Astal2.Process;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal2.Process.subprocessv(cmd) : Astal2.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal2.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal2.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/variable.ts
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal3.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = binding_default.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval2, exec, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval2;
    this.pollTransform = transform;
    if (typeof exec === "function") {
      this.pollFn = exec;
      delete this.pollExec;
    } else {
      this.pollExec = exec;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var { derive } = Variable;
var variable_default = Variable;

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/_astal.ts
var noImplicitDestroy = Symbol("no no implicit destroy");
var setChildren = Symbol("children setter method");
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof binding_default ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof binding_default);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function hook(widget, object, signalOrCallback, callback) {
  if (typeof object.connect === "function" && callback) {
    const id = object.connect(signalOrCallback, (_, ...args) => {
      return callback(widget, ...args);
    });
    widget.connect("destroy", () => {
      object.disconnect(id);
    });
  } else if (typeof object.subscribe === "function" && typeof signalOrCallback === "function") {
    const unsub = object.subscribe((...args) => {
      signalOrCallback(widget, ...args);
    });
    widget.connect("destroy", unsub);
  }
}
function construct(widget, config) {
  let { setup, child, children = [], ...props } = config;
  if (children instanceof binding_default) {
    children = [children];
  }
  if (child) {
    children.unshift(child);
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  const bindings = Object.keys(props).reduce((acc, prop) => {
    if (props[prop] instanceof binding_default) {
      const binding = props[prop];
      delete props[prop];
      return [...acc, [prop, binding]];
    }
    return acc;
  }, []);
  const onHandlers = Object.keys(props).reduce((acc, key) => {
    if (key.startsWith("on")) {
      const sig = kebabify(key).split("-").slice(1).join("-");
      const handler = props[key];
      delete props[key];
      return [...acc, [sig, handler]];
    }
    return acc;
  }, []);
  const mergedChildren = mergeBindings(children.flat(Infinity));
  if (mergedChildren instanceof binding_default) {
    widget[setChildren](mergedChildren.get());
    widget.connect("destroy", mergedChildren.subscribe((v) => {
      widget[setChildren](v);
    }));
  } else {
    if (mergedChildren.length > 0) {
      widget[setChildren](mergedChildren);
    }
  }
  for (const [signal, callback] of onHandlers) {
    const sig = signal.startsWith("notify") ? signal.replace("-", "::") : signal;
    if (typeof callback === "function") {
      widget.connect(sig, callback);
    } else {
      widget.connect(sig, () => execAsync(callback).then(print).catch(console.error));
    }
  }
  for (const [prop, binding] of bindings) {
    if (prop === "child" || prop === "children") {
      widget.connect("destroy", binding.subscribe((v) => {
        widget[setChildren](v);
      }));
    }
    widget.connect("destroy", binding.subscribe((v) => {
      setProp(widget, prop, v);
    }));
    setProp(widget, prop, binding.get());
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  Object.assign(widget, props);
  setup?.(widget);
  return widget;
}
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctors2, ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    if (isArrowFunction(ctors2[ctor]))
      return ctors2[ctor](props);
    return new ctors2[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/gtk3/astalify.ts
import Astal4 from "gi://Astal?version=3.0";
import Gtk from "gi://Gtk?version=3.0";
import GObject from "gi://GObject";
function astalify(cls, clsName = cls.name) {
  class Widget extends cls {
    get css() {
      return Astal4.widget_get_css(this);
    }
    set css(css) {
      Astal4.widget_set_css(this, css);
    }
    get_css() {
      return this.css;
    }
    set_css(css) {
      this.css = css;
    }
    get className() {
      return Astal4.widget_get_class_names(this).join(" ");
    }
    set className(className) {
      Astal4.widget_set_class_names(this, className.split(/\s+/));
    }
    get_class_name() {
      return this.className;
    }
    set_class_name(className) {
      this.className = className;
    }
    get cursor() {
      return Astal4.widget_get_cursor(this);
    }
    set cursor(cursor) {
      Astal4.widget_set_cursor(this, cursor);
    }
    get_cursor() {
      return this.cursor;
    }
    set_cursor(cursor) {
      this.cursor = cursor;
    }
    get clickThrough() {
      return Astal4.widget_get_click_through(this);
    }
    set clickThrough(clickThrough) {
      Astal4.widget_set_click_through(this, clickThrough);
    }
    get_click_through() {
      return this.clickThrough;
    }
    set_click_through(clickThrough) {
      this.clickThrough = clickThrough;
    }
    get noImplicitDestroy() {
      return this[noImplicitDestroy];
    }
    set noImplicitDestroy(value) {
      this[noImplicitDestroy] = value;
    }
    set actionGroup([prefix, group]) {
      this.insert_action_group(prefix, group);
    }
    set_action_group(actionGroup) {
      this.actionGroup = actionGroup;
    }
    getChildren() {
      if (this instanceof Gtk.Bin) {
        return this.get_child() ? [this.get_child()] : [];
      } else if (this instanceof Gtk.Container) {
        return this.get_children();
      }
      return [];
    }
    setChildren(children) {
      children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
      if (this instanceof Gtk.Container) {
        for (const ch of children)
          this.add(ch);
      } else {
        throw Error(`can not add children to ${this.constructor.name}`);
      }
    }
    [setChildren](children) {
      if (this instanceof Gtk.Container) {
        for (const ch of this.getChildren()) {
          this.remove(ch);
          if (!children.includes(ch) && !this.noImplicitDestroy)
            ch?.destroy();
        }
      }
      this.setChildren(children);
    }
    toggleClassName(cn, cond = true) {
      Astal4.widget_toggle_class_name(this, cn, cond);
    }
    hook(object, signalOrCallback, callback) {
      hook(this, object, signalOrCallback, callback);
      return this;
    }
    constructor(...params) {
      super();
      const props = params[0] || {};
      props.visible ??= true;
      construct(this, props);
    }
  }
  GObject.registerClass({
    GTypeName: `Astal_${clsName}`,
    Properties: {
      "class-name": GObject.ParamSpec.string(
        "class-name",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "css": GObject.ParamSpec.string(
        "css",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "cursor": GObject.ParamSpec.string(
        "cursor",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        "default"
      ),
      "click-through": GObject.ParamSpec.boolean(
        "click-through",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      ),
      "no-implicit-destroy": GObject.ParamSpec.boolean(
        "no-implicit-destroy",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      )
    }
  }, Widget);
  return Widget;
}

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/gtk3/app.ts
import Gtk2 from "gi://Gtk?version=3.0";
import Astal5 from "gi://Astal?version=3.0";

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/overrides.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps, Application }) => {
  patch(Apps.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth: Bluetooth2, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth2.prototype, "adapters");
  patch(Bluetooth2.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland: Hyprland2, Monitor, Workspace }) => {
  patch(Hyprland2.prototype, "binds");
  patch(Hyprland2.prototype, "monitors");
  patch(Hyprland2.prototype, "workspaces");
  patch(Hyprland2.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris: Mpris2, Player }) => {
  patch(Mpris2.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd: Notifd2, Notification }) => {
  patch(Notifd2.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp: Wp2, Audio, Video }) => {
  patch(Wp2.prototype, "endpoints");
  patch(Wp2.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject2 from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject2.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons)
        app.add_icons(icons);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/gtk3/app.ts
Gtk2.init(null);
var app_default = mkApp(Astal5.Application);

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/gtk3/widget.ts
import Astal6 from "gi://Astal?version=3.0";
import Gtk3 from "gi://Gtk?version=3.0";
import GObject3 from "gi://GObject";
function filter(children) {
  return children.flat(Infinity).map((ch) => ch instanceof Gtk3.Widget ? ch : new Gtk3.Label({ visible: true, label: String(ch) }));
}
Object.defineProperty(Astal6.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = class extends astalify(Astal6.Box) {
  static {
    GObject3.registerClass({ GTypeName: "Box" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    this.set_children(filter(children));
  }
};
var Button = class extends astalify(Astal6.Button) {
  static {
    GObject3.registerClass({ GTypeName: "Button" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var CenterBox = class extends astalify(Astal6.CenterBox) {
  static {
    GObject3.registerClass({ GTypeName: "CenterBox" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    const ch = filter(children);
    this.startWidget = ch[0] || new Gtk3.Box();
    this.centerWidget = ch[1] || new Gtk3.Box();
    this.endWidget = ch[2] || new Gtk3.Box();
  }
};
var CircularProgress = class extends astalify(Astal6.CircularProgress) {
  static {
    GObject3.registerClass({ GTypeName: "CircularProgress" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var DrawingArea = class extends astalify(Gtk3.DrawingArea) {
  static {
    GObject3.registerClass({ GTypeName: "DrawingArea" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Entry = class extends astalify(Gtk3.Entry) {
  static {
    GObject3.registerClass({ GTypeName: "Entry" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var EventBox = class extends astalify(Astal6.EventBox) {
  static {
    GObject3.registerClass({ GTypeName: "EventBox" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Icon = class extends astalify(Astal6.Icon) {
  static {
    GObject3.registerClass({ GTypeName: "Icon" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Label = class extends astalify(Astal6.Label) {
  static {
    GObject3.registerClass({ GTypeName: "Label" }, this);
  }
  constructor(props) {
    super(props);
  }
  setChildren(children) {
    this.label = String(children);
  }
};
var LevelBar = class extends astalify(Astal6.LevelBar) {
  static {
    GObject3.registerClass({ GTypeName: "LevelBar" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var MenuButton = class extends astalify(Gtk3.MenuButton) {
  static {
    GObject3.registerClass({ GTypeName: "MenuButton" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
Object.defineProperty(Astal6.Overlay.prototype, "overlays", {
  get() {
    return this.get_overlays();
  },
  set(v) {
    this.set_overlays(v);
  }
});
var Overlay = class extends astalify(Astal6.Overlay) {
  static {
    GObject3.registerClass({ GTypeName: "Overlay" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    const [child, ...overlays] = filter(children);
    this.set_child(child);
    this.set_overlays(overlays);
  }
};
var Revealer = class extends astalify(Gtk3.Revealer) {
  static {
    GObject3.registerClass({ GTypeName: "Revealer" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Scrollable = class extends astalify(Astal6.Scrollable) {
  static {
    GObject3.registerClass({ GTypeName: "Scrollable" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Slider = class extends astalify(Astal6.Slider) {
  static {
    GObject3.registerClass({ GTypeName: "Slider" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Stack = class extends astalify(Astal6.Stack) {
  static {
    GObject3.registerClass({ GTypeName: "Stack" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    this.set_children(filter(children));
  }
};
var Switch = class extends astalify(Gtk3.Switch) {
  static {
    GObject3.registerClass({ GTypeName: "Switch" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Window = class extends astalify(Astal6.Window) {
  static {
    GObject3.registerClass({ GTypeName: "Window" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};

// sass:/home/ccretu/Projects/hyprnotch/style/main.scss
var main_default = "/* Primary Palette */\n/* Secondary Palette */\n/* Tertiary Palette */\n/* Surface & Background */\n/* Error Palette */\n/* Misc */\n/* Optional: Custom font */\n/* Animation Curves */\n/* Expressive */\n/* Standard */\n.icon_button {\n  padding: 0;\n  border: none;\n  transition: background-color 0.2s ease, border-radius 0.2s ease, box-shadow 0.2s ease;\n  min-width: 40px;\n  min-height: 40px;\n  border-radius: 9999px;\n}\n.icon_button label,\n.icon_button image {\n  margin: 0px;\n  padding: 0px;\n}\n.icon_button image {\n  min-width: 24px;\n  min-height: 24px;\n}\n.icon_button:focus {\n  outline: 2px solid #5c6146;\n  outline-offset: 2px;\n}\n.icon_button:disabled, .disabled.icon_button {\n  background-color: rgb(213.35, 212.5, 201.45);\n  color: rgb(165.88, 165.64, 154.92);\n  opacity: 0.38;\n}\n.icon_button:disabled:hover, .icon_button:disabled:active, .disabled.icon_button:hover, .disabled.icon_button:active {\n  background-color: rgb(213.35, 212.5, 201.45);\n  color: rgb(165.88, 165.64, 154.92);\n  border-radius: 9999px;\n}\n\n.icon_button {\n  background-color: #566422;\n  color: #ffffff;\n}\n.icon_button:hover {\n  background-color: rgb(102.9, 115.5, 56.1);\n}\n.icon_button:active {\n  background-color: rgb(119.8, 131, 78.2);\n  border-radius: 8px;\n}\n\n.icon_button.xsmall {\n  min-width: 32px;\n  min-height: 32px;\n}\n.icon_button.xsmall image {\n  min-width: 20px;\n  min-height: 20px;\n}\n.icon_button.medium {\n  min-width: 48px;\n  min-height: 48px;\n}\n.icon_button.large {\n  min-width: 56px;\n  min-height: 56px;\n}\n.icon_button.large image {\n  min-width: 28px;\n  min-height: 28px;\n}\n.icon_button.xlarge {\n  min-width: 64px;\n  min-height: 64px;\n}\n.icon_button.xlarge image {\n  min-width: 28px;\n  min-height: 28px;\n}\n.icon_button.narrow {\n  padding: 4px;\n}\n.icon_button.wide {\n  padding: 14px;\n}\n\n.icon_button.square {\n  border-radius: 12px;\n}\n.icon_button.square:active {\n  background-color: rgb(119.8, 131, 78.2);\n  border-radius: 8px;\n}\n.icon_button.square.toggle.checked {\n  border-radius: 9999px;\n}\n\n.icon_button.filled {\n  background-color: #566422;\n  color: #ffffff;\n}\n.icon_button.tonal {\n  background-color: #e0e6c3;\n  color: #191e08;\n}\n.icon_button.tonal:hover {\n  background-color: rgb(227.1, 232.5, 201);\n}\n.icon_button.tonal:active {\n  background-color: rgb(230.2, 235, 207);\n  border-radius: 8px;\n}\n.icon_button.outlined {\n  background-color: transparent;\n  color: #566422;\n  box-shadow: inset 0 0 0 2px #566422;\n}\n.icon_button.outlined:hover {\n  background-color: rgb(246.55, 247.25, 243.95);\n}\n.icon_button.outlined:active {\n  background-color: rgb(238.1, 239.5, 232.9);\n  border-radius: 8px;\n}\n.icon_button.outlined:hover {\n  box-shadow: inset 0 0 0 2px #566422;\n}\n.icon_button.outlined:active {\n  box-shadow: inset 0 0 0 2px #566422;\n}\n.icon_button.standard {\n  background-color: transparent;\n  color: #46483c;\n}\n.icon_button.standard:hover {\n  background-color: rgb(245.75, 245.85, 245.25);\n}\n.icon_button.standard:active {\n  background-color: rgb(236.5, 236.7, 235.5);\n  border-radius: 8px;\n}\n\n.icon_button.toggle {\n  background-color: #efeee2;\n  color: #46483c;\n}\n.icon_button.toggle.checked {\n  background-color: #566422;\n  color: #ffffff;\n  border-radius: 12px;\n}\n.icon_button.toggle.square.checked {\n  border-radius: 9999px;\n}\n\n.icon_button_group .icon_button {\n  margin: 0px 2px;\n}\n.icon_button_group .icon_button:first-child {\n  margin-left: 0px;\n}\n.icon_button_group .icon_button:last-child {\n  margin-right: 0px;\n}\n\nscale {\n  min-width: 20px;\n  min-height: 100px;\n  margin: 0px;\n}\nscale trough {\n  min-width: 20px;\n  min-height: 100px;\n  background-color: #191e08;\n  border-radius: 8px;\n}\nscale highlight {\n  background-color: #566422;\n  border-radius: 12px;\n}\nscale slider {\n  min-width: 22px;\n  min-height: 2px;\n  border-radius: 8px;\n  background-color: #566422;\n  border: 2px solid transparent;\n  margin: -3px -13px;\n}\nscale:hover slider {\n  background-color: #5c6146;\n  border-color: #ffffff;\n}\nscale:active slider {\n  background-color: #3a665e;\n}\nscale contents through {\n  min-width: 30px;\n}\n\ncircularprogress {\n  color: #566422;\n  background-color: #e0e6c3;\n  font-size: 6px;\n  min-width: 32px;\n}\n\n.hyprnotch-button-area {\n  background-color: #fbfaed;\n  color: #1b1c15;\n  transition: min-width 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9), min-height 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9), padding 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9);\n  border-radius: 0px 0px 12px 12px;\n}\n\n.hyprnotch-button-area {\n  padding: 0px;\n  margin: 0px;\n  border: 0px;\n  padding-bottom: 8px;\n  min-width: 300px;\n  min-height: 32px;\n}\n.hyprnotch-button-area.expanded {\n  padding: 0px 24px 12px 24px;\n  border-radius: 0px 0px 28px 28px;\n}\n.hyprnotch-button-area.sound_settings {\n  padding: 0px 24px 12px 24px;\n  border-radius: 0px 0px 28px 28px;\n  min-width: 600px;\n  min-height: 200px;\n}\n\n.hyprnotch_bar_container {\n  background-color: transparent;\n}\n\n.workspaces_bar_container {\n  background-color: #fbfaed;\n  border-radius: 0px 0px 16px 0px;\n}\n\n.workspaces_bar {\n  background-color: #fbfaed;\n  border-radius: 9999px;\n  transition: 500ms cubic-bezier(0.38, 1.21, 0.22, 1);\n}\n\n.workspace_button {\n  border-radius: 9999px;\n  margin: 4px;\n  padding: 0px 4px;\n  font-size: 16px;\n  padding: 0px 4px;\n  background-color: #566422;\n  color: #ffffff;\n}\n.workspace_button:hover {\n  padding: 0px 12px;\n}\n.workspace_button.focused {\n  background-color: #3a665e;\n  padding: 0px 12px;\n}\n.workspace_button icon {\n  font-size: 20px;\n  padding: 0px 2px;\n}\n\n.workspace_client_icon {\n  padding: 0px 2px;\n  font-size: 20px;\n}\n\n.system_tray_constant_background {\n  background-color: #fbfaed;\n  border-radius: 0px;\n}\n.system_tray_constant_background.focused {\n  border-radius: 0px 0px 28px 28px;\n}\n\n.system_tray_item {\n  transition: min-width 500ms cubic-bezier(0.38, 1.21, 0.22, 1), min-height 500ms cubic-bezier(0.38, 1.21, 0.22, 1), padding 500ms cubic-bezier(0.38, 1.21, 0.22, 1);\n  padding: 0 4px;\n  margin: 0 1px;\n  min-height: 30px;\n}\n.system_tray_item icon {\n  font-size: 22px;\n}\n.system_tray_item:hover, .active.system_tray_item {\n  transition: min-width 500ms cubic-bezier(0.38, 1.21, 0.22, 1), min-height 500ms cubic-bezier(0.38, 1.21, 0.22, 1), padding 500ms cubic-bezier(0.38, 1.21, 0.22, 1);\n  min-width: 40px;\n}\n\n.system_tray_item {\n  background-color: #566422;\n  color: #ffffff;\n  border-radius: 8px;\n}\n.system_tray_item:hover {\n  background-color: #5c6146;\n  color: #ffffff;\n  border-radius: 16px;\n}\n.system_tray_item.active {\n  background-color: #fbfaed;\n  color: #566422;\n  border-radius: 28px 28px 0px 0px;\n}\n.system_tray_item.first {\n  border-radius: 16px 8px 8px 16px;\n}\n.system_tray_item.first:hover, .system_tray_item.first.active {\n  border-radius: 16px;\n  background-color: #fbfaed;\n}\n.system_tray_item.last {\n  border-radius: 8px 16px 16px 8px;\n}\n.system_tray_item.last:hover, .system_tray_item.last.active {\n  border-radius: 16px;\n  background-color: #fbfaed;\n}\n\n.system_tray {\n  transition: min-width 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9), min-height 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9), padding 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9);\n  background-color: #fbfaed;\n  padding: 2px;\n  margin: 0px;\n  min-height: 32px;\n}\n.system_tray.focused {\n  border-radius: 28px;\n}\n\n.system_tray_bar_notch {\n  transition: min-width 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9), min-height 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9), padding 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9);\n  background-color: transparent;\n  min-height: 0px;\n  padding: 0px;\n  border-radius: 0px;\n  opacity: 0;\n}\n.system_tray_bar_notch.focused {\n  background-color: #fbfaed;\n  min-height: 40px;\n  border-radius: 28px;\n  padding: 2px;\n  opacity: 1;\n}\n\n.system_tray_bar_notch_entry {\n  transition: min-width 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9), min-height 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9), padding 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9);\n  padding: 0px 4px;\n  background-color: transparent;\n  color: #566422;\n  opacity: 0;\n}\n.system_tray_bar_notch.focused .system_tray_bar_notch_entry {\n  opacity: 1;\n}\n\n.system_tray_bar_notch_content {\n  transition: min-width 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9), min-height 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9), padding 350ms cubic-bezier(0.42, 1.67, 0.21, 0.9);\n}\n\n.notification_bar {\n  min-height: 36px;\n  background-color: #fbfaed;\n  color: #566422;\n}\n\n.new_notification_card_preview icon {\n  font-size: 36px;\n}\n\n.no_notification {\n  color: #ffffff;\n}\n.no_notification icon {\n  font-size: 32px;\n}\n\n.battery_level_circular_progress {\n  min-height: 16px;\n}\n.battery_level_circular_progress icon {\n  font-size: 14px;\n}\n.battery_level_circular_progress.low-battery {\n  color: #ba1a1a;\n  background-color: rgb(244.5, 227.6, 215.9);\n}\n\n.system_details_container {\n  padding: 2px;\n  background-color: #fbfaed;\n  border-radius: 0px 0px 0px 16px;\n}\n\n.bluetooth_settings_menu_container {\n  padding: 10px;\n}\n\n.bluetooth_settings_menu {\n  border-radius: 16px;\n  background-color: #e0e6c3;\n  min-width: 100px;\n  min-height: 100px;\n  padding: 10px;\n}\n\n.bluetooth_device_battery_level {\n  min-width: 48px;\n  min-height: 48px;\n  color: #191e08;\n}\n.bluetooth_device_battery_level circularprogress {\n  background-color: #5c6146;\n  color: #191e08;\n}\n.bluetooth_device_battery_level icon {\n  padding: 10px;\n  font-size: 36px;\n  color: white;\n}\n\n.output_devices_scrollable {\n  min-width: 300px;\n  border: 0px;\n}\n\n.output_device_button {\n  border-radius: 16px;\n  background-color: #566422;\n  color: #ffffff;\n}\n.output_device_button.selected {\n  border-radius: 28px;\n  background-color: #3a665e;\n  color: #ffffff;\n}\n\nwindow.Bar {\n  color: #566422;\n  font-weight: bold;\n  min-height: 30px;\n  border-radius: 24px;\n  margin-left: 10px;\n  margin-right: 10px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\nwindow.Bar > centerbox {\n  background: transparent;\n  border-radius: 0px 0px 24px 24px;\n}\n\n.hyprnotch_bar_container_background {\n  min-height: 32px;\n}";

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/file.ts
import Astal8 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/gobject.ts
import GObject4 from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject4;

// src/time/TimeService.ts
var TimeService = class _TimeService {
  static instance;
  timeVariable = Variable("").poll(1e3, "date");
  constructor() {
  }
  // Private constructor to prevent direct instantiation
  static getInstance() {
    if (!_TimeService.instance) {
      _TimeService.instance = new _TimeService();
    }
    return _TimeService.instance;
  }
  getTime() {
    return this.timeVariable;
  }
};

// src/sound/WirePlumberViewModel.ts
import Wp from "gi://AstalWp";

// src/logger/Logger.ts
var LogLevel = /* @__PURE__ */ ((LogLevel2) => {
  LogLevel2[LogLevel2["DEBUG"] = 1] = "DEBUG";
  LogLevel2[LogLevel2["INFO"] = 2] = "INFO";
  LogLevel2[LogLevel2["ERROR"] = 3] = "ERROR";
  LogLevel2[LogLevel2["WARN"] = 4] = "WARN";
  return LogLevel2;
})(LogLevel || {});
var Logger = class _Logger {
  loggingClassName;
  static DEFAULT_LOG_LEVEL = 1 /* DEBUG */;
  static MAX_CLASS_NAME_LENGTH = 20;
  logLevel = _Logger.DEFAULT_LOG_LEVEL;
  constructor(loggingClassName, logLevel = _Logger.DEFAULT_LOG_LEVEL) {
    this.loggingClassName = loggingClassName;
    this.logLevel = logLevel;
  }
  debug(message, ...args) {
    this.printWithLevel(1 /* DEBUG */, message, ...args);
  }
  info(message, ...args) {
    this.printWithLevel(2 /* INFO */, message, ...args);
  }
  warn(message, ...args) {
    this.printWithLevel(4 /* WARN */, message, ...args);
  }
  error(message, ...args) {
    this.printWithLevel(3 /* ERROR */, message, ...args);
  }
  shouldLog(level) {
    return level >= this.logLevel;
  }
  printWithLevel(level, message, ...args) {
    if (!this.shouldLog(level)) return;
    const levelString = LogLevel[level].toUpperCase();
    const max = _Logger.MAX_CLASS_NAME_LENGTH;
    let name = this.loggingClassName;
    if (name.length > max) {
      name = name.slice(0, max);
    } else {
      name = name.padEnd(max, " ");
    }
    const formatted = `${levelString} - ${name} - ${message}`;
    console.log(formatted, ...args);
  }
};

// src/sound/WirePlumberViewModel.ts
var WirePlumberViewModel = class {
  wireplumber = Wp.get_default();
  lastDefaultSpeakerVolumeBeforeMute = null;
  logger = new Logger(this.constructor.name);
  getWirePlumber() {
    if (!this.wireplumber) {
      throw new Error("WirePlumber is not initialized.");
    }
    return this.wireplumber;
  }
  getAudio() {
    return bind(this.getWirePlumber(), "audio").as((audio) => {
      if (!audio) {
        throw new Error("Audio is not available in WirePlumber.");
      }
      return audio;
    });
  }
  getVideo() {
    return bind(this.getWirePlumber(), "video");
  }
  getSpeakers() {
    return this.getAudio().as((audio) => {
      const speakers = bind(audio, "speakers");
      if (!speakers) {
        throw new Error("No speakers found in WirePlumber audio.");
      }
      return speakers.get();
    });
  }
  getDefaultSpeaker() {
    return this.getAudio().as((audio) => {
      const defaultSpeaker = bind(audio, "defaultSpeaker");
      if (!defaultSpeaker) {
        throw new Error("Default speaker is not set.");
      }
      return defaultSpeaker.get();
    });
  }
  getDefaultSpeakerVolume() {
    return this.getDefaultSpeaker().as((speaker) => {
      if (!speaker) {
        throw new Error("Default speaker is not set.");
      }
      return bind(speaker, "volume").get();
    });
  }
  getDefaultSpeakerVolumeIcon() {
    const defaultSpeaker = this.getDefaultSpeaker().get();
    return bind(defaultSpeaker, "volumeIcon");
  }
  setDefaultSpeakerVolume(volume) {
    const defaultSpeaker = this.getDefaultSpeaker().get();
    defaultSpeaker.set_volume(volume);
  }
  muteDefaultSpeaker() {
    const defaultSpeaker = this.getDefaultSpeaker().get();
    this.lastDefaultSpeakerVolumeBeforeMute = defaultSpeaker.get_volume();
    defaultSpeaker.set_volume(0);
  }
  unmuteDefaultSpeaker() {
    const defaultSpeaker = this.getDefaultSpeaker().get();
    if (this.lastDefaultSpeakerVolumeBeforeMute !== null) {
      defaultSpeaker.set_volume(this.lastDefaultSpeakerVolumeBeforeMute);
      this.lastDefaultSpeakerVolumeBeforeMute = null;
    } else {
      throw new Error("No previous volume to restore.");
    }
  }
  setDefaultSpeaker(speaker) {
    this.logger.debug(
      `Setting default speaker to: ${speaker.get_description()}`
    );
    speaker.set_is_default(true);
  }
};

// ../../../../nix/store/8cl58ip2nasg6rdyj59cwg2f0qbixs28-astal-gjs/share/astal/gjs/gtk3/jsx-runtime.ts
function Fragment({ children = [], child }) {
  if (child) children.push(child);
  return mergeBindings(children);
}
function jsx2(ctor, props) {
  return jsx(ctors, ctor, props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  circularprogress: CircularProgress,
  drawingarea: DrawingArea,
  entry: Entry,
  eventbox: EventBox,
  // TODO: fixed
  // TODO: flowbox
  icon: Icon,
  label: Label,
  levelbar: LevelBar,
  // TODO: listbox
  menubutton: MenuButton,
  overlay: Overlay,
  revealer: Revealer,
  scrollable: Scrollable,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window
};
var jsxs = jsx2;

// src/view/notch/expanded/SettingsMenu.tsx
var toggleSoundSettings = (notchStateViewModel) => {
  const currentState = notchStateViewModel.getNotchState().get();
  if (currentState === "SOUND_SETTINGS" /* SOUND_SETTINGS */) {
    notchStateViewModel.setNotchState("normal" /* NORMAL */);
  } else {
    notchStateViewModel.setNotchState("SOUND_SETTINGS" /* SOUND_SETTINGS */);
  }
};
function SoundSettingsButton(props) {
  const wirePlumberViewModel = new WirePlumberViewModel();
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "icon_button xsmall",
      child: /* @__PURE__ */ jsx2("icon", { icon: wirePlumberViewModel.getDefaultSpeakerVolumeIcon() }),
      onClick: () => toggleSoundSettings(props.notchStateViewModel)
    }
  );
}
function SettingsMenu(props) {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "settings_menu",
      child: /* @__PURE__ */ jsx2(
        "box",
        {
          children: [
            /* @__PURE__ */ jsx2(
              SoundSettingsButton,
              {
                notchStateViewModel: props.notchStateViewModel
              }
            ),
            /* @__PURE__ */ jsx2("button", { className: "icon_button xsmall", label: "Option 2" }),
            /* @__PURE__ */ jsx2("button", { className: "icon_button xsmall", label: "Option 3" })
          ]
        }
      )
    }
  );
}

// src/view/notch/expanded/ExpandedNotch.tsx
function Time2() {
  return /* @__PURE__ */ jsxs("box", { className: "expanded_notch_time", children: [
    /* @__PURE__ */ jsx2("label", { children: bind(TimeService.getInstance().getTime()).as((time) => {
      return time.slice(0, 10);
    }) }),
    /* @__PURE__ */ jsx2("label", { children: bind(TimeService.getInstance().getTime()).as((time) => {
      return time.slice(10, 20);
    }) })
  ] });
}
function ExpandedNotch(props) {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "expanded_notch",
      child: /* @__PURE__ */ jsx2(
        "box",
        {
          children: [
            /* @__PURE__ */ jsx2(Fragment, { children: /* @__PURE__ */ jsx2(
              "box",
              {
                vertical: true,
                children: [
                  /* @__PURE__ */ jsxs(Fragment, { children: [
                    /* @__PURE__ */ jsx2(
                      SettingsMenu,
                      {
                        notchStateViewModel: props.notchStateViewModel
                      }
                    ),
                    /* @__PURE__ */ jsx2("box", { child: /* @__PURE__ */ jsx2(Time2, {}) })
                  ] })
                ]
              }
            ) })
          ]
        }
      )
    }
  );
}

// src/media/MediaViewModel.ts
import Mpris from "gi://AstalMpris";
var MediaViewModel = class {
  mpris = Mpris.get_default();
  logger = new Logger("MediaViewModel");
  spotify = Mpris.Player.new("spotify");
  youtube = Mpris.Player.new("youtube");
  constructor() {
  }
  getPlayers() {
    return bind(this.mpris, "players");
  }
  getSpotifyAvailable() {
    return bind(this.spotify, "available");
  }
  getYoutubeAvailable() {
    return bind(this.youtube, "available");
  }
};

// src/view/notch/normal/NormalNotch.tsx
function MediaIndicator() {
  const mediaViewModel = new MediaViewModel();
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "normal_notch_media_icon",
      child: /* @__PURE__ */ jsx2(
        "box",
        {
          className: "normal_notch_media_indicator",
          child: /* @__PURE__ */ jsx2(
            "label",
            {
              label: mediaViewModel.getPlayers().as((players) => {
                if (players.length === 0) {
                  return "No Media";
                }
                return players[0].get_identity();
              })
            }
          )
        }
      )
    }
  );
}
function Time3() {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "normal_notch_time",
      children: [
        /* @__PURE__ */ jsx2("label", { children: bind(TimeService.getInstance().getTime()).as((time) => {
          return time.slice(10, 16);
        }) })
      ]
    }
  );
}
function NormalNotch() {
  return /* @__PURE__ */ jsx2(
    "centerbox",
    {
      className: "normal_notch",
      startWidget: /* @__PURE__ */ jsx2(Time3, {}),
      centerWidget: /* @__PURE__ */ jsx2("label", { label: "Hyprnotch" }),
      endWidget: /* @__PURE__ */ jsx2(
        "box",
        {
          children: [
            /* @__PURE__ */ jsx2(
              "box",
              {
                vertical: true
              }
            ),
            /* @__PURE__ */ jsx2("box", { vertical: true, children: [/* @__PURE__ */ jsx2(MediaIndicator, {})] })
          ]
        }
      )
    }
  );
}

// src/notch/state/NotchStateViewModel.ts
var NotchStateViewModel = class {
  logger = new Logger("NotchStateViewModel");
  notchState = Variable(
    "normal" /* NORMAL */
  );
  stateChangeTimeout = null;
  constructor() {
  }
  getNotchState() {
    return bind(this.notchState).as(() => {
      return this.notchState.get();
    });
  }
  setNotchState(state) {
    this.logger.info(`Setting notch state to: ${state}`);
    this.notchState.set(state);
  }
};

// src/sound/speaker_volume/SoundMuteButtonProps.tsx
function SoundMuteButton(props) {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: props.wirePlumberViewModel.getDefaultSpeakerVolume().as((volume) => {
        let className = "icon_button xsmall";
        return volume === 0 ? className += " outlined" : className += " filled";
      }),
      child: /* @__PURE__ */ jsx2("icon", { icon: props.wirePlumberViewModel.getDefaultSpeakerVolumeIcon() }),
      onButtonReleaseEvent: () => {
        props.wirePlumberViewModel.getDefaultSpeakerVolume().get() > 0 ? props.wirePlumberViewModel.muteDefaultSpeaker() : props.wirePlumberViewModel.unmuteDefaultSpeaker();
      }
    }
  );
}

// src/sound/speaker_volume/SoundSlider.tsx
function SoundSlider(props) {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      vertical: true,
      className: "sound_slider",
      children: [
        /* @__PURE__ */ jsx2(
          "slider",
          {
            vertical: true,
            inverted: true,
            min: 0,
            max: 100,
            value: props.initialValue,
            onDragged: (self) => {
              const volumeToSet = self.get_value() / 100;
              props.wirePlumberViewModel.setDefaultSpeakerVolume(volumeToSet);
            }
          }
        ),
        /* @__PURE__ */ jsx2(SoundMuteButton, { wirePlumberViewModel: props.wirePlumberViewModel })
      ]
    }
  );
}

// src/lib/icons/nerdfonts.ts
var nerdfonts_default = {
  sound: {
    bluetooth: {
      idle: "\u{F00AF}",
      connected: "\u{F00B1}",
      off: "\u{F00B2}"
    }
  },
  battery: {
    bluetooth: {
      ten: "\u{F093E}",
      twenty: "\u{F093F}",
      thirty: "\u{F0940}",
      forty: "\u{F0941}",
      fifty: "\u{F0942}",
      sixty: "\u{F0943}",
      seventy: "\u{F0944}",
      eighty: "\u{F0945}",
      ninety: "\u{F0946}",
      full: "\u{F0948}"
    }
  }
};

// src/sound/bluetooth/BluetoothViewModel.ts
import Bluetooth from "gi://AstalBluetooth";
var BluetoothViewModel = class {
  bluetooth = Bluetooth.get_default();
  logger = new Logger(this.constructor.name);
  constructor() {
  }
  getDevices() {
    return bind(this.bluetooth, "devices");
  }
  getAdapters() {
    return bind(this.bluetooth, "adapters");
  }
  getIsPowered() {
    return bind(this.bluetooth, "is_powered");
  }
  toggle() {
    this.bluetooth.toggle();
    this.logger.info(
      "Toggling bluetooth state to " + this.getIsPowered().get()
    );
  }
};

// src/sound/bluetooth/BluetoothSettingsMenu.tsx
var bluetoothViewModel = new BluetoothViewModel();
function BluetoothToggleButton() {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bluetoothViewModel.getIsPowered().as((isPowered) => {
        let className = "icon_button";
        className += isPowered ? " " : " outlined";
        return className;
      }),
      onClick: () => {
        bluetoothViewModel.toggle();
      },
      child: /* @__PURE__ */ jsx2(
        "label",
        {
          label: bluetoothViewModel.getIsPowered().as((isPowered) => {
            return isPowered ? nerdfonts_default.sound.bluetooth.idle : nerdfonts_default.sound.bluetooth.off;
          })
        }
      )
    }
  );
}
function BluetoothDeviceBatteryLevel() {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "bluetooth_device_battery_level",
      children: bluetoothViewModel.getDevices().as((devices) => {
        return devices.filter((device) => device.get_connected()).map((device) => /* @__PURE__ */ jsx2(
          "circularprogress",
          {
            rounded: true,
            startAt: 0,
            endAt: 1,
            value: bind(device, "batteryPercentage"),
            child: /* @__PURE__ */ jsx2("icon", { icon: bind(device, "icon") })
          }
        ));
      })
    }
  );
}
function BluetoothSettingsMenu() {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "bluetooth_settings_menu_container",
      children: [
        /* @__PURE__ */ jsx2(
          "box",
          {
            className: "bluetooth_settings_menu",
            children: [
              /* @__PURE__ */ jsx2(BluetoothToggleButton, {}),
              /* @__PURE__ */ jsx2(BluetoothDeviceBatteryLevel, {})
            ]
          }
        )
      ]
    }
  );
}

// src/sound/bluetooth/OutputDeviceSelector.tsx
var getSpeakerButtonClassName = (wirePlumberViewModel, speaker) => {
  return wirePlumberViewModel.getDefaultSpeaker().as((defaultSpeaker) => {
    let className = "output_device_button";
    if (defaultSpeaker && defaultSpeaker.get_id() === speaker.get_id()) {
      className += " selected";
    }
    return className;
  });
};
function OutputDeviceSelector() {
  const wirePlumberViewModel = new WirePlumberViewModel();
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      kineticScrolling: true,
      borderWidth: 0,
      shadowType: Gtk4.ShadowType.NONE,
      className: "output_devices_scrollable",
      child: /* @__PURE__ */ jsx2(
        "box",
        {
          orientation: Gtk4.Orientation.VERTICAL,
          children: wirePlumberViewModel.getSpeakers().as((speakers) => {
            speakers = speakers ? speakers : [];
            return speakers.map((speaker) => /* @__PURE__ */ jsx2(
              "button",
              {
                className: getSpeakerButtonClassName(
                  wirePlumberViewModel,
                  speaker
                ),
                onClick: () => {
                  wirePlumberViewModel.setDefaultSpeaker(speaker);
                },
                child: /* @__PURE__ */ jsx2("label", { label: speaker.get_description().slice(0, 20) })
              }
            ));
          })
        }
      )
    }
  );
}

// src/sound/SoundSettingsNotch.tsx
function SoundSettingsNotch() {
  const wirePlumberViewModel = new WirePlumberViewModel();
  const logger2 = new Logger("SoundSettingsNotch");
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "sound_settings_notch",
      child: /* @__PURE__ */ jsx2(
        "box",
        {
          children: [
            /* @__PURE__ */ jsx2(
              SoundSlider,
              {
                wirePlumberViewModel,
                initialValue: wirePlumberViewModel.getDefaultSpeakerVolume().get() * 100
              }
            ),
            /* @__PURE__ */ jsx2(OutputDeviceSelector, {}),
            /* @__PURE__ */ jsx2(BluetoothSettingsMenu, {})
          ]
        }
      )
    }
  );
}

// src/view/Hyprnotch.tsx
function Hyprnotch(gdkmonitor) {
  const notchStateViewModel = new NotchStateViewModel();
  const logger2 = new Logger("Hyprnotch");
  return /* @__PURE__ */ jsx2(
    "window",
    {
      className: "hyprnotch",
      namespace: "hyprnotch",
      gdkmonitor,
      anchor: Astal7.WindowAnchor.TOP,
      exclusivity: Astal7.Exclusivity.IGNORE,
      application: app_default,
      child: /* @__PURE__ */ jsx2(
        "centerbox",
        {
          centerWidget: /* @__PURE__ */ jsx2(
            "button",
            {
              onButtonPressEvent: () => {
                notchStateViewModel.getNotchState().get() === "normal" /* NORMAL */ ? notchStateViewModel.setNotchState("hovered" /* HOVERED */) : notchStateViewModel.setNotchState("normal" /* NORMAL */);
              },
              className: notchStateViewModel.getNotchState().as((notchState) => {
                let classes = "hyprnotch-button-area";
                switch (notchState) {
                  case "hovered" /* HOVERED */:
                    classes += " expanded";
                    break;
                  case "SOUND_SETTINGS" /* SOUND_SETTINGS */:
                    classes += " sound_settings";
                    break;
                  case "normal" /* NORMAL */:
                    classes += " normal";
                    break;
                }
                return classes;
              }),
              child: notchStateViewModel.getNotchState().as((notchState) => {
                switch (notchState) {
                  case "SOUND_SETTINGS" /* SOUND_SETTINGS */:
                    return /* @__PURE__ */ jsx2(SoundSettingsNotch, {});
                  case "hovered" /* HOVERED */:
                    return /* @__PURE__ */ jsx2(
                      ExpandedNotch,
                      {
                        notchStateViewModel
                      }
                    );
                  case "normal" /* NORMAL */:
                    return /* @__PURE__ */ jsx2(NormalNotch, {});
                }
              })
            }
          )
        }
      )
    }
  );
}

// src/hyprland/workspaces/WorkspaceViewModel.ts
import Hyprland from "gi://AstalHyprland";
var WorkspaceViewModel = class {
  hyprland = Hyprland.get_default();
  logger = new Logger("WorkspaceViewModel");
  constructor() {
    this.logger = new Logger("WorkspaceViewModel");
    this.logger.debug("WorkspaceViewModel created");
  }
  getWorkspaces() {
    return bind(this.hyprland, "workspaces").as(() => {
      const workspaces = this.hyprland.get_workspaces().sort((a, b) => {
        return a.get_id() - b.get_id();
      });
      this.logger.debug(
        "Hyprland workspaces updated to: ",
        workspaces.map((workspace) => {
          return workspace.get_name();
        }).toString()
      );
      if (workspaces.length === 0) {
        this.logger.warn("No workspaces found in Hyprland");
      }
      return workspaces;
    });
  }
  getFocusedWorkspace() {
    return bind(this.hyprland, "focused_workspace");
  }
  switchToWorkspace(workspaceId) {
    if (!workspaceId) {
      this.logger.error("Invalid workspace ID provided for switching");
      return;
    }
    if (this.hyprland.get_focused_workspace().get_id() === workspaceId) {
      this.logger.debug(
        `Workspace ${workspaceId} is already focused, no action taken`
      );
      return;
    }
    this.logger.info(`Switching to workspace ${workspaceId}`);
    this.hyprland.get_workspace(workspaceId).focus();
  }
  getPerMonitorWorkspaces(gdkMonitor) {
    return this.getWorkspaces().as((workspaces) => {
      const hyprlandMonitors = this.hyprland.get_monitors();
      const targetHyprlandMonitor = hyprlandMonitors.find((monitor) => {
        const gdkDisplayName = gdkMonitor.get_display()?.get_name() || "";
        const hyprlandDisplayName = monitor.get_name() || "";
        if (gdkDisplayName && hyprlandDisplayName && gdkDisplayName === hyprlandDisplayName) {
          return true;
        }
        return monitor.get_make() === gdkMonitor.get_manufacturer() && monitor.get_model() === gdkMonitor.get_model() && monitor.get_x() === gdkMonitor.get_geometry().x && monitor.get_y() === gdkMonitor.get_geometry().y;
      });
      if (!targetHyprlandMonitor) {
        this.logger.warn(
          "Could not find matching Hyprland monitor for GDK monitor"
        );
        return [];
      }
      return workspaces.filter(
        (workspace) => workspace.get_monitor().get_id() === targetHyprlandMonitor.get_id()
      );
    });
  }
};

// src/hyprland/workspaces/WorkspacesBar.tsx
var getClientIconName = (client) => {
  const className = client.get_class().toLowerCase();
  const jetbrainsPrefix = "jetbrains-";
  if (className.startsWith(jetbrainsPrefix)) {
    return className.replace(jetbrainsPrefix, "");
  }
  return className;
};
function WorkspaceButton({
  workspace,
  workspaceViewModel,
  logger: logger2
}) {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: workspaceViewModel.getFocusedWorkspace().as((focusedWorkspace) => {
        let workspaceClass = "workspace_button";
        if (focusedWorkspace.get_id() === workspace.get_id()) {
          workspaceClass += " focused";
        }
        return workspaceClass;
      }),
      child: workspace.get_clients().length === 0 ? /* @__PURE__ */ jsx2("label", { label: workspace.get_name() }) : /* @__PURE__ */ jsx2(
        "box",
        {
          children: bind(workspace, "clients").as(
            (clients) => clients.map((client) => /* @__PURE__ */ jsx2("icon", { icon: getClientIconName(client) }))
          )
        }
      ),
      onClick: () => {
        logger2.debug(
          `Pressing button for workspace ${workspace.get_id()}, switching to it`
        );
        workspaceViewModel.switchToWorkspace(workspace.get_id());
      }
    }
  );
}
function WorkspacesBar(props) {
  const workspaceViewModel = new WorkspaceViewModel();
  const logger2 = new Logger("WorkspacesBar");
  const gdkmonitor = props.gdkmonitor;
  logger2.debug(
    `WorkspacesBar created on monitor ${gdkmonitor.get_manufacturer()}`
  );
  const workspacesBinding = gdkmonitor.get_model() ? workspaceViewModel.getPerMonitorWorkspaces(gdkmonitor) : workspaceViewModel.getWorkspaces();
  return /* @__PURE__ */ jsx2(
    "box",
    {
      halign: Gtk4.Align.START,
      valign: Gtk4.Align.START,
      className: "workspaces_bar_container",
      child: /* @__PURE__ */ jsx2(
        "box",
        {
          className: "workspaces_bar",
          child: workspacesBinding.as((workspaces) => /* @__PURE__ */ jsx2(
            "box",
            {
              children: workspaces.map((workspace) => /* @__PURE__ */ jsx2(
                WorkspaceButton,
                {
                  workspace,
                  workspaceViewModel,
                  logger: logger2
                }
              ))
            }
          ))
        }
      )
    }
  );
}

// src/lib/events/mouse.ts
var isPrimaryClick = (event) => event.button === Gdk.BUTTON_PRIMARY;
var isSecondaryClick = (event) => event.button === Gdk.BUTTON_SECONDARY;

// src/tray/TrayItemNotch.tsx
var MenuEntry = ({ item }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "system_tray_bar_notch_entry",
      cursor: "pointer",
      onClick: (self, event) => {
        if (isPrimaryClick(event)) {
          item.activate(0, 0);
        }
        if (isSecondaryClick(event)) {
          const menuModel = item.get_menu_model();
          const actionGroup = item.get_action_group();
          if (menuModel && actionGroup) {
            const menu = Gtk4.Menu.new_from_model(menuModel);
            menu.insert_action_group("dbusmenu", actionGroup);
            menu.popup_at_widget(
              self,
              Gdk.Gravity.NORTH_WEST,
              Gdk.Gravity.SOUTH_WEST,
              null
            );
          }
        }
      },
      child: /* @__PURE__ */ jsx2(
        "box",
        {
          className: "system_tray_bar_notch_content",
          vertical: true,
          children: [
            /* @__PURE__ */ jsx2(
              "label",
              {
                label: bind(item, "title").as(
                  (title) => title || item.get_tooltip()?.title || ""
                )
              }
            ),
            /* @__PURE__ */ jsx2(
              "label",
              {
                label: bind(item, "tooltip").as(
                  (tooltip) => tooltip?.description || ""
                )
              }
            )
          ]
        }
      )
    }
  );
};
function TrayItemNotch(props) {
  const { systemTrayViewModel } = props;
  const focusedItem = systemTrayViewModel.getFocusedTrayItem();
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "system_tray_bar_notch focused",
      vertical: true,
      child: focusedItem.as((item) => {
        if (!item || !item.get_menu_model()) {
          return /* @__PURE__ */ jsx2("box", {});
        }
        return /* @__PURE__ */ jsx2(MenuEntry, { item });
      })
    }
  );
}

// src/tray/SystemTrayItemButton.tsx
var SYSTEM_TRAY_ITEM_TIMEOUT = 1e4;
function getTrayItemClass(viewModel, item) {
  const existingTrayItems = viewModel.getTrayItems().get().filter((item2) => item2.get_title());
  return viewModel.getFocusedTrayItem().as((focused) => {
    let classes = "system_tray_item";
    if (focused && focused.get_title() === item.get_title()) {
      classes += " active";
    } else {
      classes += " notch";
    }
    if (existingTrayItems.indexOf(item) === 0) {
      classes += " first";
    }
    if (existingTrayItems.indexOf(item) === existingTrayItems.length - 1) {
      classes += " last";
    }
    return classes;
  });
}
var onSystemTrayItemClicked = (systemTrayViewModel, item) => {
  const currentlyFocused = systemTrayViewModel.getFocusedTrayItem().get();
  if (currentlyFocused && currentlyFocused.get_title() === item.get_title()) {
    systemTrayViewModel.setFocusedTrayItem(null);
  } else {
    systemTrayViewModel.setFocusedTrayItem(item);
    timeout(
      SYSTEM_TRAY_ITEM_TIMEOUT,
      () => systemTrayViewModel.setFocusedTrayItem(null)
    );
  }
};
function SystemTrayItemButton(props) {
  const { systemTrayViewModel, item } = props;
  const trayItemsIdNamesMap = {};
  trayItemsIdNamesMap["chrome_status_icon_1"] = {
    icon: "slack"
  };
  trayItemsIdNamesMap["openrgb"] = {
    icon: "openrgb"
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      cursor: "pointer",
      hexpand: true,
      className: getTrayItemClass(systemTrayViewModel, item),
      onButtonPressEvent: () => onSystemTrayItemClicked(systemTrayViewModel, item),
      onHover: () => systemTrayViewModel.refreshTrayItem(item),
      child: /* @__PURE__ */ jsx2(
        "icon",
        {
          icon: bind(item, "iconName").as((iconName) => {
            if (!iconName) {
              return trayItemsIdNamesMap[item.get_id()]?.icon || "unknown";
            }
            return iconName;
          })
        }
      )
    }
  );
}

// src/lib/material/animations.ts
var animations_default = {
  expressive: {
    fast_spatial: {
      curve: "cubic-bezier(0.42, 1.67, 0.21, 0.9)",
      duration: 350
    },
    default_spatial: {
      curve: "cubic-bezier(0.38, 1.21, 0.22, 1)",
      duration: 500
    },
    slow_spatial: {
      curve: "cubic-bezier(0.39, 1.29, 0.35, 0.98)",
      duration: 650
    },
    fast_effects: {
      curve: "cubic-bezier(0.31, 0.94, 0.34, 1)",
      duration: 150
    },
    default_effects: {
      curve: "cubic-bezier(0.34, 0.8, 0.34, 1)",
      duration: 200
    },
    slow_effects: {
      curve: "cubic-bezier(0.34, 0.88, 0.34, 1)",
      duration: 300
    }
  }
};

// src/tray/SystemTray.tsx
var logger = new Logger("TrayItemNotch");
function SystemTray({ systemTrayViewModel }) {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: bind(systemTrayViewModel.getFocusedTrayItem()).as(
        (focusedTrayItem) => {
          return "system_tray_constant_background" + (focusedTrayItem ? " focused" : "");
        }
      ),
      child: /* @__PURE__ */ jsx2(
        "box",
        {
          className: bind(systemTrayViewModel.getFocusedTrayItem()).as(
            (focusedTrayItem) => {
              return "system_tray" + (focusedTrayItem ? " focused" : "");
            }
          ),
          vertical: true,
          halign: Gtk4.Align.END,
          valign: Gtk4.Align.START,
          children: [
            /* @__PURE__ */ jsx2(
              "box",
              {
                className: "system_tray_items_list",
                children: systemTrayViewModel.getTrayItems().as(
                  (items) => items.filter((item) => item.get_title() !== null).map((item, index) => /* @__PURE__ */ jsx2(
                    SystemTrayItemButton,
                    {
                      systemTrayViewModel,
                      item
                    }
                  ))
                )
              }
            ),
            /* @__PURE__ */ jsx2(
              "revealer",
              {
                transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
                transitionDuration: animations_default.expressive.fast_effects.duration,
                revealChild: systemTrayViewModel.getFocusedTrayItem().as((focusedTrayItem) => {
                  return focusedTrayItem !== null;
                }),
                child: /* @__PURE__ */ jsx2(TrayItemNotch, { systemTrayViewModel })
              }
            )
          ]
        }
      )
    }
  );
}

// src/tray/SystemTrayViewModel.ts
import Tray from "gi://AstalTray";
var SystemTrayViewModel = class {
  tray = Tray.get_default();
  logger = new Logger(this.constructor.name);
  focusedTrayItem = new Variable(null);
  constructor() {
  }
  getTrayItems() {
    return bind(this.tray, "items");
  }
  getFocusedTrayItem() {
    return bind(this.focusedTrayItem);
  }
  setFocusedTrayItem(item) {
    if (!item) {
      this.logger.debug("Clearing focused tray item");
      this.focusedTrayItem.set(null);
    } else {
      this.logger.debug("Focusing tray item", item.get_title());
      this.focusedTrayItem.set(item);
    }
  }
  refreshTrayItem(item) {
    this.logger.debug(
      "Refreshing tray item",
      item.get_title(),
      item.get_tooltip()?.description,
      item.get_icon_name()
    );
    item.about_to_show();
  }
};

// src/system_stats/battery/BatteryViewModel.ts
import Battery from "gi://AstalBattery";
var BatteryViewModel = class {
  logger = new Logger(this.constructor.name);
  battery = Battery.get_default();
  getBatteryPercentage() {
    return bind(this.battery, "percentage");
  }
  getBatteryState() {
    return bind(this.battery, "state");
  }
  getBatteryIcon() {
    return bind(this.battery, "icon_name");
  }
};

// src/system_stats/battery/SystemDetails.tsx
function BatteryLevelCircularProgress(props) {
  const logger2 = new Logger("BatteryLevelCircularProgress");
  const batteryViewModel = new BatteryViewModel();
  return /* @__PURE__ */ jsx2(
    "circularprogress",
    {
      className: "battery_level_circular_progress",
      rounded: true,
      value: batteryViewModel.getBatteryPercentage().as((percentage) => {
        logger2.debug(`Battery percentage: ${percentage}`);
        return percentage;
      }),
      startAt: 0,
      endAt: 1,
      child: /* @__PURE__ */ jsx2("icon", { icon: batteryViewModel.getBatteryIcon() })
    }
  );
}
function SystemDetailsBarModule(props) {
  const logger2 = new Logger("SystemDetails");
  const batteryViewModel = new BatteryViewModel();
  logger2.debug("SystemDetails component created");
  return /* @__PURE__ */ jsx2(
    "box",
    {
      valign: Gtk4.Align.START,
      halign: Gtk4.Align.END,
      className: "system_details_container",
      children: [
        /* @__PURE__ */ jsx2(BatteryLevelCircularProgress, { batteryViewModel })
      ]
    }
  );
}

// src/notification/NewNotificationPopup.tsx
import Gtk6 from "gi://Gtk?version=3.0";

// src/notification/NoNewNotificationPopup.tsx
import Gtk5 from "gi://Gtk?version=3.0";

// src/notification/NotificationViewModel.ts
import Notifd from "gi://AstalNotifd";
var NotificationViewModel = class {
  notifid = Notifd.get_default();
  hasNewNotification = Variable(false);
  transitionTimer = null;
  constructor() {
    this.notifid.connect("notified", () => {
      this.handleNewNotification();
    });
  }
  handleNewNotification() {
    if (this.transitionTimer) {
      clearTimeout(this.transitionTimer);
    }
    this.hasNewNotification.set(true);
  }
  getNotifications(sort = true) {
    return bind(this.notifid, "notifications").as((notifications) => {
      if (sort) {
        notifications = notifications.sort((a, b) => {
          return b.get_time() - a.get_time();
        });
      }
      return notifications;
    });
  }
  connectNewNotificationCallback(callback) {
    this.notifid.connect("notified", (self, id) => {
      callback(self, id);
    });
  }
  getNotificationById(id) {
    return this.notifid.get_notification(id);
  }
  getIsDoNotDisturb() {
    return bind(this.notifid, "dontDisturb");
  }
  setDoNotDisturb(value) {
    this.notifid.set_dont_disturb(value);
  }
};

// src/notification/NoNewNotificationPopup.tsx
var NOTIFICATIONS_READ_DND_ICON = "indicator-notification-read-dnd";
var NOTIFICATIONS_UNREAD_DND_ICON = "indicator-notification-unread-dnd";
var NOTIFICATIONS_READ_ICON = "indicator-notification-read";
var NOTIFICATIONS_UNREAD_ICON = "indicator-notification-unread";
var notificationViewModel = new NotificationViewModel();
function NoNewNotificationPopup() {
  const logger2 = new Logger("NoNewNotificationPopup");
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "no_notification",
      vexpand: true,
      halign: Gtk5.Align.CENTER,
      valign: Gtk5.Align.CENTER,
      child: notificationViewModel.getIsDoNotDisturb().as((isDoNotDisturb) => {
        return /* @__PURE__ */ jsx2(
          "button",
          {
            cursor: "pointer",
            className: "icon_button xsmall ",
            onButtonPressEvent: () => {
              const isDoNotDisturb2 = notificationViewModel.getIsDoNotDisturb().get();
              logger2.debug(`Toggling Do Not Disturb mode: ${!isDoNotDisturb2}`);
              notificationViewModel.setDoNotDisturb(!isDoNotDisturb2);
            },
            child: /* @__PURE__ */ jsx2(
              "icon",
              {
                icon: notificationViewModel.getIsDoNotDisturb().as((isDoNotDisturb2) => {
                  const notificationsCount = notificationViewModel.getNotifications().get().length;
                  if (isDoNotDisturb2) {
                    return notificationsCount > 0 ? NOTIFICATIONS_UNREAD_DND_ICON : NOTIFICATIONS_READ_DND_ICON;
                  } else {
                    return notificationsCount > 0 ? NOTIFICATIONS_UNREAD_ICON : NOTIFICATIONS_READ_ICON;
                  }
                })
              }
            )
          }
        );
      })
    }
  );
}

// src/notification/NewNotificationPopup.tsx
function NewNotificationPopup(props) {
  const notification = props.notification;
  if (!notification) {
    return /* @__PURE__ */ jsx2(NoNewNotificationPopup, {});
  }
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "new_notification_card_preview",
      vexpand: true,
      halign: Gtk6.Align.CENTER,
      valign: Gtk6.Align.CENTER,
      child: /* @__PURE__ */ jsx2(
        "box",
        {
          children: [
            notification.get_app_icon() ? /* @__PURE__ */ jsx2("icon", { icon: notification.get_app_icon() }) : /* @__PURE__ */ jsx2("icon", { icon: "notification" }),
            /* @__PURE__ */ jsx2("label", { label: notification.get_summary() })
          ]
        }
      )
    }
  );
}

// src/notification/NewNotificationViewModel.tsx
var NewNotificationViewModel = class _NewNotificationViewModel {
  notificationViewModel = new NotificationViewModel();
  resultingWidgetVariable = new Variable(null);
  logger = new Logger(this.constructor.name);
  static DEFAULT_NOTIFICATION_TIMEOUT = 5e3;
  constructor() {
    this.resultingWidgetVariable.set(/* @__PURE__ */ jsx2(NoNewNotificationPopup, {}));
    this.setupNewNotificationListener();
  }
  setupNewNotificationListener() {
    this.notificationViewModel.connectNewNotificationCallback(
      (notificationClient, notificationId) => {
        const notification = this.notificationViewModel.getNotificationById(notificationId);
        this.resultingWidgetVariable.set(
          /* @__PURE__ */ jsx2(NewNotificationPopup, { notification })
        );
        const notificationTimeout = notification.get_expire_timeout() > 0 ? notification.get_expire_timeout() : _NewNotificationViewModel.DEFAULT_NOTIFICATION_TIMEOUT;
        this.logger.debug(
          `New notification received: ${notification.get_app_name()} with timeout ${notificationTimeout}`
        );
        timeout(notificationTimeout, () => {
          this.resultingWidgetVariable.set(/* @__PURE__ */ jsx2(NoNewNotificationPopup, {}));
        });
      }
    );
  }
  getResultingWidget() {
    return bind(this.resultingWidgetVariable);
  }
};

// src/notification/Notification.tsx
function NotificationsPopup() {
  const newNotificationViewModel = new NewNotificationViewModel();
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "notification_bar",
      vexpand: true,
      halign: Gtk4.Align.END,
      valign: Gtk4.Align.START,
      child: newNotificationViewModel.getResultingWidget()
    }
  );
}

// src/view/bar/Bar.tsx
function RightSideBar({ gdkmonitor, systemTrayViewModel }) {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      vertical: false,
      hexpand: true,
      halign: Gtk4.Align.END,
      children: [
        /* @__PURE__ */ jsx2(SystemDetailsBarModule, { monitor: gdkmonitor }),
        /* @__PURE__ */ jsx2(SystemTray, { systemTrayViewModel }),
        /* @__PURE__ */ jsx2(NotificationsPopup, { gdkmonitor })
      ]
    }
  );
}
function LeftSideBar({ gdkmonitor }) {
  return /* @__PURE__ */ jsx2("box", { vexpand: true, child: /* @__PURE__ */ jsx2(WorkspacesBar, { gdkmonitor }) });
}
function Bar(gdkmonitor) {
  const logger2 = new Logger("Bar");
  const systemTrayViewModel = new SystemTrayViewModel();
  logger2.debug("Bar window created");
  return /* @__PURE__ */ jsx2(
    "window",
    {
      className: "hyprnotch_bar",
      namespace: "hyprnotch",
      gdkmonitor,
      anchor: Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.LEFT | Astal7.WindowAnchor.RIGHT,
      exclusivity: Astal7.Exclusivity.IGNORE,
      application: app_default,
      child: /* @__PURE__ */ jsx2(
        "centerbox",
        {
          className: "hyprnotch_bar_container",
          startWidget: /* @__PURE__ */ jsx2(LeftSideBar, { gdkmonitor }),
          centerWidget: /* @__PURE__ */ jsx2("box", {}),
          endWidget: /* @__PURE__ */ jsx2(
            RightSideBar,
            {
              gdkmonitor,
              systemTrayViewModel
            }
          )
        }
      )
    }
  );
}

// src/view/bar/BarContainerBackground.tsx
function BarContainerBackground(gdkmonitor) {
  const logger2 = new Logger("BarContainerBackground");
  logger2.debug("BarContainerBackground window created");
  return /* @__PURE__ */ jsx2(
    "window",
    {
      className: "hyprnotch",
      namespace: "hyprnotch",
      anchor: Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.LEFT | Astal7.WindowAnchor.RIGHT,
      exclusivity: Astal7.Exclusivity.EXCLUSIVE,
      application: app_default,
      gdkmonitor,
      child: /* @__PURE__ */ jsx2("box", { className: "hyprnotch_bar_container_background" })
    }
  );
}

// app.ts
app_default.start({
  css: main_default,
  main() {
    app_default.get_monitors().map((monitor) => {
      BarContainerBackground(monitor);
      Bar(monitor);
      Hyprnotch(monitor);
    });
  }
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vbml4L3N0b3JlLzhjbDU4aXAybmFzZzZyZHlqNTljd2cyZjBxYml4czI4LWFzdGFsLWdqcy9zaGFyZS9hc3RhbC9nanMvZ3RrMy9pbmRleC50cyIsICIuLi8uLi8uLi8uLi9uaXgvc3RvcmUvOGNsNThpcDJuYXNnNnJkeWo1OWN3ZzJmMHFiaXhzMjgtYXN0YWwtZ2pzL3NoYXJlL2FzdGFsL2dqcy92YXJpYWJsZS50cyIsICIuLi8uLi8uLi8uLi9uaXgvc3RvcmUvOGNsNThpcDJuYXNnNnJkeWo1OWN3ZzJmMHFiaXhzMjgtYXN0YWwtZ2pzL3NoYXJlL2FzdGFsL2dqcy9iaW5kaW5nLnRzIiwgIi4uLy4uLy4uLy4uL25peC9zdG9yZS84Y2w1OGlwMm5hc2c2cmR5ajU5Y3dnMmYwcWJpeHMyOC1hc3RhbC1nanMvc2hhcmUvYXN0YWwvZ2pzL3RpbWUudHMiLCAiLi4vLi4vLi4vLi4vbml4L3N0b3JlLzhjbDU4aXAybmFzZzZyZHlqNTljd2cyZjBxYml4czI4LWFzdGFsLWdqcy9zaGFyZS9hc3RhbC9nanMvcHJvY2Vzcy50cyIsICIuLi8uLi8uLi8uLi9uaXgvc3RvcmUvOGNsNThpcDJuYXNnNnJkeWo1OWN3ZzJmMHFiaXhzMjgtYXN0YWwtZ2pzL3NoYXJlL2FzdGFsL2dqcy9fYXN0YWwudHMiLCAiLi4vLi4vLi4vLi4vbml4L3N0b3JlLzhjbDU4aXAybmFzZzZyZHlqNTljd2cyZjBxYml4czI4LWFzdGFsLWdqcy9zaGFyZS9hc3RhbC9nanMvZ3RrMy9hc3RhbGlmeS50cyIsICIuLi8uLi8uLi8uLi9uaXgvc3RvcmUvOGNsNThpcDJuYXNnNnJkeWo1OWN3ZzJmMHFiaXhzMjgtYXN0YWwtZ2pzL3NoYXJlL2FzdGFsL2dqcy9ndGszL2FwcC50cyIsICIuLi8uLi8uLi8uLi9uaXgvc3RvcmUvOGNsNThpcDJuYXNnNnJkeWo1OWN3ZzJmMHFiaXhzMjgtYXN0YWwtZ2pzL3NoYXJlL2FzdGFsL2dqcy9vdmVycmlkZXMudHMiLCAiLi4vLi4vLi4vLi4vbml4L3N0b3JlLzhjbDU4aXAybmFzZzZyZHlqNTljd2cyZjBxYml4czI4LWFzdGFsLWdqcy9zaGFyZS9hc3RhbC9nanMvX2FwcC50cyIsICIuLi8uLi8uLi8uLi9uaXgvc3RvcmUvOGNsNThpcDJuYXNnNnJkeWo1OWN3ZzJmMHFiaXhzMjgtYXN0YWwtZ2pzL3NoYXJlL2FzdGFsL2dqcy9ndGszL3dpZGdldC50cyIsICJzYXNzOi9ob21lL2NjcmV0dS9Qcm9qZWN0cy9oeXBybm90Y2gvc3R5bGUvbWFpbi5zY3NzIiwgIi4uLy4uLy4uLy4uL25peC9zdG9yZS84Y2w1OGlwMm5hc2c2cmR5ajU5Y3dnMmYwcWJpeHMyOC1hc3RhbC1nanMvc2hhcmUvYXN0YWwvZ2pzL2luZGV4LnRzIiwgIi4uLy4uLy4uLy4uL25peC9zdG9yZS84Y2w1OGlwMm5hc2c2cmR5ajU5Y3dnMmYwcWJpeHMyOC1hc3RhbC1nanMvc2hhcmUvYXN0YWwvZ2pzL2ZpbGUudHMiLCAiLi4vLi4vLi4vLi4vbml4L3N0b3JlLzhjbDU4aXAybmFzZzZyZHlqNTljd2cyZjBxYml4czI4LWFzdGFsLWdqcy9zaGFyZS9hc3RhbC9nanMvZ29iamVjdC50cyIsICJzcmMvdGltZS9UaW1lU2VydmljZS50cyIsICJzcmMvc291bmQvV2lyZVBsdW1iZXJWaWV3TW9kZWwudHMiLCAic3JjL2xvZ2dlci9Mb2dnZXIudHMiLCAiLi4vLi4vLi4vLi4vbml4L3N0b3JlLzhjbDU4aXAybmFzZzZyZHlqNTljd2cyZjBxYml4czI4LWFzdGFsLWdqcy9zaGFyZS9hc3RhbC9nanMvZ3RrMy9qc3gtcnVudGltZS50cyIsICJzcmMvdmlldy9ub3RjaC9leHBhbmRlZC9TZXR0aW5nc01lbnUudHN4IiwgInNyYy92aWV3L25vdGNoL2V4cGFuZGVkL0V4cGFuZGVkTm90Y2gudHN4IiwgInNyYy9tZWRpYS9NZWRpYVZpZXdNb2RlbC50cyIsICJzcmMvdmlldy9ub3RjaC9ub3JtYWwvTm9ybWFsTm90Y2gudHN4IiwgInNyYy9ub3RjaC9zdGF0ZS9Ob3RjaFN0YXRlVmlld01vZGVsLnRzIiwgInNyYy9zb3VuZC9zcGVha2VyX3ZvbHVtZS9Tb3VuZE11dGVCdXR0b25Qcm9wcy50c3giLCAic3JjL3NvdW5kL3NwZWFrZXJfdm9sdW1lL1NvdW5kU2xpZGVyLnRzeCIsICJzcmMvbGliL2ljb25zL25lcmRmb250cy50cyIsICJzcmMvc291bmQvYmx1ZXRvb3RoL0JsdWV0b290aFZpZXdNb2RlbC50cyIsICJzcmMvc291bmQvYmx1ZXRvb3RoL0JsdWV0b290aFNldHRpbmdzTWVudS50c3giLCAic3JjL3NvdW5kL2JsdWV0b290aC9PdXRwdXREZXZpY2VTZWxlY3Rvci50c3giLCAic3JjL3NvdW5kL1NvdW5kU2V0dGluZ3NOb3RjaC50c3giLCAic3JjL3ZpZXcvSHlwcm5vdGNoLnRzeCIsICJzcmMvaHlwcmxhbmQvd29ya3NwYWNlcy9Xb3Jrc3BhY2VWaWV3TW9kZWwudHMiLCAic3JjL2h5cHJsYW5kL3dvcmtzcGFjZXMvV29ya3NwYWNlc0Jhci50c3giLCAic3JjL2xpYi9ldmVudHMvbW91c2UudHMiLCAic3JjL3RyYXkvVHJheUl0ZW1Ob3RjaC50c3giLCAic3JjL3RyYXkvU3lzdGVtVHJheUl0ZW1CdXR0b24udHN4IiwgInNyYy9saWIvbWF0ZXJpYWwvYW5pbWF0aW9ucy50cyIsICJzcmMvdHJheS9TeXN0ZW1UcmF5LnRzeCIsICJzcmMvdHJheS9TeXN0ZW1UcmF5Vmlld01vZGVsLnRzIiwgInNyYy9zeXN0ZW1fc3RhdHMvYmF0dGVyeS9CYXR0ZXJ5Vmlld01vZGVsLnRzIiwgInNyYy9zeXN0ZW1fc3RhdHMvYmF0dGVyeS9TeXN0ZW1EZXRhaWxzLnRzeCIsICJzcmMvbm90aWZpY2F0aW9uL05ld05vdGlmaWNhdGlvblBvcHVwLnRzeCIsICJzcmMvbm90aWZpY2F0aW9uL05vTmV3Tm90aWZpY2F0aW9uUG9wdXAudHN4IiwgInNyYy9ub3RpZmljYXRpb24vTm90aWZpY2F0aW9uVmlld01vZGVsLnRzIiwgInNyYy9ub3RpZmljYXRpb24vTmV3Tm90aWZpY2F0aW9uVmlld01vZGVsLnRzeCIsICJzcmMvbm90aWZpY2F0aW9uL05vdGlmaWNhdGlvbi50c3giLCAic3JjL3ZpZXcvYmFyL0Jhci50c3giLCAic3JjL3ZpZXcvYmFyL0JhckNvbnRhaW5lckJhY2tncm91bmQudHN4IiwgImFwcC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249My4wXCJcbmltcG9ydCBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249My4wXCJcbmltcG9ydCBHZGsgZnJvbSBcImdpOi8vR2RrP3ZlcnNpb249My4wXCJcbmltcG9ydCBhc3RhbGlmeSwgeyB0eXBlIENvbnN0cnVjdFByb3BzLCB0eXBlIEJpbmRhYmxlUHJvcHMgfSBmcm9tIFwiLi9hc3RhbGlmeS5qc1wiXG5cbmV4cG9ydCB7IEFzdGFsLCBHdGssIEdkayB9XG5leHBvcnQgeyBkZWZhdWx0IGFzIEFwcCB9IGZyb20gXCIuL2FwcC5qc1wiXG5leHBvcnQgeyBhc3RhbGlmeSwgQ29uc3RydWN0UHJvcHMsIEJpbmRhYmxlUHJvcHMgfVxuZXhwb3J0ICogYXMgV2lkZ2V0IGZyb20gXCIuL3dpZGdldC5qc1wiXG5leHBvcnQgeyBob29rIH0gZnJvbSBcIi4uL19hc3RhbFwiXG4iLCAiaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsSU9cIlxuaW1wb3J0IEJpbmRpbmcsIHsgdHlwZSBDb25uZWN0YWJsZSwgdHlwZSBTdWJzY3JpYmFibGUgfSBmcm9tIFwiLi9iaW5kaW5nLmpzXCJcbmltcG9ydCB7IGludGVydmFsIH0gZnJvbSBcIi4vdGltZS5qc1wiXG5pbXBvcnQgeyBleGVjQXN5bmMsIHN1YnByb2Nlc3MgfSBmcm9tIFwiLi9wcm9jZXNzLmpzXCJcblxuY2xhc3MgVmFyaWFibGVXcmFwcGVyPFQ+IGV4dGVuZHMgRnVuY3Rpb24ge1xuICAgIHByaXZhdGUgdmFyaWFibGUhOiBBc3RhbC5WYXJpYWJsZUJhc2VcbiAgICBwcml2YXRlIGVyckhhbmRsZXI/ID0gY29uc29sZS5lcnJvclxuXG4gICAgcHJpdmF0ZSBfdmFsdWU6IFRcbiAgICBwcml2YXRlIF9wb2xsPzogQXN0YWwuVGltZVxuICAgIHByaXZhdGUgX3dhdGNoPzogQXN0YWwuUHJvY2Vzc1xuXG4gICAgcHJpdmF0ZSBwb2xsSW50ZXJ2YWwgPSAxMDAwXG4gICAgcHJpdmF0ZSBwb2xsRXhlYz86IHN0cmluZ1tdIHwgc3RyaW5nXG4gICAgcHJpdmF0ZSBwb2xsVHJhbnNmb3JtPzogKHN0ZG91dDogc3RyaW5nLCBwcmV2OiBUKSA9PiBUXG4gICAgcHJpdmF0ZSBwb2xsRm4/OiAocHJldjogVCkgPT4gVCB8IFByb21pc2U8VD5cblxuICAgIHByaXZhdGUgd2F0Y2hUcmFuc2Zvcm0/OiAoc3Rkb3V0OiBzdHJpbmcsIHByZXY6IFQpID0+IFRcbiAgICBwcml2YXRlIHdhdGNoRXhlYz86IHN0cmluZ1tdIHwgc3RyaW5nXG5cbiAgICBjb25zdHJ1Y3Rvcihpbml0OiBUKSB7XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBpbml0XG4gICAgICAgIHRoaXMudmFyaWFibGUgPSBuZXcgQXN0YWwuVmFyaWFibGVCYXNlKClcbiAgICAgICAgdGhpcy52YXJpYWJsZS5jb25uZWN0KFwiZHJvcHBlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0b3BXYXRjaCgpXG4gICAgICAgICAgICB0aGlzLnN0b3BQb2xsKClcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy52YXJpYWJsZS5jb25uZWN0KFwiZXJyb3JcIiwgKF8sIGVycikgPT4gdGhpcy5lcnJIYW5kbGVyPy4oZXJyKSlcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG4gICAgICAgICAgICBhcHBseTogKHRhcmdldCwgXywgYXJncykgPT4gdGFyZ2V0Ll9jYWxsKGFyZ3NbMF0pLFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHByaXZhdGUgX2NhbGw8UiA9IFQ+KHRyYW5zZm9ybT86ICh2YWx1ZTogVCkgPT4gUik6IEJpbmRpbmc8Uj4ge1xuICAgICAgICBjb25zdCBiID0gQmluZGluZy5iaW5kKHRoaXMpXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm0gPyBiLmFzKHRyYW5zZm9ybSkgOiBiIGFzIHVua25vd24gYXMgQmluZGluZzxSPlxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKGBWYXJpYWJsZTwke3RoaXMuZ2V0KCl9PmApXG4gICAgfVxuXG4gICAgZ2V0KCk6IFQgeyByZXR1cm4gdGhpcy5fdmFsdWUgfVxuICAgIHNldCh2YWx1ZTogVCkge1xuICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMuX3ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICB0aGlzLnZhcmlhYmxlLmVtaXQoXCJjaGFuZ2VkXCIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGFydFBvbGwoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wb2xsKVxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgaWYgKHRoaXMucG9sbEZuKSB7XG4gICAgICAgICAgICB0aGlzLl9wb2xsID0gaW50ZXJ2YWwodGhpcy5wb2xsSW50ZXJ2YWwsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gdGhpcy5wb2xsRm4hKHRoaXMuZ2V0KCkpXG4gICAgICAgICAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHYudGhlbih2ID0+IHRoaXMuc2V0KHYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB0aGlzLnZhcmlhYmxlLmVtaXQoXCJlcnJvclwiLCBlcnIpKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KHYpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBvbGxFeGVjKSB7XG4gICAgICAgICAgICB0aGlzLl9wb2xsID0gaW50ZXJ2YWwodGhpcy5wb2xsSW50ZXJ2YWwsICgpID0+IHtcbiAgICAgICAgICAgICAgICBleGVjQXN5bmModGhpcy5wb2xsRXhlYyEpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHYgPT4gdGhpcy5zZXQodGhpcy5wb2xsVHJhbnNmb3JtISh2LCB0aGlzLmdldCgpKSkpXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gdGhpcy52YXJpYWJsZS5lbWl0KFwiZXJyb3JcIiwgZXJyKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGFydFdhdGNoKCkge1xuICAgICAgICBpZiAodGhpcy5fd2F0Y2gpXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICB0aGlzLl93YXRjaCA9IHN1YnByb2Nlc3Moe1xuICAgICAgICAgICAgY21kOiB0aGlzLndhdGNoRXhlYyEsXG4gICAgICAgICAgICBvdXQ6IG91dCA9PiB0aGlzLnNldCh0aGlzLndhdGNoVHJhbnNmb3JtIShvdXQsIHRoaXMuZ2V0KCkpKSxcbiAgICAgICAgICAgIGVycjogZXJyID0+IHRoaXMudmFyaWFibGUuZW1pdChcImVycm9yXCIsIGVyciksXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RvcFBvbGwoKSB7XG4gICAgICAgIHRoaXMuX3BvbGw/LmNhbmNlbCgpXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wb2xsXG4gICAgfVxuXG4gICAgc3RvcFdhdGNoKCkge1xuICAgICAgICB0aGlzLl93YXRjaD8ua2lsbCgpXG4gICAgICAgIGRlbGV0ZSB0aGlzLl93YXRjaFxuICAgIH1cblxuICAgIGlzUG9sbGluZygpIHsgcmV0dXJuICEhdGhpcy5fcG9sbCB9XG4gICAgaXNXYXRjaGluZygpIHsgcmV0dXJuICEhdGhpcy5fd2F0Y2ggfVxuXG4gICAgZHJvcCgpIHtcbiAgICAgICAgdGhpcy52YXJpYWJsZS5lbWl0KFwiZHJvcHBlZFwiKVxuICAgIH1cblxuICAgIG9uRHJvcHBlZChjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLnZhcmlhYmxlLmNvbm5lY3QoXCJkcm9wcGVkXCIsIGNhbGxiYWNrKVxuICAgICAgICByZXR1cm4gdGhpcyBhcyB1bmtub3duIGFzIFZhcmlhYmxlPFQ+XG4gICAgfVxuXG4gICAgb25FcnJvcihjYWxsYmFjazogKGVycjogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmVyckhhbmRsZXJcbiAgICAgICAgdGhpcy52YXJpYWJsZS5jb25uZWN0KFwiZXJyb3JcIiwgKF8sIGVycikgPT4gY2FsbGJhY2soZXJyKSlcbiAgICAgICAgcmV0dXJuIHRoaXMgYXMgdW5rbm93biBhcyBWYXJpYWJsZTxUPlxuICAgIH1cblxuICAgIHN1YnNjcmliZShjYWxsYmFjazogKHZhbHVlOiBUKSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy52YXJpYWJsZS5jb25uZWN0KFwiY2hhbmdlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayh0aGlzLmdldCgpKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy52YXJpYWJsZS5kaXNjb25uZWN0KGlkKVxuICAgIH1cblxuICAgIHBvbGwoXG4gICAgICAgIGludGVydmFsOiBudW1iZXIsXG4gICAgICAgIGV4ZWM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgICAgICB0cmFuc2Zvcm0/OiAoc3Rkb3V0OiBzdHJpbmcsIHByZXY6IFQpID0+IFRcbiAgICApOiBWYXJpYWJsZTxUPlxuXG4gICAgcG9sbChcbiAgICAgICAgaW50ZXJ2YWw6IG51bWJlcixcbiAgICAgICAgY2FsbGJhY2s6IChwcmV2OiBUKSA9PiBUIHwgUHJvbWlzZTxUPlxuICAgICk6IFZhcmlhYmxlPFQ+XG5cbiAgICBwb2xsKFxuICAgICAgICBpbnRlcnZhbDogbnVtYmVyLFxuICAgICAgICBleGVjOiBzdHJpbmcgfCBzdHJpbmdbXSB8ICgocHJldjogVCkgPT4gVCB8IFByb21pc2U8VD4pLFxuICAgICAgICB0cmFuc2Zvcm06IChzdGRvdXQ6IHN0cmluZywgcHJldjogVCkgPT4gVCA9IG91dCA9PiBvdXQgYXMgVCxcbiAgICApIHtcbiAgICAgICAgdGhpcy5zdG9wUG9sbCgpXG4gICAgICAgIHRoaXMucG9sbEludGVydmFsID0gaW50ZXJ2YWxcbiAgICAgICAgdGhpcy5wb2xsVHJhbnNmb3JtID0gdHJhbnNmb3JtXG4gICAgICAgIGlmICh0eXBlb2YgZXhlYyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLnBvbGxGbiA9IGV4ZWNcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBvbGxFeGVjXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBvbGxFeGVjID0gZXhlY1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMucG9sbEZuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFydFBvbGwoKVxuICAgICAgICByZXR1cm4gdGhpcyBhcyB1bmtub3duIGFzIFZhcmlhYmxlPFQ+XG4gICAgfVxuXG4gICAgd2F0Y2goXG4gICAgICAgIGV4ZWM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgICAgICB0cmFuc2Zvcm06IChzdGRvdXQ6IHN0cmluZywgcHJldjogVCkgPT4gVCA9IG91dCA9PiBvdXQgYXMgVCxcbiAgICApIHtcbiAgICAgICAgdGhpcy5zdG9wV2F0Y2goKVxuICAgICAgICB0aGlzLndhdGNoRXhlYyA9IGV4ZWNcbiAgICAgICAgdGhpcy53YXRjaFRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuICAgICAgICB0aGlzLnN0YXJ0V2F0Y2goKVxuICAgICAgICByZXR1cm4gdGhpcyBhcyB1bmtub3duIGFzIFZhcmlhYmxlPFQ+XG4gICAgfVxuXG4gICAgb2JzZXJ2ZShcbiAgICAgICAgb2JqczogQXJyYXk8W29iajogQ29ubmVjdGFibGUsIHNpZ25hbDogc3RyaW5nXT4sXG4gICAgICAgIGNhbGxiYWNrOiAoLi4uYXJnczogYW55W10pID0+IFQsXG4gICAgKTogVmFyaWFibGU8VD5cblxuICAgIG9ic2VydmUoXG4gICAgICAgIG9iajogQ29ubmVjdGFibGUsXG4gICAgICAgIHNpZ25hbDogc3RyaW5nLFxuICAgICAgICBjYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiBULFxuICAgICk6IFZhcmlhYmxlPFQ+XG5cbiAgICBvYnNlcnZlKFxuICAgICAgICBvYmpzOiBDb25uZWN0YWJsZSB8IEFycmF5PFtvYmo6IENvbm5lY3RhYmxlLCBzaWduYWw6IHN0cmluZ10+LFxuICAgICAgICBzaWdPckZuOiBzdHJpbmcgfCAoKG9iajogQ29ubmVjdGFibGUsIC4uLmFyZ3M6IGFueVtdKSA9PiBUKSxcbiAgICAgICAgY2FsbGJhY2s/OiAob2JqOiBDb25uZWN0YWJsZSwgLi4uYXJnczogYW55W10pID0+IFQsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGYgPSB0eXBlb2Ygc2lnT3JGbiA9PT0gXCJmdW5jdGlvblwiID8gc2lnT3JGbiA6IGNhbGxiYWNrID8/ICgoKSA9PiB0aGlzLmdldCgpKVxuICAgICAgICBjb25zdCBzZXQgPSAob2JqOiBDb25uZWN0YWJsZSwgLi4uYXJnczogYW55W10pID0+IHRoaXMuc2V0KGYob2JqLCAuLi5hcmdzKSlcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpzKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2Ygb2Jqcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtvLCBzXSA9IG9ialxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gby5jb25uZWN0KHMsIHNldClcbiAgICAgICAgICAgICAgICB0aGlzLm9uRHJvcHBlZCgoKSA9PiBvLmRpc2Nvbm5lY3QoaWQpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzaWdPckZuID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBvYmpzLmNvbm5lY3Qoc2lnT3JGbiwgc2V0KVxuICAgICAgICAgICAgICAgIHRoaXMub25Ecm9wcGVkKCgpID0+IG9ianMuZGlzY29ubmVjdChpZCkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcyBhcyB1bmtub3duIGFzIFZhcmlhYmxlPFQ+XG4gICAgfVxuXG4gICAgc3RhdGljIGRlcml2ZTxcbiAgICAgICAgY29uc3QgRGVwcyBleHRlbmRzIEFycmF5PFN1YnNjcmliYWJsZTxhbnk+PixcbiAgICAgICAgQXJncyBleHRlbmRzIHtcbiAgICAgICAgICAgIFtLIGluIGtleW9mIERlcHNdOiBEZXBzW0tdIGV4dGVuZHMgU3Vic2NyaWJhYmxlPGluZmVyIFQ+ID8gVCA6IG5ldmVyXG4gICAgICAgIH0sXG4gICAgICAgIFYgPSBBcmdzLFxuICAgID4oZGVwczogRGVwcywgZm46ICguLi5hcmdzOiBBcmdzKSA9PiBWID0gKC4uLmFyZ3MpID0+IGFyZ3MgYXMgdW5rbm93biBhcyBWKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZSA9ICgpID0+IGZuKC4uLmRlcHMubWFwKGQgPT4gZC5nZXQoKSkgYXMgQXJncylcbiAgICAgICAgY29uc3QgZGVyaXZlZCA9IG5ldyBWYXJpYWJsZSh1cGRhdGUoKSlcbiAgICAgICAgY29uc3QgdW5zdWJzID0gZGVwcy5tYXAoZGVwID0+IGRlcC5zdWJzY3JpYmUoKCkgPT4gZGVyaXZlZC5zZXQodXBkYXRlKCkpKSlcbiAgICAgICAgZGVyaXZlZC5vbkRyb3BwZWQoKCkgPT4gdW5zdWJzLm1hcCh1bnN1YiA9PiB1bnN1YigpKSlcbiAgICAgICAgcmV0dXJuIGRlcml2ZWRcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFyaWFibGU8VD4gZXh0ZW5kcyBPbWl0PFZhcmlhYmxlV3JhcHBlcjxUPiwgXCJiaW5kXCI+IHtcbiAgICA8Uj4odHJhbnNmb3JtOiAodmFsdWU6IFQpID0+IFIpOiBCaW5kaW5nPFI+XG4gICAgKCk6IEJpbmRpbmc8VD5cbn1cblxuZXhwb3J0IGNvbnN0IFZhcmlhYmxlID0gbmV3IFByb3h5KFZhcmlhYmxlV3JhcHBlciBhcyBhbnksIHtcbiAgICBhcHBseTogKF90LCBfYSwgYXJncykgPT4gbmV3IFZhcmlhYmxlV3JhcHBlcihhcmdzWzBdKSxcbn0pIGFzIHtcbiAgICBkZXJpdmU6IHR5cGVvZiBWYXJpYWJsZVdyYXBwZXJbXCJkZXJpdmVcIl1cbiAgICA8VD4oaW5pdDogVCk6IFZhcmlhYmxlPFQ+XG4gICAgbmV3PFQ+KGluaXQ6IFQpOiBWYXJpYWJsZTxUPlxufVxuXG5leHBvcnQgY29uc3QgeyBkZXJpdmUgfSA9IFZhcmlhYmxlXG5leHBvcnQgZGVmYXVsdCBWYXJpYWJsZVxuIiwgImV4cG9ydCBjb25zdCBzbmFrZWlmeSA9IChzdHI6IHN0cmluZykgPT4gc3RyXG4gICAgLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csIFwiJDFfJDJcIilcbiAgICAucmVwbGFjZUFsbChcIi1cIiwgXCJfXCIpXG4gICAgLnRvTG93ZXJDYXNlKClcblxuZXhwb3J0IGNvbnN0IGtlYmFiaWZ5ID0gKHN0cjogc3RyaW5nKSA9PiBzdHJcbiAgICAucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMS0kMlwiKVxuICAgIC5yZXBsYWNlQWxsKFwiX1wiLCBcIi1cIilcbiAgICAudG9Mb3dlckNhc2UoKVxuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnNjcmliYWJsZTxUID0gdW5rbm93bj4ge1xuICAgIHN1YnNjcmliZShjYWxsYmFjazogKHZhbHVlOiBUKSA9PiB2b2lkKTogKCkgPT4gdm9pZFxuICAgIGdldCgpOiBUXG4gICAgW2tleTogc3RyaW5nXTogYW55XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29ubmVjdGFibGUge1xuICAgIGNvbm5lY3Qoc2lnbmFsOiBzdHJpbmcsIGNhbGxiYWNrOiAoLi4uYXJnczogYW55W10pID0+IHVua25vd24pOiBudW1iZXJcbiAgICBkaXNjb25uZWN0KGlkOiBudW1iZXIpOiB2b2lkXG4gICAgW2tleTogc3RyaW5nXTogYW55XG59XG5cbmV4cG9ydCBjbGFzcyBCaW5kaW5nPFZhbHVlPiB7XG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1GbiA9ICh2OiBhbnkpID0+IHZcblxuICAgICNlbWl0dGVyOiBTdWJzY3JpYmFibGU8VmFsdWU+IHwgQ29ubmVjdGFibGVcbiAgICAjcHJvcD86IHN0cmluZ1xuXG4gICAgc3RhdGljIGJpbmQ8XG4gICAgICAgIFQgZXh0ZW5kcyBDb25uZWN0YWJsZSxcbiAgICAgICAgUCBleHRlbmRzIGtleW9mIFQsXG4gICAgPihvYmplY3Q6IFQsIHByb3BlcnR5OiBQKTogQmluZGluZzxUW1BdPlxuXG4gICAgc3RhdGljIGJpbmQ8VD4ob2JqZWN0OiBTdWJzY3JpYmFibGU8VD4pOiBCaW5kaW5nPFQ+XG5cbiAgICBzdGF0aWMgYmluZChlbWl0dGVyOiBDb25uZWN0YWJsZSB8IFN1YnNjcmliYWJsZSwgcHJvcD86IHN0cmluZykge1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmcoZW1pdHRlciwgcHJvcClcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKGVtaXR0ZXI6IENvbm5lY3RhYmxlIHwgU3Vic2NyaWJhYmxlPFZhbHVlPiwgcHJvcD86IHN0cmluZykge1xuICAgICAgICB0aGlzLiNlbWl0dGVyID0gZW1pdHRlclxuICAgICAgICB0aGlzLiNwcm9wID0gcHJvcCAmJiBrZWJhYmlmeShwcm9wKVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYEJpbmRpbmc8JHt0aGlzLiNlbWl0dGVyfSR7dGhpcy4jcHJvcCA/IGAsIFwiJHt0aGlzLiNwcm9wfVwiYCA6IFwiXCJ9PmBcbiAgICB9XG5cbiAgICBhczxUPihmbjogKHY6IFZhbHVlKSA9PiBUKTogQmluZGluZzxUPiB7XG4gICAgICAgIGNvbnN0IGJpbmQgPSBuZXcgQmluZGluZyh0aGlzLiNlbWl0dGVyLCB0aGlzLiNwcm9wKVxuICAgICAgICBiaW5kLnRyYW5zZm9ybUZuID0gKHY6IFZhbHVlKSA9PiBmbih0aGlzLnRyYW5zZm9ybUZuKHYpKVxuICAgICAgICByZXR1cm4gYmluZCBhcyB1bmtub3duIGFzIEJpbmRpbmc8VD5cbiAgICB9XG5cbiAgICBnZXQoKTogVmFsdWUge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuI2VtaXR0ZXIuZ2V0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1Gbih0aGlzLiNlbWl0dGVyLmdldCgpKVxuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy4jcHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgZ2V0dGVyID0gYGdldF8ke3NuYWtlaWZ5KHRoaXMuI3Byb3ApfWBcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy4jZW1pdHRlcltnZXR0ZXJdID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtRm4odGhpcy4jZW1pdHRlcltnZXR0ZXJdKCkpXG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybUZuKHRoaXMuI2VtaXR0ZXJbdGhpcy4jcHJvcF0pXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBFcnJvcihcImNhbiBub3QgZ2V0IHZhbHVlIG9mIGJpbmRpbmdcIilcbiAgICB9XG5cbiAgICBzdWJzY3JpYmUoY2FsbGJhY2s6ICh2YWx1ZTogVmFsdWUpID0+IHZvaWQpOiAoKSA9PiB2b2lkIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLiNlbWl0dGVyLnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jZW1pdHRlci5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuZ2V0KCkpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLiNlbWl0dGVyLmNvbm5lY3QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc3Qgc2lnbmFsID0gYG5vdGlmeTo6JHt0aGlzLiNwcm9wfWBcbiAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy4jZW1pdHRlci5jb25uZWN0KHNpZ25hbCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuZ2V0KCkpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICAodGhpcy4jZW1pdHRlci5kaXNjb25uZWN0IGFzIENvbm5lY3RhYmxlW1wiZGlzY29ubmVjdFwiXSkoaWQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgRXJyb3IoYCR7dGhpcy4jZW1pdHRlcn0gaXMgbm90IGJpbmRhYmxlYClcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCB7IGJpbmQgfSA9IEJpbmRpbmdcbmV4cG9ydCBkZWZhdWx0IEJpbmRpbmdcbiIsICJpbXBvcnQgQXN0YWwgZnJvbSBcImdpOi8vQXN0YWxJT1wiXG5cbmV4cG9ydCB0eXBlIFRpbWUgPSBBc3RhbC5UaW1lXG5leHBvcnQgY29uc3QgVGltZSA9IEFzdGFsLlRpbWVcblxuZXhwb3J0IGZ1bmN0aW9uIGludGVydmFsKGludGVydmFsOiBudW1iZXIsIGNhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBBc3RhbC5UaW1lLmludGVydmFsKGludGVydmFsLCAoKSA9PiB2b2lkIGNhbGxiYWNrPy4oKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXQodGltZW91dDogbnVtYmVyLCBjYWxsYmFjaz86ICgpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gQXN0YWwuVGltZS50aW1lb3V0KHRpbWVvdXQsICgpID0+IHZvaWQgY2FsbGJhY2s/LigpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaWRsZShjYWxsYmFjaz86ICgpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gQXN0YWwuVGltZS5pZGxlKCgpID0+IHZvaWQgY2FsbGJhY2s/LigpKVxufVxuIiwgImltcG9ydCBBc3RhbCBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCJcblxudHlwZSBBcmdzID0ge1xuICAgIGNtZDogc3RyaW5nIHwgc3RyaW5nW11cbiAgICBvdXQ/OiAoc3Rkb3V0OiBzdHJpbmcpID0+IHZvaWRcbiAgICBlcnI/OiAoc3RkZXJyOiBzdHJpbmcpID0+IHZvaWRcbn1cblxuZXhwb3J0IHR5cGUgUHJvY2VzcyA9IEFzdGFsLlByb2Nlc3NcbmV4cG9ydCBjb25zdCBQcm9jZXNzID0gQXN0YWwuUHJvY2Vzc1xuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvY2VzcyhhcmdzOiBBcmdzKTogQXN0YWwuUHJvY2Vzc1xuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvY2VzcyhcbiAgICBjbWQ6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIG9uT3V0PzogKHN0ZG91dDogc3RyaW5nKSA9PiB2b2lkLFxuICAgIG9uRXJyPzogKHN0ZGVycjogc3RyaW5nKSA9PiB2b2lkLFxuKTogQXN0YWwuUHJvY2Vzc1xuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvY2VzcyhcbiAgICBhcmdzT3JDbWQ6IEFyZ3MgfCBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBvbk91dDogKHN0ZG91dDogc3RyaW5nKSA9PiB2b2lkID0gcHJpbnQsXG4gICAgb25FcnI6IChzdGRlcnI6IHN0cmluZykgPT4gdm9pZCA9IHByaW50ZXJyLFxuKSB7XG4gICAgY29uc3QgYXJncyA9IEFycmF5LmlzQXJyYXkoYXJnc09yQ21kKSB8fCB0eXBlb2YgYXJnc09yQ21kID09PSBcInN0cmluZ1wiXG4gICAgY29uc3QgeyBjbWQsIGVyciwgb3V0IH0gPSB7XG4gICAgICAgIGNtZDogYXJncyA/IGFyZ3NPckNtZCA6IGFyZ3NPckNtZC5jbWQsXG4gICAgICAgIGVycjogYXJncyA/IG9uRXJyIDogYXJnc09yQ21kLmVyciB8fCBvbkVycixcbiAgICAgICAgb3V0OiBhcmdzID8gb25PdXQgOiBhcmdzT3JDbWQub3V0IHx8IG9uT3V0LFxuICAgIH1cblxuICAgIGNvbnN0IHByb2MgPSBBcnJheS5pc0FycmF5KGNtZClcbiAgICAgICAgPyBBc3RhbC5Qcm9jZXNzLnN1YnByb2Nlc3N2KGNtZClcbiAgICAgICAgOiBBc3RhbC5Qcm9jZXNzLnN1YnByb2Nlc3MoY21kKVxuXG4gICAgcHJvYy5jb25uZWN0KFwic3Rkb3V0XCIsIChfLCBzdGRvdXQ6IHN0cmluZykgPT4gb3V0KHN0ZG91dCkpXG4gICAgcHJvYy5jb25uZWN0KFwic3RkZXJyXCIsIChfLCBzdGRlcnI6IHN0cmluZykgPT4gZXJyKHN0ZGVycikpXG4gICAgcmV0dXJuIHByb2Ncbn1cblxuLyoqIEB0aHJvd3Mge0dMaWIuRXJyb3J9IFRocm93cyBzdGRlcnIgKi9cbmV4cG9ydCBmdW5jdGlvbiBleGVjKGNtZDogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShjbWQpXG4gICAgICAgID8gQXN0YWwuUHJvY2Vzcy5leGVjdihjbWQpXG4gICAgICAgIDogQXN0YWwuUHJvY2Vzcy5leGVjKGNtZClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4ZWNBc3luYyhjbWQ6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjbWQpKSB7XG4gICAgICAgICAgICBBc3RhbC5Qcm9jZXNzLmV4ZWNfYXN5bmN2KGNtZCwgKF8sIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoQXN0YWwuUHJvY2Vzcy5leGVjX2FzeW5jdl9maW5pc2gocmVzKSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEFzdGFsLlByb2Nlc3MuZXhlY19hc3luYyhjbWQsIChfLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEFzdGFsLlByb2Nlc3MuZXhlY19maW5pc2gocmVzKSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG59XG4iLCAiaW1wb3J0IFZhcmlhYmxlIGZyb20gXCIuL3ZhcmlhYmxlLmpzXCJcbmltcG9ydCB7IGV4ZWNBc3luYyB9IGZyb20gXCIuL3Byb2Nlc3MuanNcIlxuaW1wb3J0IEJpbmRpbmcsIHsgQ29ubmVjdGFibGUsIGtlYmFiaWZ5LCBzbmFrZWlmeSwgU3Vic2NyaWJhYmxlIH0gZnJvbSBcIi4vYmluZGluZy5qc1wiXG5cbmV4cG9ydCBjb25zdCBub0ltcGxpY2l0RGVzdHJveSA9IFN5bWJvbChcIm5vIG5vIGltcGxpY2l0IGRlc3Ryb3lcIilcbmV4cG9ydCBjb25zdCBzZXRDaGlsZHJlbiA9IFN5bWJvbChcImNoaWxkcmVuIHNldHRlciBtZXRob2RcIilcblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQmluZGluZ3MoYXJyYXk6IGFueVtdKSB7XG4gICAgZnVuY3Rpb24gZ2V0VmFsdWVzKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgIGxldCBpID0gMFxuICAgICAgICByZXR1cm4gYXJyYXkubWFwKHZhbHVlID0+IHZhbHVlIGluc3RhbmNlb2YgQmluZGluZ1xuICAgICAgICAgICAgPyBhcmdzW2krK11cbiAgICAgICAgICAgIDogdmFsdWUsXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBiaW5kaW5ncyA9IGFycmF5LmZpbHRlcihpID0+IGkgaW5zdGFuY2VvZiBCaW5kaW5nKVxuXG4gICAgaWYgKGJpbmRpbmdzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIGFycmF5XG5cbiAgICBpZiAoYmluZGluZ3MubGVuZ3RoID09PSAxKVxuICAgICAgICByZXR1cm4gYmluZGluZ3NbMF0uYXMoZ2V0VmFsdWVzKVxuXG4gICAgcmV0dXJuIFZhcmlhYmxlLmRlcml2ZShiaW5kaW5ncywgZ2V0VmFsdWVzKSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQcm9wKG9iajogYW55LCBwcm9wOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzZXR0ZXIgPSBgc2V0XyR7c25ha2VpZnkocHJvcCl9YFxuICAgICAgICBpZiAodHlwZW9mIG9ialtzZXR0ZXJdID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICByZXR1cm4gb2JqW3NldHRlcl0odmFsdWUpXG5cbiAgICAgICAgcmV0dXJuIChvYmpbcHJvcF0gPSB2YWx1ZSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBjb3VsZCBub3Qgc2V0IHByb3BlcnR5IFwiJHtwcm9wfVwiIG9uICR7b2JqfTpgLCBlcnJvcilcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIEJpbmRhYmxlUHJvcHM8VD4gPSB7XG4gICAgW0sgaW4ga2V5b2YgVF06IEJpbmRpbmc8VFtLXT4gfCBUW0tdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaG9vazxXaWRnZXQgZXh0ZW5kcyBDb25uZWN0YWJsZT4oXG4gICAgd2lkZ2V0OiBXaWRnZXQsXG4gICAgb2JqZWN0OiBDb25uZWN0YWJsZSB8IFN1YnNjcmliYWJsZSxcbiAgICBzaWduYWxPckNhbGxiYWNrOiBzdHJpbmcgfCAoKHNlbGY6IFdpZGdldCwgLi4uYXJnczogYW55W10pID0+IHZvaWQpLFxuICAgIGNhbGxiYWNrPzogKHNlbGY6IFdpZGdldCwgLi4uYXJnczogYW55W10pID0+IHZvaWQsXG4pIHtcbiAgICBpZiAodHlwZW9mIG9iamVjdC5jb25uZWN0ID09PSBcImZ1bmN0aW9uXCIgJiYgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgaWQgPSBvYmplY3QuY29ubmVjdChzaWduYWxPckNhbGxiYWNrLCAoXzogYW55LCAuLi5hcmdzOiB1bmtub3duW10pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh3aWRnZXQsIC4uLmFyZ3MpXG4gICAgICAgIH0pXG4gICAgICAgIHdpZGdldC5jb25uZWN0KFwiZGVzdHJveVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAob2JqZWN0LmRpc2Nvbm5lY3QgYXMgQ29ubmVjdGFibGVbXCJkaXNjb25uZWN0XCJdKShpZClcbiAgICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmplY3Quc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHNpZ25hbE9yQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zdCB1bnN1YiA9IG9iamVjdC5zdWJzY3JpYmUoKC4uLmFyZ3M6IHVua25vd25bXSkgPT4ge1xuICAgICAgICAgICAgc2lnbmFsT3JDYWxsYmFjayh3aWRnZXQsIC4uLmFyZ3MpXG4gICAgICAgIH0pXG4gICAgICAgIHdpZGdldC5jb25uZWN0KFwiZGVzdHJveVwiLCB1bnN1YilcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3Q8V2lkZ2V0IGV4dGVuZHMgQ29ubmVjdGFibGUgJiB7IFtzZXRDaGlsZHJlbl06IChjaGlsZHJlbjogYW55W10pID0+IHZvaWQgfT4od2lkZ2V0OiBXaWRnZXQsIGNvbmZpZzogYW55KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgIGxldCB7IHNldHVwLCBjaGlsZCwgY2hpbGRyZW4gPSBbXSwgLi4ucHJvcHMgfSA9IGNvbmZpZ1xuXG4gICAgaWYgKGNoaWxkcmVuIGluc3RhbmNlb2YgQmluZGluZykge1xuICAgICAgICBjaGlsZHJlbiA9IFtjaGlsZHJlbl1cbiAgICB9XG5cbiAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgY2hpbGRyZW4udW5zaGlmdChjaGlsZClcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgdW5kZWZpbmVkIHZhbHVlc1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzKSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVsZXRlIHByb3BzW2tleV1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbGxlY3QgYmluZGluZ3NcbiAgICBjb25zdCBiaW5kaW5nczogQXJyYXk8W3N0cmluZywgQmluZGluZzxhbnk+XT4gPSBPYmplY3RcbiAgICAgICAgLmtleXMocHJvcHMpXG4gICAgICAgIC5yZWR1Y2UoKGFjYzogYW55LCBwcm9wKSA9PiB7XG4gICAgICAgICAgICBpZiAocHJvcHNbcHJvcF0gaW5zdGFuY2VvZiBCaW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmluZGluZyA9IHByb3BzW3Byb3BdXG4gICAgICAgICAgICAgICAgZGVsZXRlIHByb3BzW3Byb3BdXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsuLi5hY2MsIFtwcm9wLCBiaW5kaW5nXV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgfSwgW10pXG5cbiAgICAvLyBjb2xsZWN0IHNpZ25hbCBoYW5kbGVyc1xuICAgIGNvbnN0IG9uSGFuZGxlcnM6IEFycmF5PFtzdHJpbmcsIHN0cmluZyB8ICgoKSA9PiB1bmtub3duKV0+ID0gT2JqZWN0XG4gICAgICAgIC5rZXlzKHByb3BzKVxuICAgICAgICAucmVkdWNlKChhY2M6IGFueSwga2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvblwiKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpZyA9IGtlYmFiaWZ5KGtleSkuc3BsaXQoXCItXCIpLnNsaWNlKDEpLmpvaW4oXCItXCIpXG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IHByb3BzW2tleV1cbiAgICAgICAgICAgICAgICBkZWxldGUgcHJvcHNba2V5XVxuICAgICAgICAgICAgICAgIHJldHVybiBbLi4uYWNjLCBbc2lnLCBoYW5kbGVyXV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgfSwgW10pXG5cbiAgICAvLyBzZXQgY2hpbGRyZW5cbiAgICBjb25zdCBtZXJnZWRDaGlsZHJlbiA9IG1lcmdlQmluZGluZ3MoY2hpbGRyZW4uZmxhdChJbmZpbml0eSkpXG4gICAgaWYgKG1lcmdlZENoaWxkcmVuIGluc3RhbmNlb2YgQmluZGluZykge1xuICAgICAgICB3aWRnZXRbc2V0Q2hpbGRyZW5dKG1lcmdlZENoaWxkcmVuLmdldCgpKVxuICAgICAgICB3aWRnZXQuY29ubmVjdChcImRlc3Ryb3lcIiwgbWVyZ2VkQ2hpbGRyZW4uc3Vic2NyaWJlKCh2KSA9PiB7XG4gICAgICAgICAgICB3aWRnZXRbc2V0Q2hpbGRyZW5dKHYpXG4gICAgICAgIH0pKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtZXJnZWRDaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3aWRnZXRbc2V0Q2hpbGRyZW5dKG1lcmdlZENoaWxkcmVuKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0dXAgc2lnbmFsIGhhbmRsZXJzXG4gICAgZm9yIChjb25zdCBbc2lnbmFsLCBjYWxsYmFja10gb2Ygb25IYW5kbGVycykge1xuICAgICAgICBjb25zdCBzaWcgPSBzaWduYWwuc3RhcnRzV2l0aChcIm5vdGlmeVwiKVxuICAgICAgICAgICAgPyBzaWduYWwucmVwbGFjZShcIi1cIiwgXCI6OlwiKVxuICAgICAgICAgICAgOiBzaWduYWxcblxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHdpZGdldC5jb25uZWN0KHNpZywgY2FsbGJhY2spXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aWRnZXQuY29ubmVjdChzaWcsICgpID0+IGV4ZWNBc3luYyhjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAudGhlbihwcmludCkuY2F0Y2goY29uc29sZS5lcnJvcikpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzZXR1cCBiaW5kaW5ncyBoYW5kbGVyc1xuICAgIGZvciAoY29uc3QgW3Byb3AsIGJpbmRpbmddIG9mIGJpbmRpbmdzKSB7XG4gICAgICAgIGlmIChwcm9wID09PSBcImNoaWxkXCIgfHwgcHJvcCA9PT0gXCJjaGlsZHJlblwiKSB7XG4gICAgICAgICAgICB3aWRnZXQuY29ubmVjdChcImRlc3Ryb3lcIiwgYmluZGluZy5zdWJzY3JpYmUoKHY6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHdpZGdldFtzZXRDaGlsZHJlbl0odilcbiAgICAgICAgICAgIH0pKVxuICAgICAgICB9XG4gICAgICAgIHdpZGdldC5jb25uZWN0KFwiZGVzdHJveVwiLCBiaW5kaW5nLnN1YnNjcmliZSgodjogYW55KSA9PiB7XG4gICAgICAgICAgICBzZXRQcm9wKHdpZGdldCwgcHJvcCwgdilcbiAgICAgICAgfSkpXG4gICAgICAgIHNldFByb3Aod2lkZ2V0LCBwcm9wLCBiaW5kaW5nLmdldCgpKVxuICAgIH1cblxuICAgIC8vIGZpbHRlciB1bmRlZmluZWQgdmFsdWVzXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWxldGUgcHJvcHNba2V5XVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbih3aWRnZXQsIHByb3BzKVxuICAgIHNldHVwPy4od2lkZ2V0KVxuICAgIHJldHVybiB3aWRnZXRcbn1cblxuZnVuY3Rpb24gaXNBcnJvd0Z1bmN0aW9uKGZ1bmM6IGFueSk6IGZ1bmMgaXMgKGFyZ3M6IGFueSkgPT4gYW55IHtcbiAgICByZXR1cm4gIU9iamVjdC5oYXNPd24oZnVuYywgXCJwcm90b3R5cGVcIilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpzeChcbiAgICBjdG9yczogUmVjb3JkPHN0cmluZywgeyBuZXcocHJvcHM6IGFueSk6IGFueSB9IHwgKChwcm9wczogYW55KSA9PiBhbnkpPixcbiAgICBjdG9yOiBzdHJpbmcgfCAoKHByb3BzOiBhbnkpID0+IGFueSkgfCB7IG5ldyhwcm9wczogYW55KTogYW55IH0sXG4gICAgeyBjaGlsZHJlbiwgLi4ucHJvcHMgfTogYW55LFxuKSB7XG4gICAgY2hpbGRyZW4gPz89IFtdXG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKVxuICAgICAgICBjaGlsZHJlbiA9IFtjaGlsZHJlbl1cblxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKEJvb2xlYW4pXG5cbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICBwcm9wcy5jaGlsZCA9IGNoaWxkcmVuWzBdXG4gICAgZWxzZSBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSlcbiAgICAgICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlblxuXG4gICAgaWYgKHR5cGVvZiBjdG9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChpc0Fycm93RnVuY3Rpb24oY3RvcnNbY3Rvcl0pKVxuICAgICAgICAgICAgcmV0dXJuIGN0b3JzW2N0b3JdKHByb3BzKVxuXG4gICAgICAgIHJldHVybiBuZXcgY3RvcnNbY3Rvcl0ocHJvcHMpXG4gICAgfVxuXG4gICAgaWYgKGlzQXJyb3dGdW5jdGlvbihjdG9yKSlcbiAgICAgICAgcmV0dXJuIGN0b3IocHJvcHMpXG5cbiAgICByZXR1cm4gbmV3IGN0b3IocHJvcHMpXG59XG4iLCAiaW1wb3J0IHsgaG9vaywgbm9JbXBsaWNpdERlc3Ryb3ksIHNldENoaWxkcmVuLCBtZXJnZUJpbmRpbmdzLCB0eXBlIEJpbmRhYmxlUHJvcHMsIGNvbnN0cnVjdCB9IGZyb20gXCIuLi9fYXN0YWwuanNcIlxuaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249My4wXCJcbmltcG9ydCBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249My4wXCJcbmltcG9ydCBHZGsgZnJvbSBcImdpOi8vR2RrP3ZlcnNpb249My4wXCJcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IEJpbmRpbmcsIHsgdHlwZSBDb25uZWN0YWJsZSwgdHlwZSBTdWJzY3JpYmFibGUgfSBmcm9tIFwiLi4vYmluZGluZy5qc1wiXG5cbmV4cG9ydCB7IEJpbmRhYmxlUHJvcHMsIG1lcmdlQmluZGluZ3MgfVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhc3RhbGlmeTxcbiAgICBDIGV4dGVuZHMgeyBuZXcoLi4uYXJnczogYW55W10pOiBHdGsuV2lkZ2V0IH0sXG4+KGNsczogQywgY2xzTmFtZSA9IGNscy5uYW1lKSB7XG4gICAgY2xhc3MgV2lkZ2V0IGV4dGVuZHMgY2xzIHtcbiAgICAgICAgZ2V0IGNzcygpOiBzdHJpbmcgeyByZXR1cm4gQXN0YWwud2lkZ2V0X2dldF9jc3ModGhpcykgfVxuICAgICAgICBzZXQgY3NzKGNzczogc3RyaW5nKSB7IEFzdGFsLndpZGdldF9zZXRfY3NzKHRoaXMsIGNzcykgfVxuICAgICAgICBnZXRfY3NzKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLmNzcyB9XG4gICAgICAgIHNldF9jc3MoY3NzOiBzdHJpbmcpIHsgdGhpcy5jc3MgPSBjc3MgfVxuXG4gICAgICAgIGdldCBjbGFzc05hbWUoKTogc3RyaW5nIHsgcmV0dXJuIEFzdGFsLndpZGdldF9nZXRfY2xhc3NfbmFtZXModGhpcykuam9pbihcIiBcIikgfVxuICAgICAgICBzZXQgY2xhc3NOYW1lKGNsYXNzTmFtZTogc3RyaW5nKSB7IEFzdGFsLndpZGdldF9zZXRfY2xhc3NfbmFtZXModGhpcywgY2xhc3NOYW1lLnNwbGl0KC9cXHMrLykpIH1cbiAgICAgICAgZ2V0X2NsYXNzX25hbWUoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuY2xhc3NOYW1lIH1cbiAgICAgICAgc2V0X2NsYXNzX25hbWUoY2xhc3NOYW1lOiBzdHJpbmcpIHsgdGhpcy5jbGFzc05hbWUgPSBjbGFzc05hbWUgfVxuXG4gICAgICAgIGdldCBjdXJzb3IoKTogQ3Vyc29yIHsgcmV0dXJuIEFzdGFsLndpZGdldF9nZXRfY3Vyc29yKHRoaXMpIGFzIEN1cnNvciB9XG4gICAgICAgIHNldCBjdXJzb3IoY3Vyc29yOiBDdXJzb3IpIHsgQXN0YWwud2lkZ2V0X3NldF9jdXJzb3IodGhpcywgY3Vyc29yKSB9XG4gICAgICAgIGdldF9jdXJzb3IoKTogQ3Vyc29yIHsgcmV0dXJuIHRoaXMuY3Vyc29yIH1cbiAgICAgICAgc2V0X2N1cnNvcihjdXJzb3I6IEN1cnNvcikgeyB0aGlzLmN1cnNvciA9IGN1cnNvciB9XG5cbiAgICAgICAgZ2V0IGNsaWNrVGhyb3VnaCgpOiBib29sZWFuIHsgcmV0dXJuIEFzdGFsLndpZGdldF9nZXRfY2xpY2tfdGhyb3VnaCh0aGlzKSB9XG4gICAgICAgIHNldCBjbGlja1Rocm91Z2goY2xpY2tUaHJvdWdoOiBib29sZWFuKSB7IEFzdGFsLndpZGdldF9zZXRfY2xpY2tfdGhyb3VnaCh0aGlzLCBjbGlja1Rocm91Z2gpIH1cbiAgICAgICAgZ2V0X2NsaWNrX3Rocm91Z2goKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLmNsaWNrVGhyb3VnaCB9XG4gICAgICAgIHNldF9jbGlja190aHJvdWdoKGNsaWNrVGhyb3VnaDogYm9vbGVhbikgeyB0aGlzLmNsaWNrVGhyb3VnaCA9IGNsaWNrVGhyb3VnaCB9XG5cbiAgICAgICAgZGVjbGFyZSBwcml2YXRlIFtub0ltcGxpY2l0RGVzdHJveV06IGJvb2xlYW5cbiAgICAgICAgZ2V0IG5vSW1wbGljaXREZXN0cm95KCk6IGJvb2xlYW4geyByZXR1cm4gdGhpc1tub0ltcGxpY2l0RGVzdHJveV0gfVxuICAgICAgICBzZXQgbm9JbXBsaWNpdERlc3Ryb3kodmFsdWU6IGJvb2xlYW4pIHsgdGhpc1tub0ltcGxpY2l0RGVzdHJveV0gPSB2YWx1ZSB9XG5cbiAgICAgICAgc2V0IGFjdGlvbkdyb3VwKFtwcmVmaXgsIGdyb3VwXTogQWN0aW9uR3JvdXApIHsgdGhpcy5pbnNlcnRfYWN0aW9uX2dyb3VwKHByZWZpeCwgZ3JvdXApIH1cbiAgICAgICAgc2V0X2FjdGlvbl9ncm91cChhY3Rpb25Hcm91cDogQWN0aW9uR3JvdXApIHsgdGhpcy5hY3Rpb25Hcm91cCA9IGFjdGlvbkdyb3VwIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0Q2hpbGRyZW4oKTogQXJyYXk8R3RrLldpZGdldD4ge1xuICAgICAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBHdGsuQmluKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0X2NoaWxkKCkgPyBbdGhpcy5nZXRfY2hpbGQoKSFdIDogW11cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcyBpbnN0YW5jZW9mIEd0ay5Db250YWluZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRfY2hpbGRyZW4oKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtdXG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgc2V0Q2hpbGRyZW4oY2hpbGRyZW46IGFueVtdKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZsYXQoSW5maW5pdHkpLm1hcChjaCA9PiBjaCBpbnN0YW5jZW9mIEd0ay5XaWRnZXRcbiAgICAgICAgICAgICAgICA/IGNoXG4gICAgICAgICAgICAgICAgOiBuZXcgR3RrLkxhYmVsKHsgdmlzaWJsZTogdHJ1ZSwgbGFiZWw6IFN0cmluZyhjaCkgfSkpXG5cbiAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgR3RrLkNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2ggb2YgY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkKGNoKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgY2FuIG5vdCBhZGQgY2hpbGRyZW4gdG8gJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9YClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIFtzZXRDaGlsZHJlbl0oY2hpbGRyZW46IGFueVtdKSB7XG4gICAgICAgICAgICAvLyByZW1vdmVcbiAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgR3RrLkNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5nZXRDaGlsZHJlbigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKGNoKVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuLmluY2x1ZGVzKGNoKSAmJiAhdGhpcy5ub0ltcGxpY2l0RGVzdHJveSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoPy5kZXN0cm95KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFwcGVuZFxuICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZUNsYXNzTmFtZShjbjogc3RyaW5nLCBjb25kID0gdHJ1ZSkge1xuICAgICAgICAgICAgQXN0YWwud2lkZ2V0X3RvZ2dsZV9jbGFzc19uYW1lKHRoaXMsIGNuLCBjb25kKVxuICAgICAgICB9XG5cbiAgICAgICAgaG9vayhcbiAgICAgICAgICAgIG9iamVjdDogQ29ubmVjdGFibGUsXG4gICAgICAgICAgICBzaWduYWw6IHN0cmluZyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoc2VsZjogdGhpcywgLi4uYXJnczogYW55W10pID0+IHZvaWQsXG4gICAgICAgICk6IHRoaXNcbiAgICAgICAgaG9vayhcbiAgICAgICAgICAgIG9iamVjdDogU3Vic2NyaWJhYmxlLFxuICAgICAgICAgICAgY2FsbGJhY2s6IChzZWxmOiB0aGlzLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCxcbiAgICAgICAgKTogdGhpc1xuICAgICAgICBob29rKFxuICAgICAgICAgICAgb2JqZWN0OiBDb25uZWN0YWJsZSB8IFN1YnNjcmliYWJsZSxcbiAgICAgICAgICAgIHNpZ25hbE9yQ2FsbGJhY2s6IHN0cmluZyB8ICgoc2VsZjogdGhpcywgLi4uYXJnczogYW55W10pID0+IHZvaWQpLFxuICAgICAgICAgICAgY2FsbGJhY2s/OiAoc2VsZjogdGhpcywgLi4uYXJnczogYW55W10pID0+IHZvaWQsXG4gICAgICAgICkge1xuICAgICAgICAgICAgaG9vayh0aGlzLCBvYmplY3QsIHNpZ25hbE9yQ2FsbGJhY2ssIGNhbGxiYWNrKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKC4uLnBhcmFtczogYW55W10pIHtcbiAgICAgICAgICAgIHN1cGVyKClcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gcGFyYW1zWzBdIHx8IHt9XG4gICAgICAgICAgICBwcm9wcy52aXNpYmxlID8/PSB0cnVlXG4gICAgICAgICAgICBjb25zdHJ1Y3QodGhpcywgcHJvcHMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3Moe1xuICAgICAgICBHVHlwZU5hbWU6IGBBc3RhbF8ke2Nsc05hbWV9YCxcbiAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgXCJjbGFzcy1uYW1lXCI6IEdPYmplY3QuUGFyYW1TcGVjLnN0cmluZyhcbiAgICAgICAgICAgICAgICBcImNsYXNzLW5hbWVcIiwgXCJcIiwgXCJcIiwgR09iamVjdC5QYXJhbUZsYWdzLlJFQURXUklURSwgXCJcIixcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBcImNzc1wiOiBHT2JqZWN0LlBhcmFtU3BlYy5zdHJpbmcoXG4gICAgICAgICAgICAgICAgXCJjc3NcIiwgXCJcIiwgXCJcIiwgR09iamVjdC5QYXJhbUZsYWdzLlJFQURXUklURSwgXCJcIixcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBcImN1cnNvclwiOiBHT2JqZWN0LlBhcmFtU3BlYy5zdHJpbmcoXG4gICAgICAgICAgICAgICAgXCJjdXJzb3JcIiwgXCJcIiwgXCJcIiwgR09iamVjdC5QYXJhbUZsYWdzLlJFQURXUklURSwgXCJkZWZhdWx0XCIsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgXCJjbGljay10aHJvdWdoXCI6IEdPYmplY3QuUGFyYW1TcGVjLmJvb2xlYW4oXG4gICAgICAgICAgICAgICAgXCJjbGljay10aHJvdWdoXCIsIFwiXCIsIFwiXCIsIEdPYmplY3QuUGFyYW1GbGFncy5SRUFEV1JJVEUsIGZhbHNlLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFwibm8taW1wbGljaXQtZGVzdHJveVwiOiBHT2JqZWN0LlBhcmFtU3BlYy5ib29sZWFuKFxuICAgICAgICAgICAgICAgIFwibm8taW1wbGljaXQtZGVzdHJveVwiLCBcIlwiLCBcIlwiLCBHT2JqZWN0LlBhcmFtRmxhZ3MuUkVBRFdSSVRFLCBmYWxzZSxcbiAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgfSwgV2lkZ2V0KVxuXG4gICAgcmV0dXJuIFdpZGdldFxufVxuXG50eXBlIFNpZ0hhbmRsZXI8XG4gICAgVyBleHRlbmRzIEluc3RhbmNlVHlwZTx0eXBlb2YgR3RrLldpZGdldD4sXG4gICAgQXJncyBleHRlbmRzIEFycmF5PHVua25vd24+LFxuPiA9ICgoc2VsZjogVywgLi4uYXJnczogQXJncykgPT4gdW5rbm93bikgfCBzdHJpbmcgfCBzdHJpbmdbXVxuXG5leHBvcnQgdHlwZSBCaW5kYWJsZUNoaWxkID0gR3RrLldpZGdldCB8IEJpbmRpbmc8R3RrLldpZGdldD5cblxuZXhwb3J0IHR5cGUgQ29uc3RydWN0UHJvcHM8XG4gICAgU2VsZiBleHRlbmRzIEluc3RhbmNlVHlwZTx0eXBlb2YgR3RrLldpZGdldD4sXG4gICAgUHJvcHMgZXh0ZW5kcyBHdGsuV2lkZ2V0LkNvbnN0cnVjdG9yUHJvcHMsXG4gICAgU2lnbmFscyBleHRlbmRzIFJlY29yZDxgb24ke3N0cmluZ31gLCBBcnJheTx1bmtub3duPj4gPSBSZWNvcmQ8YG9uJHtzdHJpbmd9YCwgYW55W10+LFxuPiA9IFBhcnRpYWw8e1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgY2FuJ3QgYXNzaWduIHRvIHVua25vd24sIGJ1dCBpdCB3b3JrcyBhcyBleHBlY3RlZCB0aG91Z2hcbiAgICBbUyBpbiBrZXlvZiBTaWduYWxzXTogU2lnSGFuZGxlcjxTZWxmLCBTaWduYWxzW1NdPlxufT4gJiBQYXJ0aWFsPHtcbiAgICBbS2V5IGluIGBvbiR7c3RyaW5nfWBdOiBTaWdIYW5kbGVyPFNlbGYsIGFueVtdPlxufT4gJiBCaW5kYWJsZVByb3BzPFBhcnRpYWw8UHJvcHMgJiB7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nXG4gICAgY3NzPzogc3RyaW5nXG4gICAgY3Vyc29yPzogc3RyaW5nXG4gICAgY2xpY2tUaHJvdWdoPzogYm9vbGVhblxuICAgIGFjdGlvbkdyb3VwPzogQWN0aW9uR3JvdXBcbn0+PiAmIFBhcnRpYWw8e1xuICAgIG9uRGVzdHJveTogKHNlbGY6IFNlbGYpID0+IHVua25vd25cbiAgICBvbkRyYXc6IChzZWxmOiBTZWxmKSA9PiB1bmtub3duXG4gICAgb25LZXlQcmVzc0V2ZW50OiAoc2VsZjogU2VsZiwgZXZlbnQ6IEdkay5FdmVudCkgPT4gdW5rbm93blxuICAgIG9uS2V5UmVsZWFzZUV2ZW50OiAoc2VsZjogU2VsZiwgZXZlbnQ6IEdkay5FdmVudCkgPT4gdW5rbm93blxuICAgIG9uQnV0dG9uUHJlc3NFdmVudDogKHNlbGY6IFNlbGYsIGV2ZW50OiBHZGsuRXZlbnQpID0+IHVua25vd25cbiAgICBvbkJ1dHRvblJlbGVhc2VFdmVudDogKHNlbGY6IFNlbGYsIGV2ZW50OiBHZGsuRXZlbnQpID0+IHVua25vd25cbiAgICBvblJlYWxpemU6IChzZWxmOiBTZWxmKSA9PiB1bmtub3duXG4gICAgc2V0dXA6IChzZWxmOiBTZWxmKSA9PiB2b2lkXG59PlxuXG50eXBlIEN1cnNvciA9XG4gICAgfCBcImRlZmF1bHRcIlxuICAgIHwgXCJoZWxwXCJcbiAgICB8IFwicG9pbnRlclwiXG4gICAgfCBcImNvbnRleHQtbWVudVwiXG4gICAgfCBcInByb2dyZXNzXCJcbiAgICB8IFwid2FpdFwiXG4gICAgfCBcImNlbGxcIlxuICAgIHwgXCJjcm9zc2hhaXJcIlxuICAgIHwgXCJ0ZXh0XCJcbiAgICB8IFwidmVydGljYWwtdGV4dFwiXG4gICAgfCBcImFsaWFzXCJcbiAgICB8IFwiY29weVwiXG4gICAgfCBcIm5vLWRyb3BcIlxuICAgIHwgXCJtb3ZlXCJcbiAgICB8IFwibm90LWFsbG93ZWRcIlxuICAgIHwgXCJncmFiXCJcbiAgICB8IFwiZ3JhYmJpbmdcIlxuICAgIHwgXCJhbGwtc2Nyb2xsXCJcbiAgICB8IFwiY29sLXJlc2l6ZVwiXG4gICAgfCBcInJvdy1yZXNpemVcIlxuICAgIHwgXCJuLXJlc2l6ZVwiXG4gICAgfCBcImUtcmVzaXplXCJcbiAgICB8IFwicy1yZXNpemVcIlxuICAgIHwgXCJ3LXJlc2l6ZVwiXG4gICAgfCBcIm5lLXJlc2l6ZVwiXG4gICAgfCBcIm53LXJlc2l6ZVwiXG4gICAgfCBcInN3LXJlc2l6ZVwiXG4gICAgfCBcInNlLXJlc2l6ZVwiXG4gICAgfCBcImV3LXJlc2l6ZVwiXG4gICAgfCBcIm5zLXJlc2l6ZVwiXG4gICAgfCBcIm5lc3ctcmVzaXplXCJcbiAgICB8IFwibndzZS1yZXNpemVcIlxuICAgIHwgXCJ6b29tLWluXCJcbiAgICB8IFwiem9vbS1vdXRcIlxuXG50eXBlIEFjdGlvbkdyb3VwID0gW3ByZWZpeDogc3RyaW5nLCBhY3Rpb25Hcm91cDogR2lvLkFjdGlvbkdyb3VwXVxuIiwgImltcG9ydCBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249My4wXCJcbmltcG9ydCBBc3RhbCBmcm9tIFwiZ2k6Ly9Bc3RhbD92ZXJzaW9uPTMuMFwiXG5pbXBvcnQgeyBta0FwcCB9IGZyb20gXCIuLi9fYXBwXCJcblxuR3RrLmluaXQobnVsbClcblxuZXhwb3J0IGRlZmF1bHQgbWtBcHAoQXN0YWwuQXBwbGljYXRpb24pXG4iLCAiLyoqXG4gKiBXb3JrYXJvdW5kIGZvciBcIkNhbid0IGNvbnZlcnQgbm9uLW51bGwgcG9pbnRlciB0byBKUyB2YWx1ZSBcIlxuICovXG5cbmV4cG9ydCB7IH1cblxuY29uc3Qgc25ha2VpZnkgPSAoc3RyOiBzdHJpbmcpID0+IHN0clxuICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxXyQyXCIpXG4gICAgLnJlcGxhY2VBbGwoXCItXCIsIFwiX1wiKVxuICAgIC50b0xvd2VyQ2FzZSgpXG5cbmFzeW5jIGZ1bmN0aW9uIHN1cHByZXNzPFQ+KG1vZDogUHJvbWlzZTx7IGRlZmF1bHQ6IFQgfT4sIHBhdGNoOiAobTogVCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBtb2QudGhlbihtID0+IHBhdGNoKG0uZGVmYXVsdCkpLmNhdGNoKCgpID0+IHZvaWQgMClcbn1cblxuZnVuY3Rpb24gcGF0Y2g8UCBleHRlbmRzIG9iamVjdD4ocHJvdG86IFAsIHByb3A6IEV4dHJhY3Q8a2V5b2YgUCwgc3RyaW5nPikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgcHJvcCwge1xuICAgICAgICBnZXQoKSB7IHJldHVybiB0aGlzW2BnZXRfJHtzbmFrZWlmeShwcm9wKX1gXSgpIH0sXG4gICAgfSlcbn1cblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEFwcHNcIiksICh7IEFwcHMsIEFwcGxpY2F0aW9uIH0pID0+IHtcbiAgICBwYXRjaChBcHBzLnByb3RvdHlwZSwgXCJsaXN0XCIpXG4gICAgcGF0Y2goQXBwbGljYXRpb24ucHJvdG90eXBlLCBcImtleXdvcmRzXCIpXG4gICAgcGF0Y2goQXBwbGljYXRpb24ucHJvdG90eXBlLCBcImNhdGVnb3JpZXNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxCYXR0ZXJ5XCIpLCAoeyBVUG93ZXIgfSkgPT4ge1xuICAgIHBhdGNoKFVQb3dlci5wcm90b3R5cGUsIFwiZGV2aWNlc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEJsdWV0b290aFwiKSwgKHsgQWRhcHRlciwgQmx1ZXRvb3RoLCBEZXZpY2UgfSkgPT4ge1xuICAgIHBhdGNoKEFkYXB0ZXIucHJvdG90eXBlLCBcInV1aWRzXCIpXG4gICAgcGF0Y2goQmx1ZXRvb3RoLnByb3RvdHlwZSwgXCJhZGFwdGVyc1wiKVxuICAgIHBhdGNoKEJsdWV0b290aC5wcm90b3R5cGUsIFwiZGV2aWNlc1wiKVxuICAgIHBhdGNoKERldmljZS5wcm90b3R5cGUsIFwidXVpZHNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxIeXBybGFuZFwiKSwgKHsgSHlwcmxhbmQsIE1vbml0b3IsIFdvcmtzcGFjZSB9KSA9PiB7XG4gICAgcGF0Y2goSHlwcmxhbmQucHJvdG90eXBlLCBcImJpbmRzXCIpXG4gICAgcGF0Y2goSHlwcmxhbmQucHJvdG90eXBlLCBcIm1vbml0b3JzXCIpXG4gICAgcGF0Y2goSHlwcmxhbmQucHJvdG90eXBlLCBcIndvcmtzcGFjZXNcIilcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwiY2xpZW50c1wiKVxuICAgIHBhdGNoKE1vbml0b3IucHJvdG90eXBlLCBcImF2YWlsYWJsZU1vZGVzXCIpXG4gICAgcGF0Y2goTW9uaXRvci5wcm90b3R5cGUsIFwiYXZhaWxhYmxlX21vZGVzXCIpXG4gICAgcGF0Y2goV29ya3NwYWNlLnByb3RvdHlwZSwgXCJjbGllbnRzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsTXByaXNcIiksICh7IE1wcmlzLCBQbGF5ZXIgfSkgPT4ge1xuICAgIHBhdGNoKE1wcmlzLnByb3RvdHlwZSwgXCJwbGF5ZXJzXCIpXG4gICAgcGF0Y2goUGxheWVyLnByb3RvdHlwZSwgXCJzdXBwb3J0ZWRfdXJpX3NjaGVtZXNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZFVyaVNjaGVtZXNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZF9taW1lX3R5cGVzXCIpXG4gICAgcGF0Y2goUGxheWVyLnByb3RvdHlwZSwgXCJzdXBwb3J0ZWRNaW1lVHlwZXNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcImNvbW1lbnRzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsTmV0d29ya1wiKSwgKHsgV2lmaSB9KSA9PiB7XG4gICAgcGF0Y2goV2lmaS5wcm90b3R5cGUsIFwiYWNjZXNzX3BvaW50c1wiKVxuICAgIHBhdGNoKFdpZmkucHJvdG90eXBlLCBcImFjY2Vzc1BvaW50c1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbE5vdGlmZFwiKSwgKHsgTm90aWZkLCBOb3RpZmljYXRpb24gfSkgPT4ge1xuICAgIHBhdGNoKE5vdGlmZC5wcm90b3R5cGUsIFwibm90aWZpY2F0aW9uc1wiKVxuICAgIHBhdGNoKE5vdGlmaWNhdGlvbi5wcm90b3R5cGUsIFwiYWN0aW9uc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbFBvd2VyUHJvZmlsZXNcIiksICh7IFBvd2VyUHJvZmlsZXMgfSkgPT4ge1xuICAgIHBhdGNoKFBvd2VyUHJvZmlsZXMucHJvdG90eXBlLCBcImFjdGlvbnNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxXcFwiKSwgKHsgV3AsIEF1ZGlvLCBWaWRlbyB9KSA9PiB7XG4gICAgcGF0Y2goV3AucHJvdG90eXBlLCBcImVuZHBvaW50c1wiKVxuICAgIHBhdGNoKFdwLnByb3RvdHlwZSwgXCJkZXZpY2VzXCIpXG4gICAgcGF0Y2goQXVkaW8ucHJvdG90eXBlLCBcInN0cmVhbXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwicmVjb3JkZXJzXCIpXG4gICAgcGF0Y2goQXVkaW8ucHJvdG90eXBlLCBcIm1pY3JvcGhvbmVzXCIpXG4gICAgcGF0Y2goQXVkaW8ucHJvdG90eXBlLCBcInNwZWFrZXJzXCIpXG4gICAgcGF0Y2goQXVkaW8ucHJvdG90eXBlLCBcImRldmljZXNcIilcbiAgICBwYXRjaChWaWRlby5wcm90b3R5cGUsIFwic3RyZWFtc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJyZWNvcmRlcnNcIilcbiAgICBwYXRjaChWaWRlby5wcm90b3R5cGUsIFwic2lua3NcIilcbiAgICBwYXRjaChWaWRlby5wcm90b3R5cGUsIFwic291cmNlc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJkZXZpY2VzXCIpXG59KVxuIiwgImltcG9ydCBcIi4vb3ZlcnJpZGVzLmpzXCJcbmltcG9ydCB7IHNldENvbnNvbGVMb2dEb21haW4gfSBmcm9tIFwiY29uc29sZVwiXG5pbXBvcnQgeyBleGl0LCBwcm9ncmFtQXJncyB9IGZyb20gXCJzeXN0ZW1cIlxuaW1wb3J0IElPIGZyb20gXCJnaTovL0FzdGFsSU9cIlxuaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiXG5pbXBvcnQgdHlwZSBBc3RhbDMgZnJvbSBcImdpOi8vQXN0YWw/dmVyc2lvbj0zLjBcIlxuaW1wb3J0IHR5cGUgQXN0YWw0IGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249NC4wXCJcblxudHlwZSBDb25maWcgPSBQYXJ0aWFsPHtcbiAgICBpbnN0YW5jZU5hbWU6IHN0cmluZ1xuICAgIGNzczogc3RyaW5nXG4gICAgaWNvbnM6IHN0cmluZ1xuICAgIGd0a1RoZW1lOiBzdHJpbmdcbiAgICBpY29uVGhlbWU6IHN0cmluZ1xuICAgIGN1cnNvclRoZW1lOiBzdHJpbmdcbiAgICBob2xkOiBib29sZWFuXG4gICAgcmVxdWVzdEhhbmRsZXIocmVxdWVzdDogc3RyaW5nLCByZXM6IChyZXNwb25zZTogYW55KSA9PiB2b2lkKTogdm9pZFxuICAgIG1haW4oLi4uYXJnczogc3RyaW5nW10pOiB2b2lkXG4gICAgY2xpZW50KG1lc3NhZ2U6IChtc2c6IHN0cmluZykgPT4gc3RyaW5nLCAuLi5hcmdzOiBzdHJpbmdbXSk6IHZvaWRcbn0+XG5cbmludGVyZmFjZSBBc3RhbDNKUyBleHRlbmRzIEFzdGFsMy5BcHBsaWNhdGlvbiB7XG4gICAgZXZhbChib2R5OiBzdHJpbmcpOiBQcm9taXNlPGFueT5cbiAgICByZXF1ZXN0SGFuZGxlcjogQ29uZmlnW1wicmVxdWVzdEhhbmRsZXJcIl1cbiAgICBhcHBseV9jc3Moc3R5bGU6IHN0cmluZywgcmVzZXQ/OiBib29sZWFuKTogdm9pZFxuICAgIHF1aXQoY29kZT86IG51bWJlcik6IHZvaWRcbiAgICBzdGFydChjb25maWc/OiBDb25maWcpOiB2b2lkXG59XG5cbmludGVyZmFjZSBBc3RhbDRKUyBleHRlbmRzIEFzdGFsNC5BcHBsaWNhdGlvbiB7XG4gICAgZXZhbChib2R5OiBzdHJpbmcpOiBQcm9taXNlPGFueT5cbiAgICByZXF1ZXN0SGFuZGxlcj86IENvbmZpZ1tcInJlcXVlc3RIYW5kbGVyXCJdXG4gICAgYXBwbHlfY3NzKHN0eWxlOiBzdHJpbmcsIHJlc2V0PzogYm9vbGVhbik6IHZvaWRcbiAgICBxdWl0KGNvZGU/OiBudW1iZXIpOiB2b2lkXG4gICAgc3RhcnQoY29uZmlnPzogQ29uZmlnKTogdm9pZFxufVxuXG50eXBlIEFwcDMgPSB0eXBlb2YgQXN0YWwzLkFwcGxpY2F0aW9uXG50eXBlIEFwcDQgPSB0eXBlb2YgQXN0YWw0LkFwcGxpY2F0aW9uXG5cbmV4cG9ydCBmdW5jdGlvbiBta0FwcDxBcHAgZXh0ZW5kcyBBcHAzPihBcHA6IEFwcCk6IEFzdGFsM0pTXG5leHBvcnQgZnVuY3Rpb24gbWtBcHA8QXBwIGV4dGVuZHMgQXBwND4oQXBwOiBBcHApOiBBc3RhbDRKU1xuXG5leHBvcnQgZnVuY3Rpb24gbWtBcHAoQXBwOiBBcHAzIHwgQXBwNCkge1xuICAgIHJldHVybiBuZXcgKGNsYXNzIEFzdGFsSlMgZXh0ZW5kcyBBcHAge1xuICAgICAgICBzdGF0aWMgeyBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3MoeyBHVHlwZU5hbWU6IFwiQXN0YWxKU1wiIH0sIHRoaXMgYXMgYW55KSB9XG5cbiAgICAgICAgZXZhbChib2R5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZuID0gRnVuY3Rpb24oYHJldHVybiAoYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAke2JvZHkuaW5jbHVkZXMoXCI7XCIpID8gYm9keSA6IGByZXR1cm4gJHtib2R5fTtgfVxuICAgICAgICAgICAgICAgICAgICB9KWApXG4gICAgICAgICAgICAgICAgICAgIGZuKCkoKS50aGVuKHJlcykuY2F0Y2gocmVqKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlaihlcnJvcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdEhhbmRsZXI/OiBDb25maWdbXCJyZXF1ZXN0SGFuZGxlclwiXVxuXG4gICAgICAgIHZmdW5jX3JlcXVlc3QobXNnOiBzdHJpbmcsIGNvbm46IEdpby5Tb2NrZXRDb25uZWN0aW9uKTogdm9pZCB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMucmVxdWVzdEhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdEhhbmRsZXIobXNnLCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgSU8ud3JpdGVfc29jayhjb25uLCBTdHJpbmcocmVzcG9uc2UpLCAoXywgcmVzKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgSU8ud3JpdGVfc29ja19maW5pc2gocmVzKSxcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1cGVyLnZmdW5jX3JlcXVlc3QobXNnLCBjb25uKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXBwbHlfY3NzKHN0eWxlOiBzdHJpbmcsIHJlc2V0ID0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN1cGVyLmFwcGx5X2NzcyhzdHlsZSwgcmVzZXQpXG4gICAgICAgIH1cblxuICAgICAgICBxdWl0KGNvZGU/OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLnF1aXQoKVxuICAgICAgICAgICAgZXhpdChjb2RlID8/IDApXG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCh7IHJlcXVlc3RIYW5kbGVyLCBjc3MsIGhvbGQsIG1haW4sIGNsaWVudCwgaWNvbnMsIC4uLmNmZyB9OiBDb25maWcgPSB7fSkge1xuICAgICAgICAgICAgY29uc3QgYXBwID0gdGhpcyBhcyB1bmtub3duIGFzIEluc3RhbmNlVHlwZTxBcHAzIHwgQXBwND5cblxuICAgICAgICAgICAgY2xpZW50ID8/PSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcHJpbnQoYEFzdGFsIGluc3RhbmNlIFwiJHthcHAuaW5zdGFuY2VOYW1lfVwiIGFscmVhZHkgcnVubmluZ2ApXG4gICAgICAgICAgICAgICAgZXhpdCgxKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZylcbiAgICAgICAgICAgIHNldENvbnNvbGVMb2dEb21haW4oYXBwLmluc3RhbmNlTmFtZSlcblxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0SGFuZGxlciA9IHJlcXVlc3RIYW5kbGVyXG4gICAgICAgICAgICBhcHAuY29ubmVjdChcImFjdGl2YXRlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBtYWluPy4oLi4ucHJvZ3JhbUFyZ3MpXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGFwcC5hY3F1aXJlX3NvY2tldCgpXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQobXNnID0+IElPLnNlbmRfcmVxdWVzdChhcHAuaW5zdGFuY2VOYW1lLCBtc2cpISwgLi4ucHJvZ3JhbUFyZ3MpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseV9jc3MoY3NzLCBmYWxzZSlcblxuICAgICAgICAgICAgaWYgKGljb25zKVxuICAgICAgICAgICAgICAgIGFwcC5hZGRfaWNvbnMoaWNvbnMpXG5cbiAgICAgICAgICAgIGhvbGQgPz89IHRydWVcbiAgICAgICAgICAgIGlmIChob2xkKVxuICAgICAgICAgICAgICAgIGFwcC5ob2xkKClcblxuICAgICAgICAgICAgYXBwLnJ1bkFzeW5jKFtdKVxuICAgICAgICB9XG4gICAgfSlcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5pbXBvcnQgQXN0YWwgZnJvbSBcImdpOi8vQXN0YWw/dmVyc2lvbj0zLjBcIlxuaW1wb3J0IEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj0zLjBcIlxuaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgYXN0YWxpZnksIHsgdHlwZSBDb25zdHJ1Y3RQcm9wcywgdHlwZSBCaW5kYWJsZUNoaWxkIH0gZnJvbSBcIi4vYXN0YWxpZnkuanNcIlxuXG5mdW5jdGlvbiBmaWx0ZXIoY2hpbGRyZW46IGFueVtdKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuLmZsYXQoSW5maW5pdHkpLm1hcChjaCA9PiBjaCBpbnN0YW5jZW9mIEd0ay5XaWRnZXRcbiAgICAgICAgPyBjaFxuICAgICAgICA6IG5ldyBHdGsuTGFiZWwoeyB2aXNpYmxlOiB0cnVlLCBsYWJlbDogU3RyaW5nKGNoKSB9KSlcbn1cblxuLy8gQm94XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQXN0YWwuQm94LnByb3RvdHlwZSwgXCJjaGlsZHJlblwiLCB7XG4gICAgZ2V0KCkgeyByZXR1cm4gdGhpcy5nZXRfY2hpbGRyZW4oKSB9LFxuICAgIHNldCh2KSB7IHRoaXMuc2V0X2NoaWxkcmVuKHYpIH0sXG59KVxuXG5leHBvcnQgdHlwZSBCb3hQcm9wcyA9IENvbnN0cnVjdFByb3BzPEJveCwgQXN0YWwuQm94LkNvbnN0cnVjdG9yUHJvcHM+XG5leHBvcnQgY2xhc3MgQm94IGV4dGVuZHMgYXN0YWxpZnkoQXN0YWwuQm94KSB7XG4gICAgc3RhdGljIHsgR09iamVjdC5yZWdpc3RlckNsYXNzKHsgR1R5cGVOYW1lOiBcIkJveFwiIH0sIHRoaXMpIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IEJveFByb3BzLCAuLi5jaGlsZHJlbjogQXJyYXk8QmluZGFibGVDaGlsZD4pIHsgc3VwZXIoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSBhcyBhbnkpIH1cbiAgICBwcm90ZWN0ZWQgc2V0Q2hpbGRyZW4oY2hpbGRyZW46IGFueVtdKTogdm9pZCB7IHRoaXMuc2V0X2NoaWxkcmVuKGZpbHRlcihjaGlsZHJlbikpIH1cbn1cblxuLy8gQnV0dG9uXG5leHBvcnQgdHlwZSBCdXR0b25Qcm9wcyA9IENvbnN0cnVjdFByb3BzPEJ1dHRvbiwgQXN0YWwuQnV0dG9uLkNvbnN0cnVjdG9yUHJvcHMsIHtcbiAgICBvbkNsaWNrZWQ6IFtdXG4gICAgb25DbGljazogW2V2ZW50OiBBc3RhbC5DbGlja0V2ZW50XVxuICAgIG9uQ2xpY2tSZWxlYXNlOiBbZXZlbnQ6IEFzdGFsLkNsaWNrRXZlbnRdXG4gICAgb25Ib3ZlcjogW2V2ZW50OiBBc3RhbC5Ib3ZlckV2ZW50XVxuICAgIG9uSG92ZXJMb3N0OiBbZXZlbnQ6IEFzdGFsLkhvdmVyRXZlbnRdXG4gICAgb25TY3JvbGw6IFtldmVudDogQXN0YWwuU2Nyb2xsRXZlbnRdXG59PlxuZXhwb3J0IGNsYXNzIEJ1dHRvbiBleHRlbmRzIGFzdGFsaWZ5KEFzdGFsLkJ1dHRvbikge1xuICAgIHN0YXRpYyB7IEdPYmplY3QucmVnaXN0ZXJDbGFzcyh7IEdUeXBlTmFtZTogXCJCdXR0b25cIiB9LCB0aGlzKSB9XG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBCdXR0b25Qcm9wcywgY2hpbGQ/OiBCaW5kYWJsZUNoaWxkKSB7IHN1cGVyKHsgY2hpbGQsIC4uLnByb3BzIH0gYXMgYW55KSB9XG59XG5cbi8vIENlbnRlckJveFxuZXhwb3J0IHR5cGUgQ2VudGVyQm94UHJvcHMgPSBDb25zdHJ1Y3RQcm9wczxDZW50ZXJCb3gsIEFzdGFsLkNlbnRlckJveC5Db25zdHJ1Y3RvclByb3BzPlxuZXhwb3J0IGNsYXNzIENlbnRlckJveCBleHRlbmRzIGFzdGFsaWZ5KEFzdGFsLkNlbnRlckJveCkge1xuICAgIHN0YXRpYyB7IEdPYmplY3QucmVnaXN0ZXJDbGFzcyh7IEdUeXBlTmFtZTogXCJDZW50ZXJCb3hcIiB9LCB0aGlzKSB9XG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBDZW50ZXJCb3hQcm9wcywgLi4uY2hpbGRyZW46IEFycmF5PEJpbmRhYmxlQ2hpbGQ+KSB7IHN1cGVyKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0gYXMgYW55KSB9XG4gICAgcHJvdGVjdGVkIHNldENoaWxkcmVuKGNoaWxkcmVuOiBhbnlbXSk6IHZvaWQge1xuICAgICAgICBjb25zdCBjaCA9IGZpbHRlcihjaGlsZHJlbilcbiAgICAgICAgdGhpcy5zdGFydFdpZGdldCA9IGNoWzBdIHx8IG5ldyBHdGsuQm94XG4gICAgICAgIHRoaXMuY2VudGVyV2lkZ2V0ID0gY2hbMV0gfHwgbmV3IEd0ay5Cb3hcbiAgICAgICAgdGhpcy5lbmRXaWRnZXQgPSBjaFsyXSB8fCBuZXcgR3RrLkJveFxuICAgIH1cbn1cblxuLy8gQ2lyY3VsYXJQcm9ncmVzc1xuZXhwb3J0IHR5cGUgQ2lyY3VsYXJQcm9ncmVzc1Byb3BzID0gQ29uc3RydWN0UHJvcHM8Q2lyY3VsYXJQcm9ncmVzcywgQXN0YWwuQ2lyY3VsYXJQcm9ncmVzcy5Db25zdHJ1Y3RvclByb3BzPlxuZXhwb3J0IGNsYXNzIENpcmN1bGFyUHJvZ3Jlc3MgZXh0ZW5kcyBhc3RhbGlmeShBc3RhbC5DaXJjdWxhclByb2dyZXNzKSB7XG4gICAgc3RhdGljIHsgR09iamVjdC5yZWdpc3RlckNsYXNzKHsgR1R5cGVOYW1lOiBcIkNpcmN1bGFyUHJvZ3Jlc3NcIiB9LCB0aGlzKSB9XG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBDaXJjdWxhclByb2dyZXNzUHJvcHMsIGNoaWxkPzogQmluZGFibGVDaGlsZCkgeyBzdXBlcih7IGNoaWxkLCAuLi5wcm9wcyB9IGFzIGFueSkgfVxufVxuXG4vLyBEcmF3aW5nQXJlYVxuZXhwb3J0IHR5cGUgRHJhd2luZ0FyZWFQcm9wcyA9IENvbnN0cnVjdFByb3BzPERyYXdpbmdBcmVhLCBHdGsuRHJhd2luZ0FyZWEuQ29uc3RydWN0b3JQcm9wcywge1xuICAgIG9uRHJhdzogW2NyOiBhbnldIC8vIFRPRE86IGNhaXJvIHR5cGVzXG59PlxuZXhwb3J0IGNsYXNzIERyYXdpbmdBcmVhIGV4dGVuZHMgYXN0YWxpZnkoR3RrLkRyYXdpbmdBcmVhKSB7XG4gICAgc3RhdGljIHsgR09iamVjdC5yZWdpc3RlckNsYXNzKHsgR1R5cGVOYW1lOiBcIkRyYXdpbmdBcmVhXCIgfSwgdGhpcykgfVxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogRHJhd2luZ0FyZWFQcm9wcykgeyBzdXBlcihwcm9wcyBhcyBhbnkpIH1cbn1cblxuLy8gRW50cnlcbmV4cG9ydCB0eXBlIEVudHJ5UHJvcHMgPSBDb25zdHJ1Y3RQcm9wczxFbnRyeSwgR3RrLkVudHJ5LkNvbnN0cnVjdG9yUHJvcHMsIHtcbiAgICBvbkNoYW5nZWQ6IFtdXG4gICAgb25BY3RpdmF0ZTogW11cbn0+XG5leHBvcnQgY2xhc3MgRW50cnkgZXh0ZW5kcyBhc3RhbGlmeShHdGsuRW50cnkpIHtcbiAgICBzdGF0aWMgeyBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3MoeyBHVHlwZU5hbWU6IFwiRW50cnlcIiB9LCB0aGlzKSB9XG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBFbnRyeVByb3BzKSB7IHN1cGVyKHByb3BzIGFzIGFueSkgfVxufVxuXG4vLyBFdmVudEJveFxuZXhwb3J0IHR5cGUgRXZlbnRCb3hQcm9wcyA9IENvbnN0cnVjdFByb3BzPEV2ZW50Qm94LCBBc3RhbC5FdmVudEJveC5Db25zdHJ1Y3RvclByb3BzLCB7XG4gICAgb25DbGljazogW2V2ZW50OiBBc3RhbC5DbGlja0V2ZW50XVxuICAgIG9uQ2xpY2tSZWxlYXNlOiBbZXZlbnQ6IEFzdGFsLkNsaWNrRXZlbnRdXG4gICAgb25Ib3ZlcjogW2V2ZW50OiBBc3RhbC5Ib3ZlckV2ZW50XVxuICAgIG9uSG92ZXJMb3N0OiBbZXZlbnQ6IEFzdGFsLkhvdmVyRXZlbnRdXG4gICAgb25TY3JvbGw6IFtldmVudDogQXN0YWwuU2Nyb2xsRXZlbnRdXG59PlxuZXhwb3J0IGNsYXNzIEV2ZW50Qm94IGV4dGVuZHMgYXN0YWxpZnkoQXN0YWwuRXZlbnRCb3gpIHtcbiAgICBzdGF0aWMgeyBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3MoeyBHVHlwZU5hbWU6IFwiRXZlbnRCb3hcIiB9LCB0aGlzKSB9XG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBFdmVudEJveFByb3BzLCBjaGlsZD86IEJpbmRhYmxlQ2hpbGQpIHsgc3VwZXIoeyBjaGlsZCwgLi4ucHJvcHMgfSBhcyBhbnkpIH1cbn1cblxuLy8gLy8gVE9ETzogRml4ZWRcbi8vIC8vIFRPRE86IEZsb3dCb3hcbi8vXG4vLyBJY29uXG5leHBvcnQgdHlwZSBJY29uUHJvcHMgPSBDb25zdHJ1Y3RQcm9wczxJY29uLCBBc3RhbC5JY29uLkNvbnN0cnVjdG9yUHJvcHM+XG5leHBvcnQgY2xhc3MgSWNvbiBleHRlbmRzIGFzdGFsaWZ5KEFzdGFsLkljb24pIHtcbiAgICBzdGF0aWMgeyBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3MoeyBHVHlwZU5hbWU6IFwiSWNvblwiIH0sIHRoaXMpIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IEljb25Qcm9wcykgeyBzdXBlcihwcm9wcyBhcyBhbnkpIH1cbn1cblxuLy8gTGFiZWxcbmV4cG9ydCB0eXBlIExhYmVsUHJvcHMgPSBDb25zdHJ1Y3RQcm9wczxMYWJlbCwgQXN0YWwuTGFiZWwuQ29uc3RydWN0b3JQcm9wcz5cbmV4cG9ydCBjbGFzcyBMYWJlbCBleHRlbmRzIGFzdGFsaWZ5KEFzdGFsLkxhYmVsKSB7XG4gICAgc3RhdGljIHsgR09iamVjdC5yZWdpc3RlckNsYXNzKHsgR1R5cGVOYW1lOiBcIkxhYmVsXCIgfSwgdGhpcykgfVxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogTGFiZWxQcm9wcykgeyBzdXBlcihwcm9wcyBhcyBhbnkpIH1cbiAgICBwcm90ZWN0ZWQgc2V0Q2hpbGRyZW4oY2hpbGRyZW46IGFueVtdKTogdm9pZCB7IHRoaXMubGFiZWwgPSBTdHJpbmcoY2hpbGRyZW4pIH1cbn1cblxuLy8gTGV2ZWxCYXJcbmV4cG9ydCB0eXBlIExldmVsQmFyUHJvcHMgPSBDb25zdHJ1Y3RQcm9wczxMZXZlbEJhciwgQXN0YWwuTGV2ZWxCYXIuQ29uc3RydWN0b3JQcm9wcz5cbmV4cG9ydCBjbGFzcyBMZXZlbEJhciBleHRlbmRzIGFzdGFsaWZ5KEFzdGFsLkxldmVsQmFyKSB7XG4gICAgc3RhdGljIHsgR09iamVjdC5yZWdpc3RlckNsYXNzKHsgR1R5cGVOYW1lOiBcIkxldmVsQmFyXCIgfSwgdGhpcykgfVxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogTGV2ZWxCYXJQcm9wcykgeyBzdXBlcihwcm9wcyBhcyBhbnkpIH1cbn1cblxuLy8gVE9ETzogTGlzdEJveFxuXG4vLyBNZW51QnV0dG9uXG5leHBvcnQgdHlwZSBNZW51QnV0dG9uUHJvcHMgPSBDb25zdHJ1Y3RQcm9wczxNZW51QnV0dG9uLCBHdGsuTWVudUJ1dHRvbi5Db25zdHJ1Y3RvclByb3BzPlxuZXhwb3J0IGNsYXNzIE1lbnVCdXR0b24gZXh0ZW5kcyBhc3RhbGlmeShHdGsuTWVudUJ1dHRvbikge1xuICAgIHN0YXRpYyB7IEdPYmplY3QucmVnaXN0ZXJDbGFzcyh7IEdUeXBlTmFtZTogXCJNZW51QnV0dG9uXCIgfSwgdGhpcykgfVxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogTWVudUJ1dHRvblByb3BzLCBjaGlsZD86IEJpbmRhYmxlQ2hpbGQpIHsgc3VwZXIoeyBjaGlsZCwgLi4ucHJvcHMgfSBhcyBhbnkpIH1cbn1cblxuLy8gT3ZlcmxheVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEFzdGFsLk92ZXJsYXkucHJvdG90eXBlLCBcIm92ZXJsYXlzXCIsIHtcbiAgICBnZXQoKSB7IHJldHVybiB0aGlzLmdldF9vdmVybGF5cygpIH0sXG4gICAgc2V0KHYpIHsgdGhpcy5zZXRfb3ZlcmxheXModikgfSxcbn0pXG5cbmV4cG9ydCB0eXBlIE92ZXJsYXlQcm9wcyA9IENvbnN0cnVjdFByb3BzPE92ZXJsYXksIEFzdGFsLk92ZXJsYXkuQ29uc3RydWN0b3JQcm9wcz5cbmV4cG9ydCBjbGFzcyBPdmVybGF5IGV4dGVuZHMgYXN0YWxpZnkoQXN0YWwuT3ZlcmxheSkge1xuICAgIHN0YXRpYyB7IEdPYmplY3QucmVnaXN0ZXJDbGFzcyh7IEdUeXBlTmFtZTogXCJPdmVybGF5XCIgfSwgdGhpcykgfVxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogT3ZlcmxheVByb3BzLCAuLi5jaGlsZHJlbjogQXJyYXk8QmluZGFibGVDaGlsZD4pIHsgc3VwZXIoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSBhcyBhbnkpIH1cbiAgICBwcm90ZWN0ZWQgc2V0Q2hpbGRyZW4oY2hpbGRyZW46IGFueVtdKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IFtjaGlsZCwgLi4ub3ZlcmxheXNdID0gZmlsdGVyKGNoaWxkcmVuKVxuICAgICAgICB0aGlzLnNldF9jaGlsZChjaGlsZClcbiAgICAgICAgdGhpcy5zZXRfb3ZlcmxheXMob3ZlcmxheXMpXG4gICAgfVxufVxuXG4vLyBSZXZlYWxlclxuZXhwb3J0IHR5cGUgUmV2ZWFsZXJQcm9wcyA9IENvbnN0cnVjdFByb3BzPFJldmVhbGVyLCBHdGsuUmV2ZWFsZXIuQ29uc3RydWN0b3JQcm9wcz5cbmV4cG9ydCBjbGFzcyBSZXZlYWxlciBleHRlbmRzIGFzdGFsaWZ5KEd0ay5SZXZlYWxlcikge1xuICAgIHN0YXRpYyB7IEdPYmplY3QucmVnaXN0ZXJDbGFzcyh7IEdUeXBlTmFtZTogXCJSZXZlYWxlclwiIH0sIHRoaXMpIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IFJldmVhbGVyUHJvcHMsIGNoaWxkPzogQmluZGFibGVDaGlsZCkgeyBzdXBlcih7IGNoaWxkLCAuLi5wcm9wcyB9IGFzIGFueSkgfVxufVxuXG4vLyBTY3JvbGxhYmxlXG5leHBvcnQgdHlwZSBTY3JvbGxhYmxlUHJvcHMgPSBDb25zdHJ1Y3RQcm9wczxTY3JvbGxhYmxlLCBBc3RhbC5TY3JvbGxhYmxlLkNvbnN0cnVjdG9yUHJvcHM+XG5leHBvcnQgY2xhc3MgU2Nyb2xsYWJsZSBleHRlbmRzIGFzdGFsaWZ5KEFzdGFsLlNjcm9sbGFibGUpIHtcbiAgICBzdGF0aWMgeyBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3MoeyBHVHlwZU5hbWU6IFwiU2Nyb2xsYWJsZVwiIH0sIHRoaXMpIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IFNjcm9sbGFibGVQcm9wcywgY2hpbGQ/OiBCaW5kYWJsZUNoaWxkKSB7IHN1cGVyKHsgY2hpbGQsIC4uLnByb3BzIH0gYXMgYW55KSB9XG59XG5cbi8vIFNsaWRlclxuZXhwb3J0IHR5cGUgU2xpZGVyUHJvcHMgPSBDb25zdHJ1Y3RQcm9wczxTbGlkZXIsIEFzdGFsLlNsaWRlci5Db25zdHJ1Y3RvclByb3BzLCB7XG4gICAgb25EcmFnZ2VkOiBbXVxufT5cbmV4cG9ydCBjbGFzcyBTbGlkZXIgZXh0ZW5kcyBhc3RhbGlmeShBc3RhbC5TbGlkZXIpIHtcbiAgICBzdGF0aWMgeyBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3MoeyBHVHlwZU5hbWU6IFwiU2xpZGVyXCIgfSwgdGhpcykgfVxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogU2xpZGVyUHJvcHMpIHsgc3VwZXIocHJvcHMgYXMgYW55KSB9XG59XG5cbi8vIFN0YWNrXG5leHBvcnQgdHlwZSBTdGFja1Byb3BzID0gQ29uc3RydWN0UHJvcHM8U3RhY2ssIEFzdGFsLlN0YWNrLkNvbnN0cnVjdG9yUHJvcHM+XG5leHBvcnQgY2xhc3MgU3RhY2sgZXh0ZW5kcyBhc3RhbGlmeShBc3RhbC5TdGFjaykge1xuICAgIHN0YXRpYyB7IEdPYmplY3QucmVnaXN0ZXJDbGFzcyh7IEdUeXBlTmFtZTogXCJTdGFja1wiIH0sIHRoaXMpIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IFN0YWNrUHJvcHMsIC4uLmNoaWxkcmVuOiBBcnJheTxCaW5kYWJsZUNoaWxkPikgeyBzdXBlcih7IGNoaWxkcmVuLCAuLi5wcm9wcyB9IGFzIGFueSkgfVxuICAgIHByb3RlY3RlZCBzZXRDaGlsZHJlbihjaGlsZHJlbjogYW55W10pOiB2b2lkIHsgdGhpcy5zZXRfY2hpbGRyZW4oZmlsdGVyKGNoaWxkcmVuKSkgfVxufVxuXG4vLyBTd2l0Y2hcbmV4cG9ydCB0eXBlIFN3aXRjaFByb3BzID0gQ29uc3RydWN0UHJvcHM8U3dpdGNoLCBHdGsuU3dpdGNoLkNvbnN0cnVjdG9yUHJvcHM+XG5leHBvcnQgY2xhc3MgU3dpdGNoIGV4dGVuZHMgYXN0YWxpZnkoR3RrLlN3aXRjaCkge1xuICAgIHN0YXRpYyB7IEdPYmplY3QucmVnaXN0ZXJDbGFzcyh7IEdUeXBlTmFtZTogXCJTd2l0Y2hcIiB9LCB0aGlzKSB9XG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBTd2l0Y2hQcm9wcykgeyBzdXBlcihwcm9wcyBhcyBhbnkpIH1cbn1cblxuLy8gV2luZG93XG5leHBvcnQgdHlwZSBXaW5kb3dQcm9wcyA9IENvbnN0cnVjdFByb3BzPFdpbmRvdywgQXN0YWwuV2luZG93LkNvbnN0cnVjdG9yUHJvcHM+XG5leHBvcnQgY2xhc3MgV2luZG93IGV4dGVuZHMgYXN0YWxpZnkoQXN0YWwuV2luZG93KSB7XG4gICAgc3RhdGljIHsgR09iamVjdC5yZWdpc3RlckNsYXNzKHsgR1R5cGVOYW1lOiBcIldpbmRvd1wiIH0sIHRoaXMpIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IFdpbmRvd1Byb3BzLCBjaGlsZD86IEJpbmRhYmxlQ2hpbGQpIHsgc3VwZXIoeyBjaGlsZCwgLi4ucHJvcHMgfSBhcyBhbnkpIH1cbn1cbiIsICIvKiBQcmltYXJ5IFBhbGV0dGUgKi9cbi8qIFNlY29uZGFyeSBQYWxldHRlICovXG4vKiBUZXJ0aWFyeSBQYWxldHRlICovXG4vKiBTdXJmYWNlICYgQmFja2dyb3VuZCAqL1xuLyogRXJyb3IgUGFsZXR0ZSAqL1xuLyogTWlzYyAqL1xuLyogT3B0aW9uYWw6IEN1c3RvbSBmb250ICovXG4vKiBBbmltYXRpb24gQ3VydmVzICovXG4vKiBFeHByZXNzaXZlICovXG4vKiBTdGFuZGFyZCAqL1xuLmljb25fYnV0dG9uIHtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiBub25lO1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZSwgYm9yZGVyLXJhZGl1cyAwLjJzIGVhc2UsIGJveC1zaGFkb3cgMC4ycyBlYXNlO1xuICBtaW4td2lkdGg6IDQwcHg7XG4gIG1pbi1oZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDk5OTlweDtcbn1cbi5pY29uX2J1dHRvbiBsYWJlbCxcbi5pY29uX2J1dHRvbiBpbWFnZSB7XG4gIG1hcmdpbjogMHB4O1xuICBwYWRkaW5nOiAwcHg7XG59XG4uaWNvbl9idXR0b24gaW1hZ2Uge1xuICBtaW4td2lkdGg6IDI0cHg7XG4gIG1pbi1oZWlnaHQ6IDI0cHg7XG59XG4uaWNvbl9idXR0b246Zm9jdXMge1xuICBvdXRsaW5lOiAycHggc29saWQgIzVjNjE0NjtcbiAgb3V0bGluZS1vZmZzZXQ6IDJweDtcbn1cbi5pY29uX2J1dHRvbjpkaXNhYmxlZCwgLmRpc2FibGVkLmljb25fYnV0dG9uIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIxMy4zNSwgMjEyLjUsIDIwMS40NSk7XG4gIGNvbG9yOiByZ2IoMTY1Ljg4LCAxNjUuNjQsIDE1NC45Mik7XG4gIG9wYWNpdHk6IDAuMzg7XG59XG4uaWNvbl9idXR0b246ZGlzYWJsZWQ6aG92ZXIsIC5pY29uX2J1dHRvbjpkaXNhYmxlZDphY3RpdmUsIC5kaXNhYmxlZC5pY29uX2J1dHRvbjpob3ZlciwgLmRpc2FibGVkLmljb25fYnV0dG9uOmFjdGl2ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMTMuMzUsIDIxMi41LCAyMDEuNDUpO1xuICBjb2xvcjogcmdiKDE2NS44OCwgMTY1LjY0LCAxNTQuOTIpO1xuICBib3JkZXItcmFkaXVzOiA5OTk5cHg7XG59XG5cbi5pY29uX2J1dHRvbiB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM1NjY0MjI7XG4gIGNvbG9yOiAjZmZmZmZmO1xufVxuLmljb25fYnV0dG9uOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDEwMi45LCAxMTUuNSwgNTYuMSk7XG59XG4uaWNvbl9idXR0b246YWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDExOS44LCAxMzEsIDc4LjIpO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG59XG5cbi5pY29uX2J1dHRvbi54c21hbGwge1xuICBtaW4td2lkdGg6IDMycHg7XG4gIG1pbi1oZWlnaHQ6IDMycHg7XG59XG4uaWNvbl9idXR0b24ueHNtYWxsIGltYWdlIHtcbiAgbWluLXdpZHRoOiAyMHB4O1xuICBtaW4taGVpZ2h0OiAyMHB4O1xufVxuLmljb25fYnV0dG9uLm1lZGl1bSB7XG4gIG1pbi13aWR0aDogNDhweDtcbiAgbWluLWhlaWdodDogNDhweDtcbn1cbi5pY29uX2J1dHRvbi5sYXJnZSB7XG4gIG1pbi13aWR0aDogNTZweDtcbiAgbWluLWhlaWdodDogNTZweDtcbn1cbi5pY29uX2J1dHRvbi5sYXJnZSBpbWFnZSB7XG4gIG1pbi13aWR0aDogMjhweDtcbiAgbWluLWhlaWdodDogMjhweDtcbn1cbi5pY29uX2J1dHRvbi54bGFyZ2Uge1xuICBtaW4td2lkdGg6IDY0cHg7XG4gIG1pbi1oZWlnaHQ6IDY0cHg7XG59XG4uaWNvbl9idXR0b24ueGxhcmdlIGltYWdlIHtcbiAgbWluLXdpZHRoOiAyOHB4O1xuICBtaW4taGVpZ2h0OiAyOHB4O1xufVxuLmljb25fYnV0dG9uLm5hcnJvdyB7XG4gIHBhZGRpbmc6IDRweDtcbn1cbi5pY29uX2J1dHRvbi53aWRlIHtcbiAgcGFkZGluZzogMTRweDtcbn1cblxuLmljb25fYnV0dG9uLnNxdWFyZSB7XG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG59XG4uaWNvbl9idXR0b24uc3F1YXJlOmFjdGl2ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxMTkuOCwgMTMxLCA3OC4yKTtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xufVxuLmljb25fYnV0dG9uLnNxdWFyZS50b2dnbGUuY2hlY2tlZCB7XG4gIGJvcmRlci1yYWRpdXM6IDk5OTlweDtcbn1cblxuLmljb25fYnV0dG9uLmZpbGxlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM1NjY0MjI7XG4gIGNvbG9yOiAjZmZmZmZmO1xufVxuLmljb25fYnV0dG9uLnRvbmFsIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2UwZTZjMztcbiAgY29sb3I6ICMxOTFlMDg7XG59XG4uaWNvbl9idXR0b24udG9uYWw6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjI3LjEsIDIzMi41LCAyMDEpO1xufVxuLmljb25fYnV0dG9uLnRvbmFsOmFjdGl2ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzAuMiwgMjM1LCAyMDcpO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG59XG4uaWNvbl9idXR0b24ub3V0bGluZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgY29sb3I6ICM1NjY0MjI7XG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCAjNTY2NDIyO1xufVxuLmljb25fYnV0dG9uLm91dGxpbmVkOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0Ni41NSwgMjQ3LjI1LCAyNDMuOTUpO1xufVxuLmljb25fYnV0dG9uLm91dGxpbmVkOmFjdGl2ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzguMSwgMjM5LjUsIDIzMi45KTtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xufVxuLmljb25fYnV0dG9uLm91dGxpbmVkOmhvdmVyIHtcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMnB4ICM1NjY0MjI7XG59XG4uaWNvbl9idXR0b24ub3V0bGluZWQ6YWN0aXZlIHtcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMnB4ICM1NjY0MjI7XG59XG4uaWNvbl9idXR0b24uc3RhbmRhcmQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgY29sb3I6ICM0NjQ4M2M7XG59XG4uaWNvbl9idXR0b24uc3RhbmRhcmQ6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ1Ljc1LCAyNDUuODUsIDI0NS4yNSk7XG59XG4uaWNvbl9idXR0b24uc3RhbmRhcmQ6YWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNi41LCAyMzYuNywgMjM1LjUpO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG59XG5cbi5pY29uX2J1dHRvbi50b2dnbGUge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZlZWUyO1xuICBjb2xvcjogIzQ2NDgzYztcbn1cbi5pY29uX2J1dHRvbi50b2dnbGUuY2hlY2tlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM1NjY0MjI7XG4gIGNvbG9yOiAjZmZmZmZmO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xufVxuLmljb25fYnV0dG9uLnRvZ2dsZS5zcXVhcmUuY2hlY2tlZCB7XG4gIGJvcmRlci1yYWRpdXM6IDk5OTlweDtcbn1cblxuLmljb25fYnV0dG9uX2dyb3VwIC5pY29uX2J1dHRvbiB7XG4gIG1hcmdpbjogMHB4IDJweDtcbn1cbi5pY29uX2J1dHRvbl9ncm91cCAuaWNvbl9idXR0b246Zmlyc3QtY2hpbGQge1xuICBtYXJnaW4tbGVmdDogMHB4O1xufVxuLmljb25fYnV0dG9uX2dyb3VwIC5pY29uX2J1dHRvbjpsYXN0LWNoaWxkIHtcbiAgbWFyZ2luLXJpZ2h0OiAwcHg7XG59XG5cbnNjYWxlIHtcbiAgbWluLXdpZHRoOiAyMHB4O1xuICBtaW4taGVpZ2h0OiAxMDBweDtcbiAgbWFyZ2luOiAwcHg7XG59XG5zY2FsZSB0cm91Z2gge1xuICBtaW4td2lkdGg6IDIwcHg7XG4gIG1pbi1oZWlnaHQ6IDEwMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTkxZTA4O1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG59XG5zY2FsZSBoaWdobGlnaHQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTY2NDIyO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xufVxuc2NhbGUgc2xpZGVyIHtcbiAgbWluLXdpZHRoOiAyMnB4O1xuICBtaW4taGVpZ2h0OiAycHg7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU2NjQyMjtcbiAgYm9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIG1hcmdpbjogLTNweCAtMTNweDtcbn1cbnNjYWxlOmhvdmVyIHNsaWRlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM1YzYxNDY7XG4gIGJvcmRlci1jb2xvcjogI2ZmZmZmZjtcbn1cbnNjYWxlOmFjdGl2ZSBzbGlkZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2E2NjVlO1xufVxuc2NhbGUgY29udGVudHMgdGhyb3VnaCB7XG4gIG1pbi13aWR0aDogMzBweDtcbn1cblxuY2lyY3VsYXJwcm9ncmVzcyB7XG4gIGNvbG9yOiAjNTY2NDIyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBlNmMzO1xuICBmb250LXNpemU6IDZweDtcbiAgbWluLXdpZHRoOiAzMnB4O1xufVxuXG4uaHlwcm5vdGNoLWJ1dHRvbi1hcmVhIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZiZmFlZDtcbiAgY29sb3I6ICMxYjFjMTU7XG4gIHRyYW5zaXRpb246IG1pbi13aWR0aCAzNTBtcyBjdWJpYy1iZXppZXIoMC40MiwgMS42NywgMC4yMSwgMC45KSwgbWluLWhlaWdodCAzNTBtcyBjdWJpYy1iZXppZXIoMC40MiwgMS42NywgMC4yMSwgMC45KSwgcGFkZGluZyAzNTBtcyBjdWJpYy1iZXppZXIoMC40MiwgMS42NywgMC4yMSwgMC45KTtcbiAgYm9yZGVyLXJhZGl1czogMHB4IDBweCAxMnB4IDEycHg7XG59XG5cbi5oeXBybm90Y2gtYnV0dG9uLWFyZWEge1xuICBwYWRkaW5nOiAwcHg7XG4gIG1hcmdpbjogMHB4O1xuICBib3JkZXI6IDBweDtcbiAgcGFkZGluZy1ib3R0b206IDhweDtcbiAgbWluLXdpZHRoOiAzMDBweDtcbiAgbWluLWhlaWdodDogMzJweDtcbn1cbi5oeXBybm90Y2gtYnV0dG9uLWFyZWEuZXhwYW5kZWQge1xuICBwYWRkaW5nOiAwcHggMjRweCAxMnB4IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDBweCAwcHggMjhweCAyOHB4O1xufVxuLmh5cHJub3RjaC1idXR0b24tYXJlYS5zb3VuZF9zZXR0aW5ncyB7XG4gIHBhZGRpbmc6IDBweCAyNHB4IDEycHggMjRweDtcbiAgYm9yZGVyLXJhZGl1czogMHB4IDBweCAyOHB4IDI4cHg7XG4gIG1pbi13aWR0aDogNjAwcHg7XG4gIG1pbi1oZWlnaHQ6IDIwMHB4O1xufVxuXG4uaHlwcm5vdGNoX2Jhcl9jb250YWluZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLndvcmtzcGFjZXNfYmFyX2NvbnRhaW5lciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmYmZhZWQ7XG4gIGJvcmRlci1yYWRpdXM6IDBweCAwcHggMTZweCAwcHg7XG59XG5cbi53b3Jrc3BhY2VzX2JhciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmYmZhZWQ7XG4gIGJvcmRlci1yYWRpdXM6IDk5OTlweDtcbiAgdHJhbnNpdGlvbjogNTAwbXMgY3ViaWMtYmV6aWVyKDAuMzgsIDEuMjEsIDAuMjIsIDEpO1xufVxuXG4ud29ya3NwYWNlX2J1dHRvbiB7XG4gIGJvcmRlci1yYWRpdXM6IDk5OTlweDtcbiAgbWFyZ2luOiA0cHg7XG4gIHBhZGRpbmc6IDBweCA0cHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgcGFkZGluZzogMHB4IDRweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU2NjQyMjtcbiAgY29sb3I6ICNmZmZmZmY7XG59XG4ud29ya3NwYWNlX2J1dHRvbjpob3ZlciB7XG4gIHBhZGRpbmc6IDBweCAxMnB4O1xufVxuLndvcmtzcGFjZV9idXR0b24uZm9jdXNlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMzYTY2NWU7XG4gIHBhZGRpbmc6IDBweCAxMnB4O1xufVxuLndvcmtzcGFjZV9idXR0b24gaWNvbiB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgcGFkZGluZzogMHB4IDJweDtcbn1cblxuLndvcmtzcGFjZV9jbGllbnRfaWNvbiB7XG4gIHBhZGRpbmc6IDBweCAycHg7XG4gIGZvbnQtc2l6ZTogMjBweDtcbn1cblxuLnN5c3RlbV90cmF5X2NvbnN0YW50X2JhY2tncm91bmQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmJmYWVkO1xuICBib3JkZXItcmFkaXVzOiAwcHg7XG59XG4uc3lzdGVtX3RyYXlfY29uc3RhbnRfYmFja2dyb3VuZC5mb2N1c2VkIHtcbiAgYm9yZGVyLXJhZGl1czogMHB4IDBweCAyOHB4IDI4cHg7XG59XG5cbi5zeXN0ZW1fdHJheV9pdGVtIHtcbiAgdHJhbnNpdGlvbjogbWluLXdpZHRoIDUwMG1zIGN1YmljLWJlemllcigwLjM4LCAxLjIxLCAwLjIyLCAxKSwgbWluLWhlaWdodCA1MDBtcyBjdWJpYy1iZXppZXIoMC4zOCwgMS4yMSwgMC4yMiwgMSksIHBhZGRpbmcgNTAwbXMgY3ViaWMtYmV6aWVyKDAuMzgsIDEuMjEsIDAuMjIsIDEpO1xuICBwYWRkaW5nOiAwIDRweDtcbiAgbWFyZ2luOiAwIDFweDtcbiAgbWluLWhlaWdodDogMzBweDtcbn1cbi5zeXN0ZW1fdHJheV9pdGVtIGljb24ge1xuICBmb250LXNpemU6IDIycHg7XG59XG4uc3lzdGVtX3RyYXlfaXRlbTpob3ZlciwgLmFjdGl2ZS5zeXN0ZW1fdHJheV9pdGVtIHtcbiAgdHJhbnNpdGlvbjogbWluLXdpZHRoIDUwMG1zIGN1YmljLWJlemllcigwLjM4LCAxLjIxLCAwLjIyLCAxKSwgbWluLWhlaWdodCA1MDBtcyBjdWJpYy1iZXppZXIoMC4zOCwgMS4yMSwgMC4yMiwgMSksIHBhZGRpbmcgNTAwbXMgY3ViaWMtYmV6aWVyKDAuMzgsIDEuMjEsIDAuMjIsIDEpO1xuICBtaW4td2lkdGg6IDQwcHg7XG59XG5cbi5zeXN0ZW1fdHJheV9pdGVtIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU2NjQyMjtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbn1cbi5zeXN0ZW1fdHJheV9pdGVtOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzVjNjE0NjtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIGJvcmRlci1yYWRpdXM6IDE2cHg7XG59XG4uc3lzdGVtX3RyYXlfaXRlbS5hY3RpdmUge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmJmYWVkO1xuICBjb2xvcjogIzU2NjQyMjtcbiAgYm9yZGVyLXJhZGl1czogMjhweCAyOHB4IDBweCAwcHg7XG59XG4uc3lzdGVtX3RyYXlfaXRlbS5maXJzdCB7XG4gIGJvcmRlci1yYWRpdXM6IDE2cHggOHB4IDhweCAxNnB4O1xufVxuLnN5c3RlbV90cmF5X2l0ZW0uZmlyc3Q6aG92ZXIsIC5zeXN0ZW1fdHJheV9pdGVtLmZpcnN0LmFjdGl2ZSB7XG4gIGJvcmRlci1yYWRpdXM6IDE2cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmYmZhZWQ7XG59XG4uc3lzdGVtX3RyYXlfaXRlbS5sYXN0IHtcbiAgYm9yZGVyLXJhZGl1czogOHB4IDE2cHggMTZweCA4cHg7XG59XG4uc3lzdGVtX3RyYXlfaXRlbS5sYXN0OmhvdmVyLCAuc3lzdGVtX3RyYXlfaXRlbS5sYXN0LmFjdGl2ZSB7XG4gIGJvcmRlci1yYWRpdXM6IDE2cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmYmZhZWQ7XG59XG5cbi5zeXN0ZW1fdHJheSB7XG4gIHRyYW5zaXRpb246IG1pbi13aWR0aCAzNTBtcyBjdWJpYy1iZXppZXIoMC40MiwgMS42NywgMC4yMSwgMC45KSwgbWluLWhlaWdodCAzNTBtcyBjdWJpYy1iZXppZXIoMC40MiwgMS42NywgMC4yMSwgMC45KSwgcGFkZGluZyAzNTBtcyBjdWJpYy1iZXppZXIoMC40MiwgMS42NywgMC4yMSwgMC45KTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZiZmFlZDtcbiAgcGFkZGluZzogMnB4O1xuICBtYXJnaW46IDBweDtcbiAgbWluLWhlaWdodDogMzJweDtcbn1cbi5zeXN0ZW1fdHJheS5mb2N1c2VkIHtcbiAgYm9yZGVyLXJhZGl1czogMjhweDtcbn1cblxuLnN5c3RlbV90cmF5X2Jhcl9ub3RjaCB7XG4gIHRyYW5zaXRpb246IG1pbi13aWR0aCAzNTBtcyBjdWJpYy1iZXppZXIoMC40MiwgMS42NywgMC4yMSwgMC45KSwgbWluLWhlaWdodCAzNTBtcyBjdWJpYy1iZXppZXIoMC40MiwgMS42NywgMC4yMSwgMC45KSwgcGFkZGluZyAzNTBtcyBjdWJpYy1iZXppZXIoMC40MiwgMS42NywgMC4yMSwgMC45KTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIG1pbi1oZWlnaHQ6IDBweDtcbiAgcGFkZGluZzogMHB4O1xuICBib3JkZXItcmFkaXVzOiAwcHg7XG4gIG9wYWNpdHk6IDA7XG59XG4uc3lzdGVtX3RyYXlfYmFyX25vdGNoLmZvY3VzZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmJmYWVkO1xuICBtaW4taGVpZ2h0OiA0MHB4O1xuICBib3JkZXItcmFkaXVzOiAyOHB4O1xuICBwYWRkaW5nOiAycHg7XG4gIG9wYWNpdHk6IDE7XG59XG5cbi5zeXN0ZW1fdHJheV9iYXJfbm90Y2hfZW50cnkge1xuICB0cmFuc2l0aW9uOiBtaW4td2lkdGggMzUwbXMgY3ViaWMtYmV6aWVyKDAuNDIsIDEuNjcsIDAuMjEsIDAuOSksIG1pbi1oZWlnaHQgMzUwbXMgY3ViaWMtYmV6aWVyKDAuNDIsIDEuNjcsIDAuMjEsIDAuOSksIHBhZGRpbmcgMzUwbXMgY3ViaWMtYmV6aWVyKDAuNDIsIDEuNjcsIDAuMjEsIDAuOSk7XG4gIHBhZGRpbmc6IDBweCA0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBjb2xvcjogIzU2NjQyMjtcbiAgb3BhY2l0eTogMDtcbn1cbi5zeXN0ZW1fdHJheV9iYXJfbm90Y2guZm9jdXNlZCAuc3lzdGVtX3RyYXlfYmFyX25vdGNoX2VudHJ5IHtcbiAgb3BhY2l0eTogMTtcbn1cblxuLnN5c3RlbV90cmF5X2Jhcl9ub3RjaF9jb250ZW50IHtcbiAgdHJhbnNpdGlvbjogbWluLXdpZHRoIDM1MG1zIGN1YmljLWJlemllcigwLjQyLCAxLjY3LCAwLjIxLCAwLjkpLCBtaW4taGVpZ2h0IDM1MG1zIGN1YmljLWJlemllcigwLjQyLCAxLjY3LCAwLjIxLCAwLjkpLCBwYWRkaW5nIDM1MG1zIGN1YmljLWJlemllcigwLjQyLCAxLjY3LCAwLjIxLCAwLjkpO1xufVxuXG4ubm90aWZpY2F0aW9uX2JhciB7XG4gIG1pbi1oZWlnaHQ6IDM2cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmYmZhZWQ7XG4gIGNvbG9yOiAjNTY2NDIyO1xufVxuXG4ubmV3X25vdGlmaWNhdGlvbl9jYXJkX3ByZXZpZXcgaWNvbiB7XG4gIGZvbnQtc2l6ZTogMzZweDtcbn1cblxuLm5vX25vdGlmaWNhdGlvbiB7XG4gIGNvbG9yOiAjZmZmZmZmO1xufVxuLm5vX25vdGlmaWNhdGlvbiBpY29uIHtcbiAgZm9udC1zaXplOiAzMnB4O1xufVxuXG4uYmF0dGVyeV9sZXZlbF9jaXJjdWxhcl9wcm9ncmVzcyB7XG4gIG1pbi1oZWlnaHQ6IDE2cHg7XG59XG4uYmF0dGVyeV9sZXZlbF9jaXJjdWxhcl9wcm9ncmVzcyBpY29uIHtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuLmJhdHRlcnlfbGV2ZWxfY2lyY3VsYXJfcHJvZ3Jlc3MubG93LWJhdHRlcnkge1xuICBjb2xvcjogI2JhMWExYTtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0NC41LCAyMjcuNiwgMjE1LjkpO1xufVxuXG4uc3lzdGVtX2RldGFpbHNfY29udGFpbmVyIHtcbiAgcGFkZGluZzogMnB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmJmYWVkO1xuICBib3JkZXItcmFkaXVzOiAwcHggMHB4IDBweCAxNnB4O1xufVxuXG4uYmx1ZXRvb3RoX3NldHRpbmdzX21lbnVfY29udGFpbmVyIHtcbiAgcGFkZGluZzogMTBweDtcbn1cblxuLmJsdWV0b290aF9zZXR0aW5nc19tZW51IHtcbiAgYm9yZGVyLXJhZGl1czogMTZweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2UwZTZjMztcbiAgbWluLXdpZHRoOiAxMDBweDtcbiAgbWluLWhlaWdodDogMTAwcHg7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG5cbi5ibHVldG9vdGhfZGV2aWNlX2JhdHRlcnlfbGV2ZWwge1xuICBtaW4td2lkdGg6IDQ4cHg7XG4gIG1pbi1oZWlnaHQ6IDQ4cHg7XG4gIGNvbG9yOiAjMTkxZTA4O1xufVxuLmJsdWV0b290aF9kZXZpY2VfYmF0dGVyeV9sZXZlbCBjaXJjdWxhcnByb2dyZXNzIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzVjNjE0NjtcbiAgY29sb3I6ICMxOTFlMDg7XG59XG4uYmx1ZXRvb3RoX2RldmljZV9iYXR0ZXJ5X2xldmVsIGljb24ge1xuICBwYWRkaW5nOiAxMHB4O1xuICBmb250LXNpemU6IDM2cHg7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxuLm91dHB1dF9kZXZpY2VzX3Njcm9sbGFibGUge1xuICBtaW4td2lkdGg6IDMwMHB4O1xuICBib3JkZXI6IDBweDtcbn1cblxuLm91dHB1dF9kZXZpY2VfYnV0dG9uIHtcbiAgYm9yZGVyLXJhZGl1czogMTZweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU2NjQyMjtcbiAgY29sb3I6ICNmZmZmZmY7XG59XG4ub3V0cHV0X2RldmljZV9idXR0b24uc2VsZWN0ZWQge1xuICBib3JkZXItcmFkaXVzOiAyOHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2E2NjVlO1xuICBjb2xvcjogI2ZmZmZmZjtcbn1cblxud2luZG93LkJhciB7XG4gIGNvbG9yOiAjNTY2NDIyO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgbWluLWhlaWdodDogMzBweDtcbiAgYm9yZGVyLXJhZGl1czogMjRweDtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xufVxud2luZG93LkJhciA+IGNlbnRlcmJveCB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICBib3JkZXItcmFkaXVzOiAwcHggMHB4IDI0cHggMjRweDtcbn1cblxuLmh5cHJub3RjaF9iYXJfY29udGFpbmVyX2JhY2tncm91bmQge1xuICBtaW4taGVpZ2h0OiAzMnB4O1xufSIsICJpbXBvcnQgXCIuL292ZXJyaWRlcy5qc1wiXG5leHBvcnQgeyBkZWZhdWx0IGFzIEFzdGFsSU8gfSBmcm9tIFwiZ2k6Ly9Bc3RhbElPP3ZlcnNpb249MC4xXCJcbmV4cG9ydCAqIGZyb20gXCIuL3Byb2Nlc3MuanNcIlxuZXhwb3J0ICogZnJvbSBcIi4vdGltZS5qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9maWxlLmpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2dvYmplY3QuanNcIlxuZXhwb3J0IHsgQmluZGluZywgYmluZCB9IGZyb20gXCIuL2JpbmRpbmcuanNcIlxuZXhwb3J0IHsgVmFyaWFibGUsIGRlcml2ZSB9IGZyb20gXCIuL3ZhcmlhYmxlLmpzXCJcbiIsICJpbXBvcnQgQXN0YWwgZnJvbSBcImdpOi8vQXN0YWxJT1wiXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiXG5cbmV4cG9ydCB7IEdpbyB9XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZShwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBBc3RhbC5yZWFkX2ZpbGUocGF0aCkgfHwgXCJcIlxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGVBc3luYyhwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIEFzdGFsLnJlYWRfZmlsZV9hc3luYyhwYXRoLCAoXywgcmVzKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoQXN0YWwucmVhZF9maWxlX2ZpbmlzaChyZXMpIHx8IFwiXCIpXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVGaWxlKHBhdGg6IHN0cmluZywgY29udGVudDogc3RyaW5nKTogdm9pZCB7XG4gICAgQXN0YWwud3JpdGVfZmlsZShwYXRoLCBjb250ZW50KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVGaWxlQXN5bmMocGF0aDogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBBc3RhbC53cml0ZV9maWxlX2FzeW5jKHBhdGgsIGNvbnRlbnQsIChfLCByZXMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShBc3RhbC53cml0ZV9maWxlX2ZpbmlzaChyZXMpKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbml0b3JGaWxlKFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBjYWxsYmFjazogKGZpbGU6IHN0cmluZywgZXZlbnQ6IEdpby5GaWxlTW9uaXRvckV2ZW50KSA9PiB2b2lkLFxuKTogR2lvLkZpbGVNb25pdG9yIHtcbiAgICByZXR1cm4gQXN0YWwubW9uaXRvcl9maWxlKHBhdGgsIChmaWxlOiBzdHJpbmcsIGV2ZW50OiBHaW8uRmlsZU1vbml0b3JFdmVudCkgPT4ge1xuICAgICAgICBjYWxsYmFjayhmaWxlLCBldmVudClcbiAgICB9KSFcbn1cbiIsICJpbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBHTGliIH0gZnJvbSBcImdpOi8vR0xpYj92ZXJzaW9uPTIuMFwiXG5leHBvcnQgeyBHT2JqZWN0LCBHT2JqZWN0IGFzIGRlZmF1bHQgfVxuXG5jb25zdCBtZXRhID0gU3ltYm9sKFwibWV0YVwiKVxuY29uc3QgcHJpdiA9IFN5bWJvbChcInByaXZcIilcblxuY29uc3QgeyBQYXJhbVNwZWMsIFBhcmFtRmxhZ3MgfSA9IEdPYmplY3RcblxuY29uc3Qga2ViYWJpZnkgPSAoc3RyOiBzdHJpbmcpID0+IHN0clxuICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpXG4gICAgLnJlcGxhY2VBbGwoXCJfXCIsIFwiLVwiKVxuICAgIC50b0xvd2VyQ2FzZSgpXG5cbnR5cGUgU2lnbmFsRGVjbGFyYXRpb24gPSB7XG4gICAgZmxhZ3M/OiBHT2JqZWN0LlNpZ25hbEZsYWdzXG4gICAgYWNjdW11bGF0b3I/OiBHT2JqZWN0LkFjY3VtdWxhdG9yVHlwZVxuICAgIHJldHVybl90eXBlPzogR09iamVjdC5HVHlwZVxuICAgIHBhcmFtX3R5cGVzPzogQXJyYXk8R09iamVjdC5HVHlwZT5cbn1cblxudHlwZSBQcm9wZXJ0eURlY2xhcmF0aW9uID1cbiAgICB8IEluc3RhbmNlVHlwZTx0eXBlb2YgR09iamVjdC5QYXJhbVNwZWM+XG4gICAgfCB7ICRndHlwZTogR09iamVjdC5HVHlwZSB9XG4gICAgfCB0eXBlb2YgU3RyaW5nXG4gICAgfCB0eXBlb2YgTnVtYmVyXG4gICAgfCB0eXBlb2YgQm9vbGVhblxuICAgIHwgdHlwZW9mIE9iamVjdFxuXG50eXBlIEdPYmplY3RDb25zdHJ1Y3RvciA9IHtcbiAgICBbbWV0YV0/OiB7XG4gICAgICAgIFByb3BlcnRpZXM/OiB7IFtrZXk6IHN0cmluZ106IEdPYmplY3QuUGFyYW1TcGVjIH1cbiAgICAgICAgU2lnbmFscz86IHsgW2tleTogc3RyaW5nXTogR09iamVjdC5TaWduYWxEZWZpbml0aW9uIH1cbiAgICB9XG4gICAgbmV3KC4uLmFyZ3M6IGFueVtdKTogYW55XG59XG5cbnR5cGUgTWV0YUluZm8gPSBHT2JqZWN0Lk1ldGFJbmZvPG5ldmVyLCBBcnJheTx7ICRndHlwZTogR09iamVjdC5HVHlwZSB9PiwgbmV2ZXI+XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcihvcHRpb25zOiBNZXRhSW5mbyA9IHt9KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjbHM6IEdPYmplY3RDb25zdHJ1Y3Rvcikge1xuICAgICAgICBjb25zdCB0ID0gb3B0aW9ucy5UZW1wbGF0ZVxuICAgICAgICBpZiAodHlwZW9mIHQgPT09IFwic3RyaW5nXCIgJiYgIXQuc3RhcnRzV2l0aChcInJlc291cmNlOi8vXCIpICYmICF0LnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpKSB7XG4gICAgICAgICAgICAvLyBhc3N1bWUgeG1sIHRlbXBsYXRlXG4gICAgICAgICAgICBvcHRpb25zLlRlbXBsYXRlID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHQpXG4gICAgICAgIH1cblxuICAgICAgICBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3Moe1xuICAgICAgICAgICAgU2lnbmFsczogeyAuLi5jbHNbbWV0YV0/LlNpZ25hbHMgfSxcbiAgICAgICAgICAgIFByb3BlcnRpZXM6IHsgLi4uY2xzW21ldGFdPy5Qcm9wZXJ0aWVzIH0sXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9LCBjbHMpXG5cbiAgICAgICAgZGVsZXRlIGNsc1ttZXRhXVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3BlcnR5KGRlY2xhcmF0aW9uOiBQcm9wZXJ0eURlY2xhcmF0aW9uID0gT2JqZWN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgcHJvcDogYW55LCBkZXNjPzogUHJvcGVydHlEZXNjcmlwdG9yKSB7XG4gICAgICAgIHRhcmdldC5jb25zdHJ1Y3RvclttZXRhXSA/Pz0ge31cbiAgICAgICAgdGFyZ2V0LmNvbnN0cnVjdG9yW21ldGFdLlByb3BlcnRpZXMgPz89IHt9XG5cbiAgICAgICAgY29uc3QgbmFtZSA9IGtlYmFiaWZ5KHByb3ApXG5cbiAgICAgICAgaWYgKCFkZXNjKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wLCB7XG4gICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1twcml2XT8uW3Byb3BdID8/IGRlZmF1bHRWYWx1ZShkZWNsYXJhdGlvbilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldCh2OiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYgIT09IHRoaXNbcHJvcF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcHJpdl0gPz89IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3ByaXZdW3Byb3BdID0gdlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkobmFtZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBgc2V0XyR7bmFtZS5yZXBsYWNlKFwiLVwiLCBcIl9cIil9YCwge1xuICAgICAgICAgICAgICAgIHZhbHVlKHY6IGFueSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW3Byb3BdID0gdlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBgZ2V0XyR7bmFtZS5yZXBsYWNlKFwiLVwiLCBcIl9cIil9YCwge1xuICAgICAgICAgICAgICAgIHZhbHVlKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1twcm9wXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0YXJnZXQuY29uc3RydWN0b3JbbWV0YV0uUHJvcGVydGllc1trZWJhYmlmeShwcm9wKV0gPSBwc3BlYyhuYW1lLCBQYXJhbUZsYWdzLlJFQURXUklURSwgZGVjbGFyYXRpb24pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSAwXG4gICAgICAgICAgICBpZiAoZGVzYy5nZXQpIGZsYWdzIHw9IFBhcmFtRmxhZ3MuUkVBREFCTEVcbiAgICAgICAgICAgIGlmIChkZXNjLnNldCkgZmxhZ3MgfD0gUGFyYW1GbGFncy5XUklUQUJMRVxuXG4gICAgICAgICAgICB0YXJnZXQuY29uc3RydWN0b3JbbWV0YV0uUHJvcGVydGllc1trZWJhYmlmeShwcm9wKV0gPSBwc3BlYyhuYW1lLCBmbGFncywgZGVjbGFyYXRpb24pXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWwoLi4ucGFyYW1zOiBBcnJheTx7ICRndHlwZTogR09iamVjdC5HVHlwZSB9IHwgdHlwZW9mIE9iamVjdD4pOlxuKHRhcmdldDogYW55LCBzaWduYWw6IGFueSwgZGVzYz86IFByb3BlcnR5RGVzY3JpcHRvcikgPT4gdm9pZFxuXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsKGRlY2xhcmF0aW9uPzogU2lnbmFsRGVjbGFyYXRpb24pOlxuKHRhcmdldDogYW55LCBzaWduYWw6IGFueSwgZGVzYz86IFByb3BlcnR5RGVzY3JpcHRvcikgPT4gdm9pZFxuXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsKFxuICAgIGRlY2xhcmF0aW9uPzogU2lnbmFsRGVjbGFyYXRpb24gfCB7ICRndHlwZTogR09iamVjdC5HVHlwZSB9IHwgdHlwZW9mIE9iamVjdCxcbiAgICAuLi5wYXJhbXM6IEFycmF5PHsgJGd0eXBlOiBHT2JqZWN0LkdUeXBlIH0gfCB0eXBlb2YgT2JqZWN0PlxuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgc2lnbmFsOiBhbnksIGRlc2M/OiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICAgICAgdGFyZ2V0LmNvbnN0cnVjdG9yW21ldGFdID8/PSB7fVxuICAgICAgICB0YXJnZXQuY29uc3RydWN0b3JbbWV0YV0uU2lnbmFscyA/Pz0ge31cblxuICAgICAgICBjb25zdCBuYW1lID0ga2ViYWJpZnkoc2lnbmFsKVxuXG4gICAgICAgIGlmIChkZWNsYXJhdGlvbiB8fCBwYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiB0eXBlIGFzc2VydFxuICAgICAgICAgICAgY29uc3QgYXJyID0gW2RlY2xhcmF0aW9uLCAuLi5wYXJhbXNdLm1hcCh2ID0+IHYuJGd0eXBlKVxuICAgICAgICAgICAgdGFyZ2V0LmNvbnN0cnVjdG9yW21ldGFdLlNpZ25hbHNbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgcGFyYW1fdHlwZXM6IGFycixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5jb25zdHJ1Y3RvclttZXRhXS5TaWduYWxzW25hbWVdID0gZGVjbGFyYXRpb24gfHwge1xuICAgICAgICAgICAgICAgIHBhcmFtX3R5cGVzOiBbXSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGVzYykge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgc2lnbmFsLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICguLi5hcmdzOiBhbnlbXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQobmFtZSwgLi4uYXJncylcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9nOiAoKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKSA9IGRlc2MudmFsdWVcbiAgICAgICAgICAgIGRlc2MudmFsdWUgPSBmdW5jdGlvbiAoLi4uYXJnczogYW55W10pIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vdCB0eXBlZFxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChuYW1lLCAuLi5hcmdzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgYG9uXyR7bmFtZS5yZXBsYWNlKFwiLVwiLCBcIl9cIil9YCwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoLi4uYXJnczogYW55W10pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9nLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBzcGVjKG5hbWU6IHN0cmluZywgZmxhZ3M6IG51bWJlciwgZGVjbGFyYXRpb246IFByb3BlcnR5RGVjbGFyYXRpb24pIHtcbiAgICBpZiAoZGVjbGFyYXRpb24gaW5zdGFuY2VvZiBQYXJhbVNwZWMpXG4gICAgICAgIHJldHVybiBkZWNsYXJhdGlvblxuXG4gICAgc3dpdGNoIChkZWNsYXJhdGlvbikge1xuICAgICAgICBjYXNlIFN0cmluZzpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuc3RyaW5nKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBcIlwiKVxuICAgICAgICBjYXNlIE51bWJlcjpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuZG91YmxlKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCAtTnVtYmVyLk1BWF9WQUxVRSwgTnVtYmVyLk1BWF9WQUxVRSwgMClcbiAgICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5ib29sZWFuKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBmYWxzZSlcbiAgICAgICAgY2FzZSBPYmplY3Q6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmpzb2JqZWN0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzKVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBtaXNzdHlwZWRcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMub2JqZWN0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBkZWNsYXJhdGlvbi4kZ3R5cGUpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0VmFsdWUoZGVjbGFyYXRpb246IFByb3BlcnR5RGVjbGFyYXRpb24pIHtcbiAgICBpZiAoZGVjbGFyYXRpb24gaW5zdGFuY2VvZiBQYXJhbVNwZWMpXG4gICAgICAgIHJldHVybiBkZWNsYXJhdGlvbi5nZXRfZGVmYXVsdF92YWx1ZSgpXG5cbiAgICBzd2l0Y2ggKGRlY2xhcmF0aW9uKSB7XG4gICAgICAgIGNhc2UgU3RyaW5nOlxuICAgICAgICAgICAgcmV0dXJuIFwiXCJcbiAgICAgICAgY2FzZSBOdW1iZXI6XG4gICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICBjYXNlIEJvb2xlYW46XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgY2FzZSBPYmplY3Q6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBWYXJpYWJsZSB9IGZyb20gXCJhc3RhbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lU2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBUaW1lU2VydmljZTtcbiAgcHJpdmF0ZSB0aW1lVmFyaWFibGUgPSBWYXJpYWJsZTxzdHJpbmc+KFwiXCIpLnBvbGwoMTAwMCwgXCJkYXRlXCIpO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fSAvLyBQcml2YXRlIGNvbnN0cnVjdG9yIHRvIHByZXZlbnQgZGlyZWN0IGluc3RhbnRpYXRpb25cblxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IFRpbWVTZXJ2aWNlIHtcbiAgICBpZiAoIVRpbWVTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICBUaW1lU2VydmljZS5pbnN0YW5jZSA9IG5ldyBUaW1lU2VydmljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gVGltZVNlcnZpY2UuaW5zdGFuY2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0VGltZSgpOiBWYXJpYWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy50aW1lVmFyaWFibGU7XG4gIH1cbn1cbiIsICJpbXBvcnQgV3AgZnJvbSBcImdpOi8vQXN0YWxXcFwiO1xuaW1wb3J0IHsgYmluZCwgQmluZGluZyB9IGZyb20gXCJhc3RhbFwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyL0xvZ2dlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaXJlUGx1bWJlclZpZXdNb2RlbCB7XG4gIHByaXZhdGUgd2lyZXBsdW1iZXI6IFdwLldwIHwgbnVsbCA9IFdwLmdldF9kZWZhdWx0KCk7XG4gIHByaXZhdGUgbGFzdERlZmF1bHRTcGVha2VyVm9sdW1lQmVmb3JlTXV0ZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgbG9nZ2VyID0gbmV3IExvZ2dlcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xuICBwdWJsaWMgZ2V0V2lyZVBsdW1iZXIoKTogV3AuV3Age1xuICAgIGlmICghdGhpcy53aXJlcGx1bWJlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2lyZVBsdW1iZXIgaXMgbm90IGluaXRpYWxpemVkLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMud2lyZXBsdW1iZXI7XG4gIH1cbiAgcHVibGljIGdldEF1ZGlvKCk6IEJpbmRpbmc8V3AuQXVkaW8+IHtcbiAgICByZXR1cm4gYmluZCh0aGlzLmdldFdpcmVQbHVtYmVyKCksIFwiYXVkaW9cIikuYXMoKGF1ZGlvKSA9PiB7XG4gICAgICBpZiAoIWF1ZGlvKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF1ZGlvIGlzIG5vdCBhdmFpbGFibGUgaW4gV2lyZVBsdW1iZXIuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGF1ZGlvO1xuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBnZXRWaWRlbygpOiBCaW5kaW5nPFdwLlZpZGVvPiB7XG4gICAgcmV0dXJuIGJpbmQodGhpcy5nZXRXaXJlUGx1bWJlcigpLCBcInZpZGVvXCIpO1xuICB9XG4gIHB1YmxpYyBnZXRTcGVha2VycygpOiBCaW5kaW5nPFdwLkVuZHBvaW50W10gfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXVkaW8oKS5hcygoYXVkaW8pID0+IHtcbiAgICAgIGNvbnN0IHNwZWFrZXJzID0gYmluZChhdWRpbywgXCJzcGVha2Vyc1wiKTtcbiAgICAgIGlmICghc3BlYWtlcnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3BlYWtlcnMgZm91bmQgaW4gV2lyZVBsdW1iZXIgYXVkaW8uXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNwZWFrZXJzLmdldCgpO1xuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBnZXREZWZhdWx0U3BlYWtlcigpOiBCaW5kaW5nPFdwLkVuZHBvaW50PiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXVkaW8oKS5hcygoYXVkaW8pID0+IHtcbiAgICAgIGNvbnN0IGRlZmF1bHRTcGVha2VyID0gYmluZChhdWRpbywgXCJkZWZhdWx0U3BlYWtlclwiKTtcbiAgICAgIGlmICghZGVmYXVsdFNwZWFrZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGVmYXVsdCBzcGVha2VyIGlzIG5vdCBzZXQuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmF1bHRTcGVha2VyLmdldCgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldERlZmF1bHRTcGVha2VyVm9sdW1lKCk6IEJpbmRpbmc8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdFNwZWFrZXIoKS5hcygoc3BlYWtlcikgPT4ge1xuICAgICAgaWYgKCFzcGVha2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRlZmF1bHQgc3BlYWtlciBpcyBub3Qgc2V0LlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiaW5kKHNwZWFrZXIsIFwidm9sdW1lXCIpLmdldCgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldERlZmF1bHRTcGVha2VyVm9sdW1lSWNvbigpOiBCaW5kaW5nPHN0cmluZz4ge1xuICAgIGNvbnN0IGRlZmF1bHRTcGVha2VyID0gdGhpcy5nZXREZWZhdWx0U3BlYWtlcigpLmdldCgpO1xuICAgIHJldHVybiBiaW5kKGRlZmF1bHRTcGVha2VyLCBcInZvbHVtZUljb25cIik7XG4gIH1cbiAgcHVibGljIHNldERlZmF1bHRTcGVha2VyVm9sdW1lKHZvbHVtZTogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgZGVmYXVsdFNwZWFrZXIgPSB0aGlzLmdldERlZmF1bHRTcGVha2VyKCkuZ2V0KCk7XG4gICAgZGVmYXVsdFNwZWFrZXIuc2V0X3ZvbHVtZSh2b2x1bWUpO1xuICB9XG5cbiAgcHVibGljIG11dGVEZWZhdWx0U3BlYWtlcigpOiB2b2lkIHtcbiAgICBjb25zdCBkZWZhdWx0U3BlYWtlciA9IHRoaXMuZ2V0RGVmYXVsdFNwZWFrZXIoKS5nZXQoKTtcblxuICAgIHRoaXMubGFzdERlZmF1bHRTcGVha2VyVm9sdW1lQmVmb3JlTXV0ZSA9IGRlZmF1bHRTcGVha2VyLmdldF92b2x1bWUoKTtcbiAgICBkZWZhdWx0U3BlYWtlci5zZXRfdm9sdW1lKDApO1xuICB9XG5cbiAgcHVibGljIHVubXV0ZURlZmF1bHRTcGVha2VyKCk6IHZvaWQge1xuICAgIGNvbnN0IGRlZmF1bHRTcGVha2VyID0gdGhpcy5nZXREZWZhdWx0U3BlYWtlcigpLmdldCgpO1xuXG4gICAgaWYgKHRoaXMubGFzdERlZmF1bHRTcGVha2VyVm9sdW1lQmVmb3JlTXV0ZSAhPT0gbnVsbCkge1xuICAgICAgZGVmYXVsdFNwZWFrZXIuc2V0X3ZvbHVtZSh0aGlzLmxhc3REZWZhdWx0U3BlYWtlclZvbHVtZUJlZm9yZU11dGUpO1xuICAgICAgdGhpcy5sYXN0RGVmYXVsdFNwZWFrZXJWb2x1bWVCZWZvcmVNdXRlID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gcHJldmlvdXMgdm9sdW1lIHRvIHJlc3RvcmUuXCIpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgc2V0RGVmYXVsdFNwZWFrZXIoc3BlYWtlcjogV3AuRW5kcG9pbnQpIHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBTZXR0aW5nIGRlZmF1bHQgc3BlYWtlciB0bzogJHtzcGVha2VyLmdldF9kZXNjcmlwdGlvbigpfWBcbiAgICApO1xuICAgIHNwZWFrZXIuc2V0X2lzX2RlZmF1bHQodHJ1ZSk7XG4gIH1cbn1cbiIsICJlbnVtIExvZ0xldmVsIHtcbiAgREVCVUcgPSAxLFxuICBJTkZPID0gMixcbiAgRVJST1IgPSAzLFxuICBXQVJOID0gNCxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9nZ2VyIHtcbiAgcHJpdmF0ZSBsb2dnaW5nQ2xhc3NOYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfTE9HX0xFVkVMID0gTG9nTGV2ZWwuREVCVUc7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE1BWF9DTEFTU19OQU1FX0xFTkdUSCA9IDIwO1xuXG4gIHByaXZhdGUgbG9nTGV2ZWw6IExvZ0xldmVsID0gTG9nZ2VyLkRFRkFVTFRfTE9HX0xFVkVMO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGxvZ2dpbmdDbGFzc05hbWU6IHN0cmluZyxcbiAgICBsb2dMZXZlbDogTG9nTGV2ZWwgPSBMb2dnZXIuREVGQVVMVF9MT0dfTEVWRUxcbiAgKSB7XG4gICAgdGhpcy5sb2dnaW5nQ2xhc3NOYW1lID0gbG9nZ2luZ0NsYXNzTmFtZTtcbiAgICB0aGlzLmxvZ0xldmVsID0gbG9nTGV2ZWw7XG4gIH1cblxuICBkZWJ1ZyhtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgdGhpcy5wcmludFdpdGhMZXZlbChMb2dMZXZlbC5ERUJVRywgbWVzc2FnZSwgLi4uYXJncyk7XG4gIH1cbiAgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgdGhpcy5wcmludFdpdGhMZXZlbChMb2dMZXZlbC5JTkZPLCBtZXNzYWdlLCAuLi5hcmdzKTtcbiAgfVxuICB3YXJuKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICB0aGlzLnByaW50V2l0aExldmVsKExvZ0xldmVsLldBUk4sIG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICB9XG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICB0aGlzLnByaW50V2l0aExldmVsKExvZ0xldmVsLkVSUk9SLCBtZXNzYWdlLCAuLi5hcmdzKTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkTG9nKGxldmVsOiBMb2dMZXZlbCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBsZXZlbCA+PSB0aGlzLmxvZ0xldmVsO1xuICB9XG5cbiAgcHJpdmF0ZSBwcmludFdpdGhMZXZlbChsZXZlbDogTG9nTGV2ZWwsIG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICBpZiAoIXRoaXMuc2hvdWxkTG9nKGxldmVsKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgbGV2ZWxTdHJpbmcgPSBMb2dMZXZlbFtsZXZlbF0udG9VcHBlckNhc2UoKTtcblxuICAgIGNvbnN0IG1heCA9IExvZ2dlci5NQVhfQ0xBU1NfTkFNRV9MRU5HVEg7XG4gICAgbGV0IG5hbWUgPSB0aGlzLmxvZ2dpbmdDbGFzc05hbWU7XG4gICAgaWYgKG5hbWUubGVuZ3RoID4gbWF4KSB7XG4gICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCBtYXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5wYWRFbmQobWF4LCBcIiBcIik7XG4gICAgfVxuXG4gICAgY29uc3QgZm9ybWF0dGVkID0gYCR7bGV2ZWxTdHJpbmd9IC0gJHtuYW1lfSAtICR7bWVzc2FnZX1gO1xuICAgIGNvbnNvbGUubG9nKGZvcm1hdHRlZCwgLi4uYXJncyk7XG4gIH1cbn1cbiIsICJpbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTMuMFwiXG5pbXBvcnQgeyB0eXBlIEJpbmRhYmxlQ2hpbGQgfSBmcm9tIFwiLi9hc3RhbGlmeS5qc1wiXG5pbXBvcnQgeyBtZXJnZUJpbmRpbmdzLCBqc3ggYXMgX2pzeCB9IGZyb20gXCIuLi9fYXN0YWwuanNcIlxuaW1wb3J0ICogYXMgV2lkZ2V0IGZyb20gXCIuL3dpZGdldC5qc1wiXG5cbmV4cG9ydCBmdW5jdGlvbiBGcmFnbWVudCh7IGNoaWxkcmVuID0gW10sIGNoaWxkIH06IHtcbiAgICBjaGlsZD86IEJpbmRhYmxlQ2hpbGRcbiAgICBjaGlsZHJlbj86IEFycmF5PEJpbmRhYmxlQ2hpbGQ+XG59KSB7XG4gICAgaWYgKGNoaWxkKSBjaGlsZHJlbi5wdXNoKGNoaWxkKVxuICAgIHJldHVybiBtZXJnZUJpbmRpbmdzKGNoaWxkcmVuKVxufVxuXG5leHBvcnQgZnVuY3Rpb24ganN4KFxuICAgIGN0b3I6IGtleW9mIHR5cGVvZiBjdG9ycyB8IHR5cGVvZiBHdGsuV2lkZ2V0LFxuICAgIHByb3BzOiBhbnksXG4pIHtcbiAgICByZXR1cm4gX2pzeChjdG9ycywgY3RvciBhcyBhbnksIHByb3BzKVxufVxuXG5jb25zdCBjdG9ycyA9IHtcbiAgICBib3g6IFdpZGdldC5Cb3gsXG4gICAgYnV0dG9uOiBXaWRnZXQuQnV0dG9uLFxuICAgIGNlbnRlcmJveDogV2lkZ2V0LkNlbnRlckJveCxcbiAgICBjaXJjdWxhcnByb2dyZXNzOiBXaWRnZXQuQ2lyY3VsYXJQcm9ncmVzcyxcbiAgICBkcmF3aW5nYXJlYTogV2lkZ2V0LkRyYXdpbmdBcmVhLFxuICAgIGVudHJ5OiBXaWRnZXQuRW50cnksXG4gICAgZXZlbnRib3g6IFdpZGdldC5FdmVudEJveCxcbiAgICAvLyBUT0RPOiBmaXhlZFxuICAgIC8vIFRPRE86IGZsb3dib3hcbiAgICBpY29uOiBXaWRnZXQuSWNvbixcbiAgICBsYWJlbDogV2lkZ2V0LkxhYmVsLFxuICAgIGxldmVsYmFyOiBXaWRnZXQuTGV2ZWxCYXIsXG4gICAgLy8gVE9ETzogbGlzdGJveFxuICAgIG1lbnVidXR0b246IFdpZGdldC5NZW51QnV0dG9uLFxuICAgIG92ZXJsYXk6IFdpZGdldC5PdmVybGF5LFxuICAgIHJldmVhbGVyOiBXaWRnZXQuUmV2ZWFsZXIsXG4gICAgc2Nyb2xsYWJsZTogV2lkZ2V0LlNjcm9sbGFibGUsXG4gICAgc2xpZGVyOiBXaWRnZXQuU2xpZGVyLFxuICAgIHN0YWNrOiBXaWRnZXQuU3RhY2ssXG4gICAgc3dpdGNoOiBXaWRnZXQuU3dpdGNoLFxuICAgIHdpbmRvdzogV2lkZ2V0LldpbmRvdyxcbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG4gICAgbmFtZXNwYWNlIEpTWCB7XG4gICAgICAgIHR5cGUgRWxlbWVudCA9IEd0ay5XaWRnZXRcbiAgICAgICAgdHlwZSBFbGVtZW50Q2xhc3MgPSBHdGsuV2lkZ2V0XG4gICAgICAgIGludGVyZmFjZSBJbnRyaW5zaWNFbGVtZW50cyB7XG4gICAgICAgICAgICBib3g6IFdpZGdldC5Cb3hQcm9wc1xuICAgICAgICAgICAgYnV0dG9uOiBXaWRnZXQuQnV0dG9uUHJvcHNcbiAgICAgICAgICAgIGNlbnRlcmJveDogV2lkZ2V0LkNlbnRlckJveFByb3BzXG4gICAgICAgICAgICBjaXJjdWxhcnByb2dyZXNzOiBXaWRnZXQuQ2lyY3VsYXJQcm9ncmVzc1Byb3BzXG4gICAgICAgICAgICBkcmF3aW5nYXJlYTogV2lkZ2V0LkRyYXdpbmdBcmVhUHJvcHNcbiAgICAgICAgICAgIGVudHJ5OiBXaWRnZXQuRW50cnlQcm9wc1xuICAgICAgICAgICAgZXZlbnRib3g6IFdpZGdldC5FdmVudEJveFByb3BzXG4gICAgICAgICAgICAvLyBUT0RPOiBmaXhlZFxuICAgICAgICAgICAgLy8gVE9ETzogZmxvd2JveFxuICAgICAgICAgICAgaWNvbjogV2lkZ2V0Lkljb25Qcm9wc1xuICAgICAgICAgICAgbGFiZWw6IFdpZGdldC5MYWJlbFByb3BzXG4gICAgICAgICAgICBsZXZlbGJhcjogV2lkZ2V0LkxldmVsQmFyUHJvcHNcbiAgICAgICAgICAgIC8vIFRPRE86IGxpc3Rib3hcbiAgICAgICAgICAgIG1lbnVidXR0b246IFdpZGdldC5NZW51QnV0dG9uUHJvcHNcbiAgICAgICAgICAgIG92ZXJsYXk6IFdpZGdldC5PdmVybGF5UHJvcHNcbiAgICAgICAgICAgIHJldmVhbGVyOiBXaWRnZXQuUmV2ZWFsZXJQcm9wc1xuICAgICAgICAgICAgc2Nyb2xsYWJsZTogV2lkZ2V0LlNjcm9sbGFibGVQcm9wc1xuICAgICAgICAgICAgc2xpZGVyOiBXaWRnZXQuU2xpZGVyUHJvcHNcbiAgICAgICAgICAgIHN0YWNrOiBXaWRnZXQuU3RhY2tQcm9wc1xuICAgICAgICAgICAgc3dpdGNoOiBXaWRnZXQuU3dpdGNoUHJvcHNcbiAgICAgICAgICAgIHdpbmRvdzogV2lkZ2V0LldpbmRvd1Byb3BzXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBqc3hzID0ganN4XG4iLCAiaW1wb3J0IHsgTm90Y2hTdGF0ZSB9IGZyb20gXCIuLi8uLi8uLi9ub3RjaC9zdGF0ZS9Ob3RjaFN0YXRlXCI7XG5pbXBvcnQgTm90Y2hTdGF0ZVZpZXdNb2RlbCBmcm9tIFwiLi4vLi4vLi4vbm90Y2gvc3RhdGUvTm90Y2hTdGF0ZVZpZXdNb2RlbFwiO1xuaW1wb3J0IFdpcmVQbHVtYmVyVmlld01vZGVsIGZyb20gXCIuLi8uLi8uLi9zb3VuZC9XaXJlUGx1bWJlclZpZXdNb2RlbFwiO1xuXG5jb25zdCBTUEVBS0VSX0lDT04gPSBcIlx1RDgzRFx1REQwQVwiO1xuY29uc3QgQkxVRVRPT1RIX0lDT04gPSBcIlxcdWRiODBcXHVkY2FmXCI7XG5cbnR5cGUgU291bmRTZXR0aW5nc0J1dHRvblByb3BzID0ge1xuICBub3RjaFN0YXRlVmlld01vZGVsOiBOb3RjaFN0YXRlVmlld01vZGVsO1xufTtcblxuY29uc3QgdG9nZ2xlU291bmRTZXR0aW5ncyA9IChub3RjaFN0YXRlVmlld01vZGVsOiBOb3RjaFN0YXRlVmlld01vZGVsKSA9PiB7XG4gIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IG5vdGNoU3RhdGVWaWV3TW9kZWwuZ2V0Tm90Y2hTdGF0ZSgpLmdldCgpO1xuICBpZiAoY3VycmVudFN0YXRlID09PSBOb3RjaFN0YXRlLlNPVU5EX1NFVFRJTkdTKSB7XG4gICAgbm90Y2hTdGF0ZVZpZXdNb2RlbC5zZXROb3RjaFN0YXRlKE5vdGNoU3RhdGUuTk9STUFMKTtcbiAgfSBlbHNlIHtcbiAgICBub3RjaFN0YXRlVmlld01vZGVsLnNldE5vdGNoU3RhdGUoTm90Y2hTdGF0ZS5TT1VORF9TRVRUSU5HUyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFNvdW5kU2V0dGluZ3NCdXR0b24ocHJvcHM6IFNvdW5kU2V0dGluZ3NCdXR0b25Qcm9wcykge1xuICBjb25zdCB3aXJlUGx1bWJlclZpZXdNb2RlbCA9IG5ldyBXaXJlUGx1bWJlclZpZXdNb2RlbCgpO1xuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT1cImljb25fYnV0dG9uIHhzbWFsbFwiXG4gICAgICBjaGlsZD17PGljb24gaWNvbj17d2lyZVBsdW1iZXJWaWV3TW9kZWwuZ2V0RGVmYXVsdFNwZWFrZXJWb2x1bWVJY29uKCl9IC8+fVxuICAgICAgb25DbGljaz17KCkgPT4gdG9nZ2xlU291bmRTZXR0aW5ncyhwcm9wcy5ub3RjaFN0YXRlVmlld01vZGVsKX1cbiAgICAvPlxuICApO1xufVxuXG50eXBlIFNldHRpbmdzTWVudVByb3BzID0geyBub3RjaFN0YXRlVmlld01vZGVsOiBOb3RjaFN0YXRlVmlld01vZGVsIH07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNldHRpbmdzTWVudShwcm9wczogU2V0dGluZ3NNZW51UHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8Ym94XG4gICAgICBjbGFzc05hbWU9XCJzZXR0aW5nc19tZW51XCJcbiAgICAgIGNoaWxkPXtcbiAgICAgICAgPGJveFxuICAgICAgICAgIGNoaWxkcmVuPXtbXG4gICAgICAgICAgICA8U291bmRTZXR0aW5nc0J1dHRvblxuICAgICAgICAgICAgICBub3RjaFN0YXRlVmlld01vZGVsPXtwcm9wcy5ub3RjaFN0YXRlVmlld01vZGVsfVxuICAgICAgICAgICAgLz4sXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17XCJpY29uX2J1dHRvbiB4c21hbGxcIn0gbGFiZWw9e1wiT3B0aW9uIDJcIn0gLz4sXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17XCJpY29uX2J1dHRvbiB4c21hbGxcIn0gbGFiZWw9e1wiT3B0aW9uIDNcIn0gLz4sXG4gICAgICAgICAgXX1cbiAgICAgICAgPjwvYm94PlxuICAgICAgfVxuICAgID48L2JveD5cbiAgKTtcbn1cbiIsICJpbXBvcnQgeyBiaW5kIH0gZnJvbSBcImFzdGFsXCI7XG5pbXBvcnQgVGltZVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL3RpbWUvVGltZVNlcnZpY2VcIjtcbmltcG9ydCBTZXR0aW5nc01lbnUgZnJvbSBcIi4vU2V0dGluZ3NNZW51XCI7XG5pbXBvcnQgTm90Y2hTdGF0ZVZpZXdNb2RlbCBmcm9tIFwiLi4vLi4vLi4vbm90Y2gvc3RhdGUvTm90Y2hTdGF0ZVZpZXdNb2RlbFwiO1xuXG50eXBlIEV4cGFuZGVkTm90Y2hQcm9wcyA9IHtcbiAgbm90Y2hTdGF0ZVZpZXdNb2RlbDogTm90Y2hTdGF0ZVZpZXdNb2RlbDtcbn07XG5cbmZ1bmN0aW9uIFRpbWUoKSB7XG4gIHJldHVybiAoXG4gICAgPGJveCBjbGFzc05hbWU9XCJleHBhbmRlZF9ub3RjaF90aW1lXCI+XG4gICAgICA8bGFiZWw+XG4gICAgICAgIHtiaW5kKFRpbWVTZXJ2aWNlLmdldEluc3RhbmNlKCkuZ2V0VGltZSgpKS5hcygodGltZSkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aW1lLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgfSl9XG4gICAgICA8L2xhYmVsPlxuICAgICAgPGxhYmVsPlxuICAgICAgICB7YmluZChUaW1lU2VydmljZS5nZXRJbnN0YW5jZSgpLmdldFRpbWUoKSkuYXMoKHRpbWUpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGltZS5zbGljZSgxMCwgMjApO1xuICAgICAgICB9KX1cbiAgICAgIDwvbGFiZWw+XG4gICAgPC9ib3g+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEV4cGFuZGVkTm90Y2gocHJvcHM6IEV4cGFuZGVkTm90Y2hQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxib3hcbiAgICAgIGNsYXNzTmFtZT17XCJleHBhbmRlZF9ub3RjaFwifVxuICAgICAgY2hpbGQ9e1xuICAgICAgICA8Ym94XG4gICAgICAgICAgY2hpbGRyZW49e1tcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxib3hcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbD17dHJ1ZX1cbiAgICAgICAgICAgICAgICBjaGlsZHJlbj17W1xuICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgPFNldHRpbmdzTWVudVxuICAgICAgICAgICAgICAgICAgICAgIG5vdGNoU3RhdGVWaWV3TW9kZWw9e3Byb3BzLm5vdGNoU3RhdGVWaWV3TW9kZWx9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxib3ggY2hpbGQ9ezxUaW1lIC8+fSAvPlxuICAgICAgICAgICAgICAgICAgPC8+LFxuICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz4sXG4gICAgICAgICAgXX1cbiAgICAgICAgPjwvYm94PlxuICAgICAgfVxuICAgID48L2JveD5cbiAgKTtcbn1cbiIsICJpbXBvcnQgTXByaXMgZnJvbSBcImdpOi8vQXN0YWxNcHJpc1wiO1xuaW1wb3J0IEJpbmRpbmcsIHsgYmluZCB9IGZyb20gXCJhc3RhbC9iaW5kaW5nXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXIvTG9nZ2VyXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYVZpZXdNb2RlbCB7XG4gIHByaXZhdGUgbXByaXM6IE1wcmlzLk1wcmlzID0gTXByaXMuZ2V0X2RlZmF1bHQoKTtcbiAgcHJpdmF0ZSBsb2dnZXI6IExvZ2dlciA9IG5ldyBMb2dnZXIoXCJNZWRpYVZpZXdNb2RlbFwiKTtcbiAgcHJpdmF0ZSBzcG90aWZ5OiBNcHJpcy5QbGF5ZXIgPSBNcHJpcy5QbGF5ZXIubmV3KFwic3BvdGlmeVwiKTtcbiAgcHJpdmF0ZSB5b3V0dWJlOiBNcHJpcy5QbGF5ZXIgPSBNcHJpcy5QbGF5ZXIubmV3KFwieW91dHViZVwiKTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHVibGljIGdldFBsYXllcnMoKTogQmluZGluZzxNcHJpcy5QbGF5ZXJbXT4ge1xuICAgIHJldHVybiBiaW5kKHRoaXMubXByaXMsIFwicGxheWVyc1wiKTtcbiAgfVxuICBwdWJsaWMgZ2V0U3BvdGlmeUF2YWlsYWJsZSgpOiBCaW5kaW5nPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gYmluZCh0aGlzLnNwb3RpZnksIFwiYXZhaWxhYmxlXCIpO1xuICB9XG4gIHB1YmxpYyBnZXRZb3V0dWJlQXZhaWxhYmxlKCk6IEJpbmRpbmc8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBiaW5kKHRoaXMueW91dHViZSwgXCJhdmFpbGFibGVcIik7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBiaW5kIH0gZnJvbSBcImFzdGFsL2JpbmRpbmdcIjtcbmltcG9ydCBUaW1lU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vdGltZS9UaW1lU2VydmljZVwiO1xuaW1wb3J0IE1lZGlhVmlld01vZGVsIGZyb20gXCIuLi8uLi8uLi9tZWRpYS9NZWRpYVZpZXdNb2RlbFwiO1xuZnVuY3Rpb24gTWVkaWFJbmRpY2F0b3IoKSB7XG4gIGNvbnN0IG1lZGlhVmlld01vZGVsID0gbmV3IE1lZGlhVmlld01vZGVsKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Ym94XG4gICAgICBjbGFzc05hbWU9XCJub3JtYWxfbm90Y2hfbWVkaWFfaWNvblwiXG4gICAgICBjaGlsZD17XG4gICAgICAgIDxib3hcbiAgICAgICAgICBjbGFzc05hbWU9e1wibm9ybWFsX25vdGNoX21lZGlhX2luZGljYXRvclwifVxuICAgICAgICAgIGNoaWxkPXtcbiAgICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgICBsYWJlbD17bWVkaWFWaWV3TW9kZWwuZ2V0UGxheWVycygpLmFzKChwbGF5ZXJzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBsYXllcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCJObyBNZWRpYVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcGxheWVyc1swXS5nZXRfaWRlbnRpdHkoKTtcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA+PC9sYWJlbD5cbiAgICAgICAgICB9XG4gICAgICAgID48L2JveD5cbiAgICAgIH1cbiAgICA+PC9ib3g+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFRpbWUoKSB7XG4gIHJldHVybiAoXG4gICAgPGJveFxuICAgICAgY2xhc3NOYW1lPVwibm9ybWFsX25vdGNoX3RpbWVcIlxuICAgICAgY2hpbGRyZW49e1tcbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIHtiaW5kKFRpbWVTZXJ2aWNlLmdldEluc3RhbmNlKCkuZ2V0VGltZSgpKS5hcygodGltZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWUuc2xpY2UoMTAsIDE2KTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9sYWJlbD4sXG4gICAgICBdfVxuICAgID48L2JveD5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm9ybWFsTm90Y2goKSB7XG4gIHJldHVybiAoXG4gICAgPGNlbnRlcmJveFxuICAgICAgY2xhc3NOYW1lPXtcIm5vcm1hbF9ub3RjaFwifVxuICAgICAgc3RhcnRXaWRnZXQ9ezxUaW1lIC8+fVxuICAgICAgY2VudGVyV2lkZ2V0PXs8bGFiZWwgbGFiZWw9e1wiSHlwcm5vdGNoXCJ9IC8+fVxuICAgICAgZW5kV2lkZ2V0PXtcbiAgICAgICAgPGJveFxuICAgICAgICAgIGNoaWxkcmVuPXtbXG4gICAgICAgICAgICA8Ym94XG4gICAgICAgICAgICAgIHZlcnRpY2FsPXt0cnVlfVxuICAgICAgICAgICAgICAvLyBjaGlsZHJlbj17WzxCbHVldG9vdGhCdXR0b24gLz4sIDxXaWZpSW5kaWNhdG9yIC8+XX1cbiAgICAgICAgICAgIC8+LFxuXG4gICAgICAgICAgICA8Ym94IHZlcnRpY2FsPXt0cnVlfSBjaGlsZHJlbj17WzxNZWRpYUluZGljYXRvciAvPl19IC8+LFxuICAgICAgICAgIF19XG4gICAgICAgIC8+XG4gICAgICB9XG4gICAgPjwvY2VudGVyYm94PlxuICApO1xufVxuIiwgImltcG9ydCB7IGJpbmQsIEJpbmRpbmcsIFZhcmlhYmxlIH0gZnJvbSBcImFzdGFsXCI7XG5pbXBvcnQgeyBOb3RjaFN0YXRlIH0gZnJvbSBcIi4vTm90Y2hTdGF0ZVwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vbG9nZ2VyL0xvZ2dlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RjaFN0YXRlVmlld01vZGVsIHtcbiAgcHJpdmF0ZSBsb2dnZXI6IExvZ2dlciA9IG5ldyBMb2dnZXIoXCJOb3RjaFN0YXRlVmlld01vZGVsXCIpO1xuICBwcml2YXRlIG5vdGNoU3RhdGU6IFZhcmlhYmxlPE5vdGNoU3RhdGU+ID0gVmFyaWFibGU8Tm90Y2hTdGF0ZT4oXG4gICAgTm90Y2hTdGF0ZS5OT1JNQUxcbiAgKTtcbiAgcHJpdmF0ZSBzdGF0ZUNoYW5nZVRpbWVvdXQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBwdWJsaWMgZ2V0Tm90Y2hTdGF0ZSgpOiBCaW5kaW5nPE5vdGNoU3RhdGU+IHtcbiAgICByZXR1cm4gYmluZCh0aGlzLm5vdGNoU3RhdGUpLmFzKCgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLm5vdGNoU3RhdGUuZ2V0KCk7XG4gICAgfSk7XG4gIH1cbiAgcHVibGljIHNldE5vdGNoU3RhdGUoc3RhdGU6IE5vdGNoU3RhdGUpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKGBTZXR0aW5nIG5vdGNoIHN0YXRlIHRvOiAke3N0YXRlfWApO1xuICAgIHRoaXMubm90Y2hTdGF0ZS5zZXQoc3RhdGUpO1xuICB9XG59XG4iLCAiaW1wb3J0IFdpcmVQbHVtYmVyVmlld01vZGVsIGZyb20gXCIuLi9XaXJlUGx1bWJlclZpZXdNb2RlbFwiO1xuXG50eXBlIFNvdW5kTXV0ZUJ1dHRvblByb3BzID0geyB3aXJlUGx1bWJlclZpZXdNb2RlbDogV2lyZVBsdW1iZXJWaWV3TW9kZWwgfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU291bmRNdXRlQnV0dG9uKHByb3BzOiBTb3VuZE11dGVCdXR0b25Qcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT17cHJvcHMud2lyZVBsdW1iZXJWaWV3TW9kZWxcbiAgICAgICAgLmdldERlZmF1bHRTcGVha2VyVm9sdW1lKClcbiAgICAgICAgLmFzKCh2b2x1bWUpID0+IHtcbiAgICAgICAgICBsZXQgY2xhc3NOYW1lID0gXCJpY29uX2J1dHRvbiB4c21hbGxcIjtcbiAgICAgICAgICByZXR1cm4gdm9sdW1lID09PSAwXG4gICAgICAgICAgICA/IChjbGFzc05hbWUgKz0gXCIgb3V0bGluZWRcIilcbiAgICAgICAgICAgIDogKGNsYXNzTmFtZSArPSBcIiBmaWxsZWRcIik7XG4gICAgICAgIH0pfVxuICAgICAgY2hpbGQ9e1xuICAgICAgICA8aWNvbiBpY29uPXtwcm9wcy53aXJlUGx1bWJlclZpZXdNb2RlbC5nZXREZWZhdWx0U3BlYWtlclZvbHVtZUljb24oKX0gLz5cbiAgICAgIH1cbiAgICAgIG9uQnV0dG9uUmVsZWFzZUV2ZW50PXsoKSA9PiB7XG4gICAgICAgIHByb3BzLndpcmVQbHVtYmVyVmlld01vZGVsLmdldERlZmF1bHRTcGVha2VyVm9sdW1lKCkuZ2V0KCkgPiAwXG4gICAgICAgICAgPyBwcm9wcy53aXJlUGx1bWJlclZpZXdNb2RlbC5tdXRlRGVmYXVsdFNwZWFrZXIoKVxuICAgICAgICAgIDogcHJvcHMud2lyZVBsdW1iZXJWaWV3TW9kZWwudW5tdXRlRGVmYXVsdFNwZWFrZXIoKTtcbiAgICAgIH19XG4gICAgLz5cbiAgKTtcbn1cbiIsICJpbXBvcnQgV2lyZVBsdW1iZXJWaWV3TW9kZWwgZnJvbSBcIi4uL1dpcmVQbHVtYmVyVmlld01vZGVsXCI7XG5pbXBvcnQgU291bmRNdXRlQnV0dG9uIGZyb20gXCIuL1NvdW5kTXV0ZUJ1dHRvblByb3BzXCI7XG5cbnR5cGUgU291bmRTbGlkZXJQcm9wcyA9IHtcbiAgaW5pdGlhbFZhbHVlPzogbnVtYmVyO1xuICB3aXJlUGx1bWJlclZpZXdNb2RlbDogV2lyZVBsdW1iZXJWaWV3TW9kZWw7XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU291bmRTbGlkZXIocHJvcHM6IFNvdW5kU2xpZGVyUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8Ym94XG4gICAgICB2ZXJ0aWNhbD17dHJ1ZX1cbiAgICAgIGNsYXNzTmFtZT1cInNvdW5kX3NsaWRlclwiXG4gICAgICBjaGlsZHJlbj17W1xuICAgICAgICA8c2xpZGVyXG4gICAgICAgICAgdmVydGljYWw9e3RydWV9XG4gICAgICAgICAgaW52ZXJ0ZWQ9e3RydWV9XG4gICAgICAgICAgbWluPXswfVxuICAgICAgICAgIG1heD17MTAwfVxuICAgICAgICAgIHZhbHVlPXtwcm9wcy5pbml0aWFsVmFsdWV9XG4gICAgICAgICAgb25EcmFnZ2VkPXsoc2VsZikgPT4ge1xuICAgICAgICAgICAgY29uc3Qgdm9sdW1lVG9TZXQgPSBzZWxmLmdldF92YWx1ZSgpIC8gMTAwO1xuICAgICAgICAgICAgcHJvcHMud2lyZVBsdW1iZXJWaWV3TW9kZWwuc2V0RGVmYXVsdFNwZWFrZXJWb2x1bWUodm9sdW1lVG9TZXQpO1xuICAgICAgICAgIH19XG4gICAgICAgIC8+LFxuICAgICAgICA8U291bmRNdXRlQnV0dG9uIHdpcmVQbHVtYmVyVmlld01vZGVsPXtwcm9wcy53aXJlUGx1bWJlclZpZXdNb2RlbH0gLz4sXG4gICAgICBdfVxuICAgIC8+XG4gICk7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQge1xuICBzb3VuZDoge1xuICAgIGJsdWV0b290aDoge1xuICAgICAgaWRsZTogXCJcdURCODBcdURDQUZcIixcbiAgICAgIGNvbm5lY3RlZDogXCJcdURCODBcdURDQjFcIixcbiAgICAgIG9mZjogXCJcdURCODBcdURDQjJcIixcbiAgICB9LFxuICB9LFxuICBiYXR0ZXJ5OiB7XG4gICAgYmx1ZXRvb3RoOiB7XG4gICAgICB0ZW46IFwiXHVEQjgyXHVERDNFXCIsXG4gICAgICB0d2VudHk6IFwiXHVEQjgyXHVERDNGXCIsXG4gICAgICB0aGlydHk6IFwiXHVEQjgyXHVERDQwXCIsXG4gICAgICBmb3J0eTogXCJcdURCODJcdURENDFcIixcbiAgICAgIGZpZnR5OiBcIlx1REI4Mlx1REQ0MlwiLFxuICAgICAgc2l4dHk6IFwiXHVEQjgyXHVERDQzXCIsXG4gICAgICBzZXZlbnR5OiBcIlx1REI4Mlx1REQ0NFwiLFxuICAgICAgZWlnaHR5OiBcIlx1REI4Mlx1REQ0NVwiLFxuICAgICAgbmluZXR5OiBcIlx1REI4Mlx1REQ0NlwiLFxuICAgICAgZnVsbDogXCJcdURCODJcdURENDhcIixcbiAgICB9LFxuICB9LFxufSBhcyBjb25zdDtcbiIsICJpbXBvcnQgeyBiaW5kLCBCaW5kaW5nIH0gZnJvbSBcImFzdGFsXCI7XG5pbXBvcnQgQmx1ZXRvb3RoIGZyb20gXCJnaTovL0FzdGFsQmx1ZXRvb3RoXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi9sb2dnZXIvTG9nZ2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJsdWV0b290aFZpZXdNb2RlbCB7XG4gIHByaXZhdGUgYmx1ZXRvb3RoOiBCbHVldG9vdGguQmx1ZXRvb3RoID0gQmx1ZXRvb3RoLmdldF9kZWZhdWx0KCk7XG4gIHByaXZhdGUgbG9nZ2VyOiBMb2dnZXIgPSBuZXcgTG9nZ2VyKHRoaXMuY29uc3RydWN0b3IubmFtZSk7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBwdWJsaWMgZ2V0RGV2aWNlcygpOiBCaW5kaW5nPEJsdWV0b290aC5EZXZpY2VbXT4ge1xuICAgIHJldHVybiBiaW5kKHRoaXMuYmx1ZXRvb3RoLCBcImRldmljZXNcIik7XG4gIH1cbiAgcHVibGljIGdldEFkYXB0ZXJzKCk6IEJpbmRpbmc8Qmx1ZXRvb3RoLkFkYXB0ZXJbXT4ge1xuICAgIHJldHVybiBiaW5kKHRoaXMuYmx1ZXRvb3RoLCBcImFkYXB0ZXJzXCIpO1xuICB9XG4gIHB1YmxpYyBnZXRJc1Bvd2VyZWQoKTogQmluZGluZzxib29sZWFuPiB7XG4gICAgcmV0dXJuIGJpbmQodGhpcy5ibHVldG9vdGgsIFwiaXNfcG93ZXJlZFwiKTtcbiAgfVxuICBwdWJsaWMgdG9nZ2xlKCk6IHZvaWQge1xuICAgIHRoaXMuYmx1ZXRvb3RoLnRvZ2dsZSgpO1xuICAgIHRoaXMubG9nZ2VyLmluZm8oXG4gICAgICBcIlRvZ2dsaW5nIGJsdWV0b290aCBzdGF0ZSB0byBcIiArIHRoaXMuZ2V0SXNQb3dlcmVkKCkuZ2V0KClcbiAgICApO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgYmluZCB9IGZyb20gXCJhc3RhbFwiO1xuaW1wb3J0IG5lcmRmb250cyBmcm9tIFwiLi4vLi4vbGliL2ljb25zL25lcmRmb250c1wiO1xuaW1wb3J0IEJsdWV0b290aFZpZXdNb2RlbCBmcm9tIFwiLi9CbHVldG9vdGhWaWV3TW9kZWxcIjtcbmltcG9ydCB7IEd0ayB9IGZyb20gXCJhc3RhbC9ndGszXCI7XG5cbmNvbnN0IGJsdWV0b290aFZpZXdNb2RlbCA9IG5ldyBCbHVldG9vdGhWaWV3TW9kZWwoKTtcblxuZnVuY3Rpb24gQmx1ZXRvb3RoVG9nZ2xlQnV0dG9uKCkge1xuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT17Ymx1ZXRvb3RoVmlld01vZGVsLmdldElzUG93ZXJlZCgpLmFzKChpc1Bvd2VyZWQpID0+IHtcbiAgICAgICAgbGV0IGNsYXNzTmFtZSA9IFwiaWNvbl9idXR0b25cIjtcbiAgICAgICAgY2xhc3NOYW1lICs9IGlzUG93ZXJlZCA/IFwiIFwiIDogXCIgb3V0bGluZWRcIjtcbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgICAgIH0pfVxuICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBibHVldG9vdGhWaWV3TW9kZWwudG9nZ2xlKCk7XG4gICAgICB9fVxuICAgICAgY2hpbGQ9e1xuICAgICAgICA8bGFiZWxcbiAgICAgICAgICBsYWJlbD17Ymx1ZXRvb3RoVmlld01vZGVsLmdldElzUG93ZXJlZCgpLmFzKChpc1Bvd2VyZWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpc1Bvd2VyZWRcbiAgICAgICAgICAgICAgPyBuZXJkZm9udHMuc291bmQuYmx1ZXRvb3RoLmlkbGVcbiAgICAgICAgICAgICAgOiBuZXJkZm9udHMuc291bmQuYmx1ZXRvb3RoLm9mZjtcbiAgICAgICAgICB9KX1cbiAgICAgICAgLz5cbiAgICAgIH1cbiAgICAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBCbHVldG9vdGhEZXZpY2VCYXR0ZXJ5TGV2ZWwoKSB7XG4gIHJldHVybiAoXG4gICAgPGJveFxuICAgICAgY2xhc3NOYW1lPVwiYmx1ZXRvb3RoX2RldmljZV9iYXR0ZXJ5X2xldmVsXCJcbiAgICAgIGNoaWxkcmVuPXtibHVldG9vdGhWaWV3TW9kZWwuZ2V0RGV2aWNlcygpLmFzKChkZXZpY2VzKSA9PiB7XG4gICAgICAgIHJldHVybiBkZXZpY2VzXG4gICAgICAgICAgLmZpbHRlcigoZGV2aWNlKSA9PiBkZXZpY2UuZ2V0X2Nvbm5lY3RlZCgpKVxuICAgICAgICAgIC5tYXAoKGRldmljZSkgPT4gKFxuICAgICAgICAgICAgPGNpcmN1bGFycHJvZ3Jlc3NcbiAgICAgICAgICAgICAgcm91bmRlZD17dHJ1ZX1cbiAgICAgICAgICAgICAgc3RhcnRBdD17MH1cbiAgICAgICAgICAgICAgZW5kQXQ9ezF9XG4gICAgICAgICAgICAgIHZhbHVlPXtiaW5kKGRldmljZSwgXCJiYXR0ZXJ5UGVyY2VudGFnZVwiKX1cbiAgICAgICAgICAgICAgY2hpbGQ9ezxpY29uIGljb249e2JpbmQoZGV2aWNlLCBcImljb25cIil9IC8+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKTtcbiAgICAgIH0pfVxuICAgIC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJsdWV0b290aFNldHRpbmdzTWVudSgpIHtcbiAgcmV0dXJuIChcbiAgICA8Ym94XG4gICAgICBjbGFzc05hbWU9XCJibHVldG9vdGhfc2V0dGluZ3NfbWVudV9jb250YWluZXJcIlxuICAgICAgY2hpbGRyZW49e1tcbiAgICAgICAgPGJveFxuICAgICAgICAgIGNsYXNzTmFtZT1cImJsdWV0b290aF9zZXR0aW5nc19tZW51XCJcbiAgICAgICAgICBjaGlsZHJlbj17W1xuICAgICAgICAgICAgPEJsdWV0b290aFRvZ2dsZUJ1dHRvbiAvPixcbiAgICAgICAgICAgIDxCbHVldG9vdGhEZXZpY2VCYXR0ZXJ5TGV2ZWwgLz4sXG4gICAgICAgICAgXX1cbiAgICAgICAgLz4sXG4gICAgICBdfVxuICAgIC8+XG4gICk7XG59XG4iLCAiaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFzdGFsL2d0azNcIjtcbmltcG9ydCBXaXJlUGx1bWJlclZpZXdNb2RlbCBmcm9tIFwiLi4vV2lyZVBsdW1iZXJWaWV3TW9kZWxcIjtcbmltcG9ydCBXcCBmcm9tIFwiZ2k6Ly9Bc3RhbFdwXCI7XG5cbmNvbnN0IGdldFNwZWFrZXJCdXR0b25DbGFzc05hbWUgPSAoXG4gIHdpcmVQbHVtYmVyVmlld01vZGVsOiBXaXJlUGx1bWJlclZpZXdNb2RlbCxcbiAgc3BlYWtlcjogV3AuRW5kcG9pbnRcbikgPT4ge1xuICByZXR1cm4gd2lyZVBsdW1iZXJWaWV3TW9kZWwuZ2V0RGVmYXVsdFNwZWFrZXIoKS5hcygoZGVmYXVsdFNwZWFrZXIpID0+IHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJvdXRwdXRfZGV2aWNlX2J1dHRvblwiO1xuICAgIGlmIChkZWZhdWx0U3BlYWtlciAmJiBkZWZhdWx0U3BlYWtlci5nZXRfaWQoKSA9PT0gc3BlYWtlci5nZXRfaWQoKSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHNlbGVjdGVkXCI7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT3V0cHV0RGV2aWNlU2VsZWN0b3IoKSB7XG4gIGNvbnN0IHdpcmVQbHVtYmVyVmlld01vZGVsID0gbmV3IFdpcmVQbHVtYmVyVmlld01vZGVsKCk7XG4gIHJldHVybiAoXG4gICAgPHNjcm9sbGFibGVcbiAgICAgIGtpbmV0aWNTY3JvbGxpbmc9e3RydWV9XG4gICAgICBib3JkZXJXaWR0aD17MH1cbiAgICAgIHNoYWRvd1R5cGU9e0d0ay5TaGFkb3dUeXBlLk5PTkV9XG4gICAgICBjbGFzc05hbWU9e1wib3V0cHV0X2RldmljZXNfc2Nyb2xsYWJsZVwifVxuICAgICAgY2hpbGQ9e1xuICAgICAgICA8Ym94XG4gICAgICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICAgICAgICBjaGlsZHJlbj17d2lyZVBsdW1iZXJWaWV3TW9kZWwuZ2V0U3BlYWtlcnMoKS5hcygoc3BlYWtlcnMpID0+IHtcbiAgICAgICAgICAgIHNwZWFrZXJzID0gc3BlYWtlcnMgPyBzcGVha2VycyA6IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHNwZWFrZXJzLm1hcCgoc3BlYWtlcikgPT4gKFxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtnZXRTcGVha2VyQnV0dG9uQ2xhc3NOYW1lKFxuICAgICAgICAgICAgICAgICAgd2lyZVBsdW1iZXJWaWV3TW9kZWwsXG4gICAgICAgICAgICAgICAgICBzcGVha2VyXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB3aXJlUGx1bWJlclZpZXdNb2RlbC5zZXREZWZhdWx0U3BlYWtlcihzcGVha2VyKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGNoaWxkPXs8bGFiZWwgbGFiZWw9e3NwZWFrZXIuZ2V0X2Rlc2NyaXB0aW9uKCkuc2xpY2UoMCwgMjApfSAvPn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkpO1xuICAgICAgICAgIH0pfVxuICAgICAgICAvPlxuICAgICAgfVxuICAgIC8+XG4gICk7XG59XG4iLCAiaW1wb3J0IHsgYmluZCB9IGZyb20gXCJhc3RhbFwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyL0xvZ2dlclwiO1xuaW1wb3J0IFdpcmVQbHVtYmVyVmlld01vZGVsIGZyb20gXCIuL1dpcmVQbHVtYmVyVmlld01vZGVsXCI7XG5pbXBvcnQgU291bmRTbGlkZXIgZnJvbSBcIi4vc3BlYWtlcl92b2x1bWUvU291bmRTbGlkZXJcIjtcbmltcG9ydCBCbHVldG9vdGhTZXR0aW5nc01lbnUgZnJvbSBcIi4vYmx1ZXRvb3RoL0JsdWV0b290aFNldHRpbmdzTWVudVwiO1xuaW1wb3J0IE91dHB1dERldmljZVNlbGVjdG9yIGZyb20gXCIuL2JsdWV0b290aC9PdXRwdXREZXZpY2VTZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTb3VuZFNldHRpbmdzTm90Y2goKSB7XG4gIGNvbnN0IHdpcmVQbHVtYmVyVmlld01vZGVsID0gbmV3IFdpcmVQbHVtYmVyVmlld01vZGVsKCk7XG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJTb3VuZFNldHRpbmdzTm90Y2hcIik7XG5cbiAgcmV0dXJuIChcbiAgICA8Ym94XG4gICAgICBjbGFzc05hbWU9XCJzb3VuZF9zZXR0aW5nc19ub3RjaFwiXG4gICAgICBjaGlsZD17XG4gICAgICAgIDxib3hcbiAgICAgICAgICBjaGlsZHJlbj17W1xuICAgICAgICAgICAgPFNvdW5kU2xpZGVyXG4gICAgICAgICAgICAgIHdpcmVQbHVtYmVyVmlld01vZGVsPXt3aXJlUGx1bWJlclZpZXdNb2RlbH1cbiAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlPXtcbiAgICAgICAgICAgICAgICB3aXJlUGx1bWJlclZpZXdNb2RlbC5nZXREZWZhdWx0U3BlYWtlclZvbHVtZSgpLmdldCgpICogMTAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8+LFxuICAgICAgICAgICAgPE91dHB1dERldmljZVNlbGVjdG9yIC8+LFxuICAgICAgICAgICAgPEJsdWV0b290aFNldHRpbmdzTWVudSAvPixcbiAgICAgICAgICBdfVxuICAgICAgICAvPlxuICAgICAgfVxuICAgIC8+XG4gICk7XG59XG4iLCAiaW1wb3J0IHsgQXBwLCBBc3RhbCwgR2RrIH0gZnJvbSBcImFzdGFsL2d0azNcIjtcbmltcG9ydCBFeHBhbmRlZE5vdGNoIGZyb20gXCIuL25vdGNoL2V4cGFuZGVkL0V4cGFuZGVkTm90Y2hcIjtcbmltcG9ydCBOb3JtYWxOb3RjaCBmcm9tIFwiLi9ub3RjaC9ub3JtYWwvTm9ybWFsTm90Y2hcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlci9Mb2dnZXJcIjtcbmltcG9ydCBOb3RjaFN0YXRlVmlld01vZGVsIGZyb20gXCIuLi9ub3RjaC9zdGF0ZS9Ob3RjaFN0YXRlVmlld01vZGVsXCI7XG5pbXBvcnQgeyBOb3RjaFN0YXRlIH0gZnJvbSBcIi4uL25vdGNoL3N0YXRlL05vdGNoU3RhdGVcIjtcbmltcG9ydCBOb3RpZmllZE5vdGNoIGZyb20gXCIuL25vdGNoL25vdGlmaWNhdGlvbi9Ob3RpZmllZE5vdGNoXCI7XG5pbXBvcnQgU291bmRTZXR0aW5nc05vdGNoIGZyb20gXCIuLi9zb3VuZC9Tb3VuZFNldHRpbmdzTm90Y2hcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSHlwcm5vdGNoKGdka21vbml0b3I6IEdkay5Nb25pdG9yKSB7XG4gIGNvbnN0IG5vdGNoU3RhdGVWaWV3TW9kZWwgPSBuZXcgTm90Y2hTdGF0ZVZpZXdNb2RlbCgpO1xuICBjb25zdCBsb2dnZXI6IExvZ2dlciA9IG5ldyBMb2dnZXIoXCJIeXBybm90Y2hcIik7XG5cbiAgcmV0dXJuIChcbiAgICA8d2luZG93XG4gICAgICBjbGFzc05hbWU9XCJoeXBybm90Y2hcIlxuICAgICAgbmFtZXNwYWNlPVwiaHlwcm5vdGNoXCJcbiAgICAgIGdka21vbml0b3I9e2dka21vbml0b3J9XG4gICAgICBhbmNob3I9e0FzdGFsLldpbmRvd0FuY2hvci5UT1B9XG4gICAgICBleGNsdXNpdml0eT17QXN0YWwuRXhjbHVzaXZpdHkuSUdOT1JFfVxuICAgICAgYXBwbGljYXRpb249e0FwcH1cbiAgICAgIGNoaWxkPXtcbiAgICAgICAgPGNlbnRlcmJveFxuICAgICAgICAgIGNlbnRlcldpZGdldD17XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQnV0dG9uUHJlc3NFdmVudD17KCkgPT4ge1xuICAgICAgICAgICAgICAgIG5vdGNoU3RhdGVWaWV3TW9kZWwuZ2V0Tm90Y2hTdGF0ZSgpLmdldCgpID09PSBOb3RjaFN0YXRlLk5PUk1BTFxuICAgICAgICAgICAgICAgICAgPyBub3RjaFN0YXRlVmlld01vZGVsLnNldE5vdGNoU3RhdGUoTm90Y2hTdGF0ZS5IT1ZFUkVEKVxuICAgICAgICAgICAgICAgICAgOiBub3RjaFN0YXRlVmlld01vZGVsLnNldE5vdGNoU3RhdGUoTm90Y2hTdGF0ZS5OT1JNQUwpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjbGFzc05hbWU9e25vdGNoU3RhdGVWaWV3TW9kZWxcbiAgICAgICAgICAgICAgICAuZ2V0Tm90Y2hTdGF0ZSgpXG4gICAgICAgICAgICAgICAgLmFzKChub3RjaFN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICBsZXQgY2xhc3NlcyA9IFwiaHlwcm5vdGNoLWJ1dHRvbi1hcmVhXCI7XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vdGNoU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RjaFN0YXRlLkhPVkVSRUQ6XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyArPSBcIiBleHBhbmRlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIE5vdGNoU3RhdGUuU09VTkRfU0VUVElOR1M6XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyArPSBcIiBzb3VuZF9zZXR0aW5nc1wiO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIE5vdGNoU3RhdGUuTk9STUFMOlxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gXCIgbm9ybWFsXCI7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICBjaGlsZD17bm90Y2hTdGF0ZVZpZXdNb2RlbC5nZXROb3RjaFN0YXRlKCkuYXMoKG5vdGNoU3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vdGNoU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgTm90Y2hTdGF0ZS5TT1VORF9TRVRUSU5HUzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxTb3VuZFNldHRpbmdzTm90Y2ggLz47XG4gICAgICAgICAgICAgICAgICBjYXNlIE5vdGNoU3RhdGUuSE9WRVJFRDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICA8RXhwYW5kZWROb3RjaFxuICAgICAgICAgICAgICAgICAgICAgICAgbm90Y2hTdGF0ZVZpZXdNb2RlbD17bm90Y2hTdGF0ZVZpZXdNb2RlbH1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgY2FzZSBOb3RjaFN0YXRlLk5PUk1BTDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxOb3JtYWxOb3RjaCAvPjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICB9XG4gICAgICAgIC8+XG4gICAgICB9XG4gICAgLz5cbiAgKTtcbn1cbiIsICJpbXBvcnQgeyBiaW5kLCBCaW5kaW5nLCBWYXJpYWJsZSB9IGZyb20gXCJhc3RhbFwiO1xuaW1wb3J0IEh5cHJsYW5kIGZyb20gXCJnaTovL0FzdGFsSHlwcmxhbmRcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uL2xvZ2dlci9Mb2dnZXJcIjtcbmltcG9ydCB7IEdkayB9IGZyb20gXCJhc3RhbC9ndGszXCI7XG5cbmV4cG9ydCBjbGFzcyBXb3Jrc3BhY2VWaWV3TW9kZWwge1xuICBwcml2YXRlIGh5cHJsYW5kID0gSHlwcmxhbmQuZ2V0X2RlZmF1bHQoKTtcbiAgcHJpdmF0ZSBsb2dnZXI6IExvZ2dlciA9IG5ldyBMb2dnZXIoXCJXb3Jrc3BhY2VWaWV3TW9kZWxcIik7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiV29ya3NwYWNlVmlld01vZGVsXCIpO1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFwiV29ya3NwYWNlVmlld01vZGVsIGNyZWF0ZWRcIik7XG4gIH1cblxuICBwdWJsaWMgZ2V0V29ya3NwYWNlcygpOiBCaW5kaW5nPEh5cHJsYW5kLldvcmtzcGFjZVtdPiB7XG4gICAgcmV0dXJuIGJpbmQodGhpcy5oeXBybGFuZCwgXCJ3b3Jrc3BhY2VzXCIpLmFzKCgpID0+IHtcbiAgICAgIGNvbnN0IHdvcmtzcGFjZXMgPSB0aGlzLmh5cHJsYW5kXG4gICAgICAgIC5nZXRfd29ya3NwYWNlcygpXG4gICAgICAgIC5zb3J0KChhOiBIeXBybGFuZC5Xb3Jrc3BhY2UsIGI6IEh5cHJsYW5kLldvcmtzcGFjZSkgPT4ge1xuICAgICAgICAgIHJldHVybiBhLmdldF9pZCgpIC0gYi5nZXRfaWQoKTtcbiAgICAgICAgfSk7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgXCJIeXBybGFuZCB3b3Jrc3BhY2VzIHVwZGF0ZWQgdG86IFwiLFxuICAgICAgICB3b3Jrc3BhY2VzXG4gICAgICAgICAgLm1hcCgod29ya3NwYWNlOiBIeXBybGFuZC5Xb3Jrc3BhY2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB3b3Jrc3BhY2UuZ2V0X25hbWUoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50b1N0cmluZygpXG4gICAgICApO1xuICAgICAgaWYgKHdvcmtzcGFjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJObyB3b3Jrc3BhY2VzIGZvdW5kIGluIEh5cHJsYW5kXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdvcmtzcGFjZXM7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Rm9jdXNlZFdvcmtzcGFjZSgpOiBCaW5kaW5nPEh5cHJsYW5kLldvcmtzcGFjZT4ge1xuICAgIHJldHVybiBiaW5kKHRoaXMuaHlwcmxhbmQsIFwiZm9jdXNlZF93b3Jrc3BhY2VcIik7XG4gIH1cblxuICBwdWJsaWMgc3dpdGNoVG9Xb3Jrc3BhY2Uod29ya3NwYWNlSWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICghd29ya3NwYWNlSWQpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFwiSW52YWxpZCB3b3Jrc3BhY2UgSUQgcHJvdmlkZWQgZm9yIHN3aXRjaGluZ1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuaHlwcmxhbmQuZ2V0X2ZvY3VzZWRfd29ya3NwYWNlKCkuZ2V0X2lkKCkgPT09IHdvcmtzcGFjZUlkKSB7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgYFdvcmtzcGFjZSAke3dvcmtzcGFjZUlkfSBpcyBhbHJlYWR5IGZvY3VzZWQsIG5vIGFjdGlvbiB0YWtlbmBcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLmluZm8oYFN3aXRjaGluZyB0byB3b3Jrc3BhY2UgJHt3b3Jrc3BhY2VJZH1gKTtcbiAgICB0aGlzLmh5cHJsYW5kLmdldF93b3Jrc3BhY2Uod29ya3NwYWNlSWQpLmZvY3VzKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UGVyTW9uaXRvcldvcmtzcGFjZXMoXG4gICAgZ2RrTW9uaXRvcjogR2RrLk1vbml0b3JcbiAgKTogQmluZGluZzxIeXBybGFuZC5Xb3Jrc3BhY2VbXT4ge1xuICAgIHJldHVybiB0aGlzLmdldFdvcmtzcGFjZXMoKS5hcygod29ya3NwYWNlczogSHlwcmxhbmQuV29ya3NwYWNlW10pID0+IHtcbiAgICAgIGNvbnN0IGh5cHJsYW5kTW9uaXRvcnMgPSB0aGlzLmh5cHJsYW5kLmdldF9tb25pdG9ycygpO1xuICAgICAgY29uc3QgdGFyZ2V0SHlwcmxhbmRNb25pdG9yID0gaHlwcmxhbmRNb25pdG9ycy5maW5kKChtb25pdG9yKSA9PiB7XG4gICAgICAgIGNvbnN0IGdka0Rpc3BsYXlOYW1lID0gZ2RrTW9uaXRvci5nZXRfZGlzcGxheSgpPy5nZXRfbmFtZSgpIHx8IFwiXCI7XG4gICAgICAgIGNvbnN0IGh5cHJsYW5kRGlzcGxheU5hbWUgPSBtb25pdG9yLmdldF9uYW1lKCkgfHwgXCJcIjtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZ2RrRGlzcGxheU5hbWUgJiZcbiAgICAgICAgICBoeXBybGFuZERpc3BsYXlOYW1lICYmXG4gICAgICAgICAgZ2RrRGlzcGxheU5hbWUgPT09IGh5cHJsYW5kRGlzcGxheU5hbWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIG1vbml0b3IuZ2V0X21ha2UoKSA9PT0gZ2RrTW9uaXRvci5nZXRfbWFudWZhY3R1cmVyKCkgJiZcbiAgICAgICAgICBtb25pdG9yLmdldF9tb2RlbCgpID09PSBnZGtNb25pdG9yLmdldF9tb2RlbCgpICYmXG4gICAgICAgICAgbW9uaXRvci5nZXRfeCgpID09PSBnZGtNb25pdG9yLmdldF9nZW9tZXRyeSgpLnggJiZcbiAgICAgICAgICBtb25pdG9yLmdldF95KCkgPT09IGdka01vbml0b3IuZ2V0X2dlb21ldHJ5KCkueVxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghdGFyZ2V0SHlwcmxhbmRNb25pdG9yKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oXG4gICAgICAgICAgXCJDb3VsZCBub3QgZmluZCBtYXRjaGluZyBIeXBybGFuZCBtb25pdG9yIGZvciBHREsgbW9uaXRvclwiXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdvcmtzcGFjZXMuZmlsdGVyKFxuICAgICAgICAod29ya3NwYWNlOiBIeXBybGFuZC5Xb3Jrc3BhY2UpID0+XG4gICAgICAgICAgd29ya3NwYWNlLmdldF9tb25pdG9yKCkuZ2V0X2lkKCkgPT09IHRhcmdldEh5cHJsYW5kTW9uaXRvci5nZXRfaWQoKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuIiwgImltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uL2xvZ2dlci9Mb2dnZXJcIjtcbmltcG9ydCB7IFdvcmtzcGFjZVZpZXdNb2RlbCB9IGZyb20gXCIuL1dvcmtzcGFjZVZpZXdNb2RlbFwiO1xuaW1wb3J0IEh5cHJsYW5kIGZyb20gXCJnaTovL0FzdGFsSHlwcmxhbmRcIjtcbmltcG9ydCB7IEdkaywgR3RrIH0gZnJvbSBcImFzdGFsL2d0azNcIjtcbmltcG9ydCB7IEljb25Tb3VyY2UgfSBmcm9tIFwiLi4vLi4vbGliL2ljb25zL0ljb25VdGlsc1wiO1xuaW1wb3J0IHsgYmluZCB9IGZyb20gXCJhc3RhbFwiO1xuXG5jb25zdCBnZXRDbGllbnRJY29uTmFtZSA9IChjbGllbnQ6IEh5cHJsYW5kLkNsaWVudCk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IGNsaWVudC5nZXRfY2xhc3MoKS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBqZXRicmFpbnNQcmVmaXggPSBcImpldGJyYWlucy1cIjtcbiAgaWYgKGNsYXNzTmFtZS5zdGFydHNXaXRoKGpldGJyYWluc1ByZWZpeCkpIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lLnJlcGxhY2UoamV0YnJhaW5zUHJlZml4LCBcIlwiKTtcbiAgfVxuICByZXR1cm4gY2xhc3NOYW1lO1xufTtcblxuaW50ZXJmYWNlIFdvcmtzcGFjZXNCYXJQcm9wcyB7XG4gIGdka21vbml0b3I6IEdkay5Nb25pdG9yO1xufVxuXG50eXBlIFdvcmtzcGFjZUJ1dHRvblByb3BzID0ge1xuICB3b3Jrc3BhY2U6IEh5cHJsYW5kLldvcmtzcGFjZTtcbiAgd29ya3NwYWNlVmlld01vZGVsOiBXb3Jrc3BhY2VWaWV3TW9kZWw7XG4gIGxvZ2dlcjogTG9nZ2VyO1xufTtcblxuZnVuY3Rpb24gV29ya3NwYWNlQnV0dG9uKHtcbiAgd29ya3NwYWNlLFxuICB3b3Jrc3BhY2VWaWV3TW9kZWwsXG4gIGxvZ2dlcixcbn06IFdvcmtzcGFjZUJ1dHRvblByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3NOYW1lPXt3b3Jrc3BhY2VWaWV3TW9kZWxcbiAgICAgICAgLmdldEZvY3VzZWRXb3Jrc3BhY2UoKVxuICAgICAgICAuYXMoKGZvY3VzZWRXb3Jrc3BhY2U6IEh5cHJsYW5kLldvcmtzcGFjZSkgPT4ge1xuICAgICAgICAgIGxldCB3b3Jrc3BhY2VDbGFzcyA9IFwid29ya3NwYWNlX2J1dHRvblwiO1xuICAgICAgICAgIGlmIChmb2N1c2VkV29ya3NwYWNlLmdldF9pZCgpID09PSB3b3Jrc3BhY2UuZ2V0X2lkKCkpIHtcbiAgICAgICAgICAgIHdvcmtzcGFjZUNsYXNzICs9IFwiIGZvY3VzZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHdvcmtzcGFjZUNsYXNzO1xuICAgICAgICB9KX1cbiAgICAgIGNoaWxkPXtcbiAgICAgICAgd29ya3NwYWNlLmdldF9jbGllbnRzKCkubGVuZ3RoID09PSAwID8gKFxuICAgICAgICAgIDxsYWJlbCBsYWJlbD17d29ya3NwYWNlLmdldF9uYW1lKCl9IC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPGJveFxuICAgICAgICAgICAgY2hpbGRyZW49e2JpbmQod29ya3NwYWNlLCBcImNsaWVudHNcIikuYXMoKGNsaWVudHMpID0+XG4gICAgICAgICAgICAgIGNsaWVudHMubWFwKChjbGllbnQpID0+IDxpY29uIGljb249e2dldENsaWVudEljb25OYW1lKGNsaWVudCl9IC8+KVxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAvPlxuICAgICAgICApXG4gICAgICB9XG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICBgUHJlc3NpbmcgYnV0dG9uIGZvciB3b3Jrc3BhY2UgJHt3b3Jrc3BhY2UuZ2V0X2lkKCl9LCBzd2l0Y2hpbmcgdG8gaXRgXG4gICAgICAgICk7XG4gICAgICAgIHdvcmtzcGFjZVZpZXdNb2RlbC5zd2l0Y2hUb1dvcmtzcGFjZSh3b3Jrc3BhY2UuZ2V0X2lkKCkpO1xuICAgICAgfX1cbiAgICAvPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXb3Jrc3BhY2VzQmFyKHByb3BzOiBXb3Jrc3BhY2VzQmFyUHJvcHMpIHtcbiAgY29uc3Qgd29ya3NwYWNlVmlld01vZGVsOiBXb3Jrc3BhY2VWaWV3TW9kZWwgPSBuZXcgV29ya3NwYWNlVmlld01vZGVsKCk7XG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJXb3Jrc3BhY2VzQmFyXCIpO1xuICBjb25zdCBnZGttb25pdG9yOiBHZGsuTW9uaXRvciA9IHByb3BzLmdka21vbml0b3I7XG5cbiAgbG9nZ2VyLmRlYnVnKFxuICAgIGBXb3Jrc3BhY2VzQmFyIGNyZWF0ZWQgb24gbW9uaXRvciAke2dka21vbml0b3IuZ2V0X21hbnVmYWN0dXJlcigpfWBcbiAgKTtcblxuICBjb25zdCB3b3Jrc3BhY2VzQmluZGluZyA9IGdka21vbml0b3IuZ2V0X21vZGVsKClcbiAgICA/IHdvcmtzcGFjZVZpZXdNb2RlbC5nZXRQZXJNb25pdG9yV29ya3NwYWNlcyhnZGttb25pdG9yKVxuICAgIDogd29ya3NwYWNlVmlld01vZGVsLmdldFdvcmtzcGFjZXMoKTtcblxuICByZXR1cm4gKFxuICAgIDxib3hcbiAgICAgIGhhbGlnbj17R3RrLkFsaWduLlNUQVJUfVxuICAgICAgdmFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG4gICAgICBjbGFzc05hbWU9XCJ3b3Jrc3BhY2VzX2Jhcl9jb250YWluZXJcIlxuICAgICAgY2hpbGQ9e1xuICAgICAgICA8Ym94XG4gICAgICAgICAgY2xhc3NOYW1lPXtcIndvcmtzcGFjZXNfYmFyXCJ9XG4gICAgICAgICAgY2hpbGQ9e3dvcmtzcGFjZXNCaW5kaW5nLmFzKCh3b3Jrc3BhY2VzOiBIeXBybGFuZC5Xb3Jrc3BhY2VbXSkgPT4gKFxuICAgICAgICAgICAgPGJveFxuICAgICAgICAgICAgICBjaGlsZHJlbj17d29ya3NwYWNlcy5tYXAoKHdvcmtzcGFjZTogSHlwcmxhbmQuV29ya3NwYWNlKSA9PiAoXG4gICAgICAgICAgICAgICAgPFdvcmtzcGFjZUJ1dHRvblxuICAgICAgICAgICAgICAgICAgd29ya3NwYWNlPXt3b3Jrc3BhY2V9XG4gICAgICAgICAgICAgICAgICB3b3Jrc3BhY2VWaWV3TW9kZWw9e3dvcmtzcGFjZVZpZXdNb2RlbH1cbiAgICAgICAgICAgICAgICAgIGxvZ2dlcj17bG9nZ2VyfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgLz5cbiAgICAgIH1cbiAgICAvPlxuICApO1xufVxuIiwgImltcG9ydCB7IEFzdGFsLCBHZGsgfSBmcm9tIFwiYXN0YWwvZ3RrM1wiO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBhIHByaW1hcnkgY2xpY2tcbiAqIEBwYXJhbSBldmVudCAtIFRoZSBjbGljayBldmVudCB0byBjaGVja1xuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgYSBwcmltYXJ5IGNsaWNrLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGNvbnN0IGlzUHJpbWFyeUNsaWNrID0gKGV2ZW50OiBBc3RhbC5DbGlja0V2ZW50KTogYm9vbGVhbiA9PlxuICBldmVudC5idXR0b24gPT09IEdkay5CVVRUT05fUFJJTUFSWTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgYSBzZWNvbmRhcnkgY2xpY2tcbiAqIEBwYXJhbSBldmVudCAtIFRoZSBjbGljayBldmVudCB0byBjaGVja1xuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgYSBzZWNvbmRhcnkgY2xpY2ssIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgY29uc3QgaXNTZWNvbmRhcnlDbGljayA9IChldmVudDogQXN0YWwuQ2xpY2tFdmVudCk6IGJvb2xlYW4gPT5cbiAgZXZlbnQuYnV0dG9uID09PSBHZGsuQlVUVE9OX1NFQ09OREFSWTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgYSBtaWRkbGUgY2xpY2tcbiAqIEBwYXJhbSBldmVudCAtIFRoZSBjbGljayBldmVudCB0byBjaGVja1xuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgYSBtaWRkbGUgY2xpY2ssIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgY29uc3QgaXNNaWRkbGVDbGljayA9IChldmVudDogQXN0YWwuQ2xpY2tFdmVudCk6IGJvb2xlYW4gPT5cbiAgZXZlbnQuYnV0dG9uID09PSBHZGsuQlVUVE9OX01JRERMRTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgYSBzY3JvbGwgdXBcbiAqIEBwYXJhbSBldmVudCAtIFRoZSBzY3JvbGwgZXZlbnQgdG8gY2hlY2tcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGV2ZW50IGlzIGEgc2Nyb2xsIHVwLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGNvbnN0IGlzU2Nyb2xsVXAgPSAoZXZlbnQ6IEdkay5FdmVudCk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCBbZGlyZWN0aW9uU3VjY2VzcywgZGlyZWN0aW9uXSA9IGV2ZW50LmdldF9zY3JvbGxfZGlyZWN0aW9uKCk7XG4gIGNvbnN0IFtkZWx0YVN1Y2Nlc3MsICwgeVNjcm9sbF0gPSBldmVudC5nZXRfc2Nyb2xsX2RlbHRhcygpO1xuXG4gIGlmIChkaXJlY3Rpb25TdWNjZXNzICYmIGRpcmVjdGlvbiA9PT0gR2RrLlNjcm9sbERpcmVjdGlvbi5VUCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGRlbHRhU3VjY2VzcyAmJiB5U2Nyb2xsIDwgMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgYSBzY3JvbGwgZG93blxuICogQHBhcmFtIGV2ZW50IC0gVGhlIHNjcm9sbCBldmVudCB0byBjaGVja1xuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgYSBzY3JvbGwgZG93biwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBjb25zdCBpc1Njcm9sbERvd24gPSAoZXZlbnQ6IEdkay5FdmVudCk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCBbZGlyZWN0aW9uU3VjY2VzcywgZGlyZWN0aW9uXSA9IGV2ZW50LmdldF9zY3JvbGxfZGlyZWN0aW9uKCk7XG4gIGNvbnN0IFtkZWx0YVN1Y2Nlc3MsICwgeVNjcm9sbF0gPSBldmVudC5nZXRfc2Nyb2xsX2RlbHRhcygpO1xuXG4gIGlmIChkaXJlY3Rpb25TdWNjZXNzICYmIGRpcmVjdGlvbiA9PT0gR2RrLlNjcm9sbERpcmVjdGlvbi5ET1dOKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoZGVsdGFTdWNjZXNzICYmIHlTY3JvbGwgPiAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwgImltcG9ydCB7IGJpbmQsIEdpbywgVmFyaWFibGUgfSBmcm9tIFwiYXN0YWxcIjtcbmltcG9ydCB7IFRyYXlJdGVtTm90Y2hQcm9wcyB9IGZyb20gXCIuL1N5c3RlbVRyYXlcIjtcbmltcG9ydCB7IEdkaywgR3RrIH0gZnJvbSBcImFzdGFsL2d0azNcIjtcbmltcG9ydCB7XG4gIGlzTWlkZGxlQ2xpY2ssXG4gIGlzUHJpbWFyeUNsaWNrLFxuICBpc1NlY29uZGFyeUNsaWNrLFxufSBmcm9tIFwiLi4vbGliL2V2ZW50cy9tb3VzZVwiO1xuaW1wb3J0IEFzdGFsVHJheSBmcm9tIFwiZ2k6Ly9Bc3RhbFRyYXlcIjtcblxuZnVuY3Rpb24gZ2V0VHJheUl0ZW1Ob3RjaENsYXNzTmFtZShmb2N1c2VkSXRlbTogYW55IHwgbnVsbCk6IHN0cmluZyB7XG4gIHJldHVybiBcIlwiO1xufVxuXG5pbnRlcmZhY2UgTWVudUVudHJ5UHJvcHMge1xuICBpdGVtOiBBc3RhbFRyYXkuVHJheUl0ZW07XG59XG5cbmNvbnN0IE1lbnVFbnRyeSA9ICh7IGl0ZW0gfTogTWVudUVudHJ5UHJvcHMpOiBKU1guRWxlbWVudCA9PiB7XG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3NOYW1lPVwic3lzdGVtX3RyYXlfYmFyX25vdGNoX2VudHJ5XCJcbiAgICAgIGN1cnNvcj1cInBvaW50ZXJcIlxuICAgICAgb25DbGljaz17KHNlbGYsIGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChpc1ByaW1hcnlDbGljayhldmVudCkpIHtcbiAgICAgICAgICBpdGVtLmFjdGl2YXRlKDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU2Vjb25kYXJ5Q2xpY2soZXZlbnQpKSB7XG4gICAgICAgICAgY29uc3QgbWVudU1vZGVsID0gaXRlbS5nZXRfbWVudV9tb2RlbCgpO1xuICAgICAgICAgIGNvbnN0IGFjdGlvbkdyb3VwID0gaXRlbS5nZXRfYWN0aW9uX2dyb3VwKCk7XG5cbiAgICAgICAgICBpZiAobWVudU1vZGVsICYmIGFjdGlvbkdyb3VwKSB7XG4gICAgICAgICAgICBjb25zdCBtZW51ID0gR3RrLk1lbnUubmV3X2Zyb21fbW9kZWwobWVudU1vZGVsKTtcbiAgICAgICAgICAgIG1lbnUuaW5zZXJ0X2FjdGlvbl9ncm91cChcImRidXNtZW51XCIsIGFjdGlvbkdyb3VwKTtcbiAgICAgICAgICAgIG1lbnUucG9wdXBfYXRfd2lkZ2V0KFxuICAgICAgICAgICAgICBzZWxmLFxuICAgICAgICAgICAgICBHZGsuR3Jhdml0eS5OT1JUSF9XRVNULFxuICAgICAgICAgICAgICBHZGsuR3Jhdml0eS5TT1VUSF9XRVNULFxuICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfX1cbiAgICAgIGNoaWxkPXtcbiAgICAgICAgPGJveFxuICAgICAgICAgIGNsYXNzTmFtZT1cInN5c3RlbV90cmF5X2Jhcl9ub3RjaF9jb250ZW50XCJcbiAgICAgICAgICB2ZXJ0aWNhbD17dHJ1ZX1cbiAgICAgICAgICBjaGlsZHJlbj17W1xuICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgIGxhYmVsPXtiaW5kKGl0ZW0sIFwidGl0bGVcIikuYXMoXG4gICAgICAgICAgICAgICAgKHRpdGxlKSA9PiB0aXRsZSB8fCBpdGVtLmdldF90b29sdGlwKCk/LnRpdGxlIHx8IFwiXCJcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIC8+LFxuICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgIGxhYmVsPXtiaW5kKGl0ZW0sIFwidG9vbHRpcFwiKS5hcyhcbiAgICAgICAgICAgICAgICAodG9vbHRpcCkgPT4gdG9vbHRpcD8uZGVzY3JpcHRpb24gfHwgXCJcIlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz4sXG4gICAgICAgICAgXX1cbiAgICAgICAgLz5cbiAgICAgIH1cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVHJheUl0ZW1Ob3RjaChwcm9wczogVHJheUl0ZW1Ob3RjaFByb3BzKSB7XG4gIGNvbnN0IHsgc3lzdGVtVHJheVZpZXdNb2RlbCB9ID0gcHJvcHM7XG4gIGNvbnN0IGZvY3VzZWRJdGVtID0gc3lzdGVtVHJheVZpZXdNb2RlbC5nZXRGb2N1c2VkVHJheUl0ZW0oKTtcblxuICByZXR1cm4gKFxuICAgIDxib3hcbiAgICAgIGNsYXNzTmFtZT17XCJzeXN0ZW1fdHJheV9iYXJfbm90Y2ggZm9jdXNlZFwifVxuICAgICAgdmVydGljYWw9e3RydWV9XG4gICAgICBjaGlsZD17Zm9jdXNlZEl0ZW0uYXMoKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKCFpdGVtIHx8ICFpdGVtLmdldF9tZW51X21vZGVsKCkpIHtcbiAgICAgICAgICByZXR1cm4gPGJveCAvPjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gPE1lbnVFbnRyeSBpdGVtPXtpdGVtfSAvPjtcbiAgICAgIH0pfVxuICAgIC8+XG4gICk7XG59XG4iLCAiaW1wb3J0IFN5c3RlbVRyYXlTdGF0ZVZpZXdNb2RlbCBmcm9tIFwiLi9TeXN0ZW1UcmF5U3RhdGVWaWV3TW9kZWxcIjtcbmltcG9ydCBUcmF5IGZyb20gXCJnaTovL0FzdGFsVHJheVwiO1xuaW1wb3J0IHsgU3lzdGVtVHJheVZpZXdNb2RlbCB9IGZyb20gXCIuL1N5c3RlbVRyYXlWaWV3TW9kZWxcIjtcbmltcG9ydCB7IGJpbmQsIEJpbmRpbmcsIHRpbWVvdXQgfSBmcm9tIFwiYXN0YWxcIjtcblxuY29uc3QgU1lTVEVNX1RSQVlfSVRFTV9USU1FT1VUID0gMTAwMDA7IC8vIDMwIHNlY29uZHNcblxuZnVuY3Rpb24gZ2V0VHJheUl0ZW1DbGFzcyhcbiAgdmlld01vZGVsOiBTeXN0ZW1UcmF5Vmlld01vZGVsLFxuICBpdGVtOiBhbnlcbik6IEJpbmRpbmc8c3RyaW5nPiB7XG4gIGNvbnN0IGV4aXN0aW5nVHJheUl0ZW1zID0gdmlld01vZGVsXG4gICAgLmdldFRyYXlJdGVtcygpXG4gICAgLmdldCgpXG4gICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5nZXRfdGl0bGUoKSk7XG4gIHJldHVybiB2aWV3TW9kZWwuZ2V0Rm9jdXNlZFRyYXlJdGVtKCkuYXMoKGZvY3VzZWQpID0+IHtcbiAgICBsZXQgY2xhc3NlcyA9IFwic3lzdGVtX3RyYXlfaXRlbVwiO1xuICAgIGlmIChmb2N1c2VkICYmIGZvY3VzZWQuZ2V0X3RpdGxlKCkgPT09IGl0ZW0uZ2V0X3RpdGxlKCkpIHtcbiAgICAgIGNsYXNzZXMgKz0gXCIgYWN0aXZlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsYXNzZXMgKz0gXCIgbm90Y2hcIjtcbiAgICB9XG4gICAgaWYgKGV4aXN0aW5nVHJheUl0ZW1zLmluZGV4T2YoaXRlbSkgPT09IDApIHtcbiAgICAgIGNsYXNzZXMgKz0gXCIgZmlyc3RcIjtcbiAgICB9XG4gICAgaWYgKGV4aXN0aW5nVHJheUl0ZW1zLmluZGV4T2YoaXRlbSkgPT09IGV4aXN0aW5nVHJheUl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgIGNsYXNzZXMgKz0gXCIgbGFzdFwiO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc2VzO1xuICB9KTtcbn1cblxuY29uc3Qgb25TeXN0ZW1UcmF5SXRlbUNsaWNrZWQgPSAoXG4gIHN5c3RlbVRyYXlWaWV3TW9kZWw6IFN5c3RlbVRyYXlWaWV3TW9kZWwsXG4gIGl0ZW06IFRyYXkuVHJheUl0ZW1cbikgPT4ge1xuICBjb25zdCBjdXJyZW50bHlGb2N1c2VkID0gc3lzdGVtVHJheVZpZXdNb2RlbC5nZXRGb2N1c2VkVHJheUl0ZW0oKS5nZXQoKTtcbiAgaWYgKGN1cnJlbnRseUZvY3VzZWQgJiYgY3VycmVudGx5Rm9jdXNlZC5nZXRfdGl0bGUoKSA9PT0gaXRlbS5nZXRfdGl0bGUoKSkge1xuICAgIHN5c3RlbVRyYXlWaWV3TW9kZWwuc2V0Rm9jdXNlZFRyYXlJdGVtKG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHN5c3RlbVRyYXlWaWV3TW9kZWwuc2V0Rm9jdXNlZFRyYXlJdGVtKGl0ZW0pO1xuICAgIHRpbWVvdXQoU1lTVEVNX1RSQVlfSVRFTV9USU1FT1VULCAoKSA9PlxuICAgICAgc3lzdGVtVHJheVZpZXdNb2RlbC5zZXRGb2N1c2VkVHJheUl0ZW0obnVsbClcbiAgICApO1xuICB9XG59O1xuXG50eXBlIFN5c3RlbVRyYXlJdGVtQnV0dG9uUHJvcHMgPSB7XG4gIHN5c3RlbVRyYXlWaWV3TW9kZWw6IFN5c3RlbVRyYXlWaWV3TW9kZWw7XG4gIGl0ZW06IFRyYXkuVHJheUl0ZW07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTeXN0ZW1UcmF5SXRlbUJ1dHRvbihwcm9wczogU3lzdGVtVHJheUl0ZW1CdXR0b25Qcm9wcykge1xuICBjb25zdCB7IHN5c3RlbVRyYXlWaWV3TW9kZWwsIGl0ZW0gfSA9IHByb3BzO1xuICBjb25zdCB0cmF5SXRlbXNJZE5hbWVzTWFwOiBSZWNvcmQ8c3RyaW5nLCB7IGljb246IHN0cmluZyB9PiA9IHt9O1xuICB0cmF5SXRlbXNJZE5hbWVzTWFwW1wiY2hyb21lX3N0YXR1c19pY29uXzFcIl0gPSB7XG4gICAgaWNvbjogXCJzbGFja1wiLFxuICB9O1xuICB0cmF5SXRlbXNJZE5hbWVzTWFwW1wib3BlbnJnYlwiXSA9IHtcbiAgICBpY29uOiBcIm9wZW5yZ2JcIixcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGN1cnNvcj17XCJwb2ludGVyXCJ9XG4gICAgICBoZXhwYW5kPXt0cnVlfVxuICAgICAgY2xhc3NOYW1lPXtnZXRUcmF5SXRlbUNsYXNzKHN5c3RlbVRyYXlWaWV3TW9kZWwsIGl0ZW0pfVxuICAgICAgb25CdXR0b25QcmVzc0V2ZW50PXsoKSA9PlxuICAgICAgICBvblN5c3RlbVRyYXlJdGVtQ2xpY2tlZChzeXN0ZW1UcmF5Vmlld01vZGVsLCBpdGVtKVxuICAgICAgfVxuICAgICAgb25Ib3Zlcj17KCkgPT4gc3lzdGVtVHJheVZpZXdNb2RlbC5yZWZyZXNoVHJheUl0ZW0oaXRlbSl9XG4gICAgICBjaGlsZD17XG4gICAgICAgIDxpY29uXG4gICAgICAgICAgaWNvbj17YmluZChpdGVtLCBcImljb25OYW1lXCIpLmFzKChpY29uTmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpY29uTmFtZSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJheUl0ZW1zSWROYW1lc01hcFtpdGVtLmdldF9pZCgpXT8uaWNvbiB8fCBcInVua25vd25cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpY29uTmFtZTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgLz5cbiAgICAgIH1cbiAgICAvPlxuICApO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgZXhwcmVzc2l2ZToge1xuICAgIGZhc3Rfc3BhdGlhbDoge1xuICAgICAgY3VydmU6IFwiY3ViaWMtYmV6aWVyKDAuNDIsIDEuNjcsIDAuMjEsIDAuOSlcIixcbiAgICAgIGR1cmF0aW9uOiAzNTAsXG4gICAgfSxcbiAgICBkZWZhdWx0X3NwYXRpYWw6IHtcbiAgICAgIGN1cnZlOiBcImN1YmljLWJlemllcigwLjM4LCAxLjIxLCAwLjIyLCAxKVwiLFxuICAgICAgZHVyYXRpb246IDUwMCxcbiAgICB9LFxuICAgIHNsb3dfc3BhdGlhbDoge1xuICAgICAgY3VydmU6IFwiY3ViaWMtYmV6aWVyKDAuMzksIDEuMjksIDAuMzUsIDAuOTgpXCIsXG4gICAgICBkdXJhdGlvbjogNjUwLFxuICAgIH0sXG4gICAgZmFzdF9lZmZlY3RzOiB7XG4gICAgICBjdXJ2ZTogXCJjdWJpYy1iZXppZXIoMC4zMSwgMC45NCwgMC4zNCwgMSlcIixcbiAgICAgIGR1cmF0aW9uOiAxNTAsXG4gICAgfSxcbiAgICBkZWZhdWx0X2VmZmVjdHM6IHtcbiAgICAgIGN1cnZlOiBcImN1YmljLWJlemllcigwLjM0LCAwLjgsIDAuMzQsIDEpXCIsXG4gICAgICBkdXJhdGlvbjogMjAwLFxuICAgIH0sXG4gICAgc2xvd19lZmZlY3RzOiB7XG4gICAgICBjdXJ2ZTogXCJjdWJpYy1iZXppZXIoMC4zNCwgMC44OCwgMC4zNCwgMSlcIixcbiAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgfSxcbiAgfSxcbn07XG4iLCAiaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyL0xvZ2dlclwiO1xuaW1wb3J0IHsgU3lzdGVtVHJheVZpZXdNb2RlbCB9IGZyb20gXCIuL1N5c3RlbVRyYXlWaWV3TW9kZWxcIjtcbmltcG9ydCB7IGJpbmQgfSBmcm9tIFwiYXN0YWxcIjtcbmltcG9ydCBUcmF5SXRlbU5vdGNoIGZyb20gXCIuL1RyYXlJdGVtTm90Y2hcIjtcbmltcG9ydCB7IEd0ayB9IGZyb20gXCJhc3RhbC9ndGszXCI7XG5pbXBvcnQgU3lzdGVtVHJheUl0ZW1CdXR0b24gZnJvbSBcIi4vU3lzdGVtVHJheUl0ZW1CdXR0b25cIjtcbmltcG9ydCBhbmltYXRpb25zIGZyb20gXCIuLi9saWIvbWF0ZXJpYWwvYW5pbWF0aW9uc1wiO1xuXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiVHJheUl0ZW1Ob3RjaFwiKTtcbmV4cG9ydCB0eXBlIFRyYXlJdGVtTm90Y2hQcm9wcyA9IHtcbiAgc3lzdGVtVHJheVZpZXdNb2RlbDogU3lzdGVtVHJheVZpZXdNb2RlbDtcbn07XG4vKiBcInN5c3RlbV90cmF5X2NvbnN0YW50X2JhY2tncm91bmRcIiAqL1xuXG5leHBvcnQgdHlwZSBTeXN0ZW1UcmF5UHJvcHMgPSB7IHN5c3RlbVRyYXlWaWV3TW9kZWw6IFN5c3RlbVRyYXlWaWV3TW9kZWwgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIFN5c3RlbVRyYXkoeyBzeXN0ZW1UcmF5Vmlld01vZGVsIH06IFN5c3RlbVRyYXlQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxib3hcbiAgICAgIGNsYXNzTmFtZT17YmluZChzeXN0ZW1UcmF5Vmlld01vZGVsLmdldEZvY3VzZWRUcmF5SXRlbSgpKS5hcyhcbiAgICAgICAgKGZvY3VzZWRUcmF5SXRlbSkgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBcInN5c3RlbV90cmF5X2NvbnN0YW50X2JhY2tncm91bmRcIiArXG4gICAgICAgICAgICAoZm9jdXNlZFRyYXlJdGVtID8gXCIgZm9jdXNlZFwiIDogXCJcIilcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICApfVxuICAgICAgY2hpbGQ9e1xuICAgICAgICA8Ym94XG4gICAgICAgICAgY2xhc3NOYW1lPXtiaW5kKHN5c3RlbVRyYXlWaWV3TW9kZWwuZ2V0Rm9jdXNlZFRyYXlJdGVtKCkpLmFzKFxuICAgICAgICAgICAgKGZvY3VzZWRUcmF5SXRlbSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gXCJzeXN0ZW1fdHJheVwiICsgKGZvY3VzZWRUcmF5SXRlbSA/IFwiIGZvY3VzZWRcIiA6IFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICl9XG4gICAgICAgICAgdmVydGljYWw9e3RydWV9XG4gICAgICAgICAgaGFsaWduPXtHdGsuQWxpZ24uRU5EfVxuICAgICAgICAgIHZhbGlnbj17R3RrLkFsaWduLlNUQVJUfVxuICAgICAgICAgIGNoaWxkcmVuPXtbXG4gICAgICAgICAgICA8Ym94XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJzeXN0ZW1fdHJheV9pdGVtc19saXN0XCJ9XG4gICAgICAgICAgICAgIGNoaWxkcmVuPXtzeXN0ZW1UcmF5Vmlld01vZGVsXG4gICAgICAgICAgICAgICAgLmdldFRyYXlJdGVtcygpXG4gICAgICAgICAgICAgICAgLmFzKChpdGVtcykgPT5cbiAgICAgICAgICAgICAgICAgIGl0ZW1zXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uZ2V0X3RpdGxlKCkgIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgPFN5c3RlbVRyYXlJdGVtQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW1UcmF5Vmlld01vZGVsPXtzeXN0ZW1UcmF5Vmlld01vZGVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbT17aXRlbX1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPixcbiAgICAgICAgICAgIDxyZXZlYWxlclxuICAgICAgICAgICAgICB0cmFuc2l0aW9uVHlwZT17R3RrLlJldmVhbGVyVHJhbnNpdGlvblR5cGUuU0xJREVfRE9XTn1cbiAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uPXthbmltYXRpb25zLmV4cHJlc3NpdmUuZmFzdF9lZmZlY3RzLmR1cmF0aW9ufVxuICAgICAgICAgICAgICByZXZlYWxDaGlsZD17c3lzdGVtVHJheVZpZXdNb2RlbFxuICAgICAgICAgICAgICAgIC5nZXRGb2N1c2VkVHJheUl0ZW0oKVxuICAgICAgICAgICAgICAgIC5hcygoZm9jdXNlZFRyYXlJdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZm9jdXNlZFRyYXlJdGVtICE9PSBudWxsO1xuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICBjaGlsZD17XG4gICAgICAgICAgICAgICAgPFRyYXlJdGVtTm90Y2ggc3lzdGVtVHJheVZpZXdNb2RlbD17c3lzdGVtVHJheVZpZXdNb2RlbH0gLz5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz4sXG4gICAgICAgICAgXX1cbiAgICAgICAgLz5cbiAgICAgIH1cbiAgICAvPlxuICApO1xufVxuIiwgImltcG9ydCBUcmF5IGZyb20gXCJnaTovL0FzdGFsVHJheVwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyL0xvZ2dlclwiO1xuaW1wb3J0IHsgYmluZCwgQmluZGluZywgVmFyaWFibGUgfSBmcm9tIFwiYXN0YWxcIjtcblxuZXhwb3J0IGNsYXNzIFN5c3RlbVRyYXlWaWV3TW9kZWwge1xuICBwcml2YXRlIHJlYWRvbmx5IHRyYXkgPSBUcmF5LmdldF9kZWZhdWx0KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyOiBMb2dnZXIgPSBuZXcgTG9nZ2VyKHRoaXMuY29uc3RydWN0b3IubmFtZSk7XG4gIHByaXZhdGUgZm9jdXNlZFRyYXlJdGVtOiBWYXJpYWJsZTxUcmF5LlRyYXlJdGVtIHwgbnVsbD4gPSBuZXcgVmFyaWFibGUobnVsbCk7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIHB1YmxpYyBnZXRUcmF5SXRlbXMoKTogQmluZGluZzxUcmF5LlRyYXlJdGVtW10+IHtcbiAgICByZXR1cm4gYmluZCh0aGlzLnRyYXksIFwiaXRlbXNcIik7XG4gIH1cbiAgcHVibGljIGdldEZvY3VzZWRUcmF5SXRlbSgpOiBCaW5kaW5nPFRyYXkuVHJheUl0ZW0gfCBudWxsPiB7XG4gICAgcmV0dXJuIGJpbmQodGhpcy5mb2N1c2VkVHJheUl0ZW0pO1xuICB9XG5cbiAgcHVibGljIHNldEZvY3VzZWRUcmF5SXRlbShpdGVtOiBUcmF5LlRyYXlJdGVtIHwgbnVsbCk6IHZvaWQge1xuICAgIGlmICghaXRlbSkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXCJDbGVhcmluZyBmb2N1c2VkIHRyYXkgaXRlbVwiKTtcbiAgICAgIHRoaXMuZm9jdXNlZFRyYXlJdGVtLnNldChudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXCJGb2N1c2luZyB0cmF5IGl0ZW1cIiwgaXRlbS5nZXRfdGl0bGUoKSk7XG4gICAgICB0aGlzLmZvY3VzZWRUcmF5SXRlbS5zZXQoaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlZnJlc2hUcmF5SXRlbShpdGVtOiBUcmF5LlRyYXlJdGVtKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICBcIlJlZnJlc2hpbmcgdHJheSBpdGVtXCIsXG4gICAgICBpdGVtLmdldF90aXRsZSgpLFxuICAgICAgaXRlbS5nZXRfdG9vbHRpcCgpPy5kZXNjcmlwdGlvbixcbiAgICAgIGl0ZW0uZ2V0X2ljb25fbmFtZSgpXG4gICAgKTtcbiAgICBpdGVtLmFib3V0X3RvX3Nob3coKTtcbiAgfVxufVxuIiwgImltcG9ydCBCYXR0ZXJ5IGZyb20gXCJnaTovL0FzdGFsQmF0dGVyeVwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vbG9nZ2VyL0xvZ2dlclwiO1xuaW1wb3J0IHsgYmluZCwgQmluZGluZyB9IGZyb20gXCJhc3RhbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXR0ZXJ5Vmlld01vZGVsIHtcbiAgICBwcml2YXRlIGxvZ2dlciA9IG5ldyBMb2dnZXIodGhpcy5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICBwcml2YXRlIGJhdHRlcnkgPSBCYXR0ZXJ5LmdldF9kZWZhdWx0KCk7XG5cbiAgICBwdWJsaWMgZ2V0QmF0dGVyeVBlcmNlbnRhZ2UoKTogQmluZGluZzxudW1iZXI+IHtcbiAgICAgICAgcmV0dXJuIGJpbmQodGhpcy5iYXR0ZXJ5LCBcInBlcmNlbnRhZ2VcIik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEJhdHRlcnlTdGF0ZSgpOiBCaW5kaW5nPEJhdHRlcnkuU3RhdGU+IHtcbiAgICAgICAgcmV0dXJuIGJpbmQodGhpcy5iYXR0ZXJ5LCBcInN0YXRlXCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRCYXR0ZXJ5SWNvbigpOiBCaW5kaW5nPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gYmluZCh0aGlzLmJhdHRlcnksIFwiaWNvbl9uYW1lXCIpO1xuICAgIH1cblxufSIsICJpbXBvcnQgeyBBc3RhbCwgR2RrLCBHdGsgfSBmcm9tIFwiYXN0YWwvZ3RrM1wiO1xuaW1wb3J0IEJhdHRlcnlWaWV3TW9kZWwgZnJvbSBcIi4vQmF0dGVyeVZpZXdNb2RlbFwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vbG9nZ2VyL0xvZ2dlclwiO1xuaW1wb3J0IHsgSWNvblNvdXJjZSB9IGZyb20gXCIuLi8uLi9saWIvaWNvbnMvSWNvblV0aWxzXCI7XG5cbnR5cGUgQmF0dGVyeUxldmVsQ2lyY3VsYXJQcm9ncmVzc1Byb3BzID0geyBiYXR0ZXJ5Vmlld01vZGVsOiBCYXR0ZXJ5Vmlld01vZGVsIH07XG5cbmZ1bmN0aW9uIEJhdHRlcnlMZXZlbENpcmN1bGFyUHJvZ3Jlc3MoXG4gIHByb3BzOiBCYXR0ZXJ5TGV2ZWxDaXJjdWxhclByb2dyZXNzUHJvcHNcbikge1xuICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiQmF0dGVyeUxldmVsQ2lyY3VsYXJQcm9ncmVzc1wiKTtcbiAgY29uc3QgYmF0dGVyeVZpZXdNb2RlbCA9IG5ldyBCYXR0ZXJ5Vmlld01vZGVsKCk7XG4gIHJldHVybiAoXG4gICAgPGNpcmN1bGFycHJvZ3Jlc3NcbiAgICAgIGNsYXNzTmFtZT17XCJiYXR0ZXJ5X2xldmVsX2NpcmN1bGFyX3Byb2dyZXNzXCJ9XG4gICAgICByb3VuZGVkPXt0cnVlfVxuICAgICAgdmFsdWU9e2JhdHRlcnlWaWV3TW9kZWwuZ2V0QmF0dGVyeVBlcmNlbnRhZ2UoKS5hcygocGVyY2VudGFnZSkgPT4ge1xuICAgICAgICBsb2dnZXIuZGVidWcoYEJhdHRlcnkgcGVyY2VudGFnZTogJHtwZXJjZW50YWdlfWApO1xuICAgICAgICByZXR1cm4gcGVyY2VudGFnZTtcbiAgICAgIH0pfVxuICAgICAgc3RhcnRBdD17MH1cbiAgICAgIGVuZEF0PXsxfVxuICAgICAgY2hpbGQ9ezxpY29uIGljb249e2JhdHRlcnlWaWV3TW9kZWwuZ2V0QmF0dGVyeUljb24oKX0gLz59XG4gICAgLz5cbiAgKTtcbn1cblxudHlwZSBTeXN0ZW1EZXRhaWxzQmFyTW9kdWxlUHJvcHMgPSB7XG4gIG1vbml0b3I6IEdkay5Nb25pdG9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3lzdGVtRGV0YWlsc0Jhck1vZHVsZShcbiAgcHJvcHM6IFN5c3RlbURldGFpbHNCYXJNb2R1bGVQcm9wc1xuKSB7XG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJTeXN0ZW1EZXRhaWxzXCIpO1xuICBjb25zdCBiYXR0ZXJ5Vmlld01vZGVsID0gbmV3IEJhdHRlcnlWaWV3TW9kZWwoKTtcbiAgbG9nZ2VyLmRlYnVnKFwiU3lzdGVtRGV0YWlscyBjb21wb25lbnQgY3JlYXRlZFwiKTtcbiAgcmV0dXJuIChcbiAgICA8Ym94XG4gICAgICB2YWxpZ249e0d0ay5BbGlnbi5TVEFSVH1cbiAgICAgIGhhbGlnbj17R3RrLkFsaWduLkVORH1cbiAgICAgIGNsYXNzTmFtZT1cInN5c3RlbV9kZXRhaWxzX2NvbnRhaW5lclwiXG4gICAgICBjaGlsZHJlbj17W1xuICAgICAgICA8QmF0dGVyeUxldmVsQ2lyY3VsYXJQcm9ncmVzcyBiYXR0ZXJ5Vmlld01vZGVsPXtiYXR0ZXJ5Vmlld01vZGVsfSAvPixcbiAgICAgIF19XG4gICAgLz5cbiAgKTtcbn1cbiIsICJpbXBvcnQgQXN0YWxOb3RpZmQgZnJvbSBcImdpOi8vQXN0YWxOb3RpZmQ/dmVyc2lvbj0wLjFcIjtcbmltcG9ydCBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249My4wXCI7XG5pbXBvcnQgeyBOb05ld05vdGlmaWNhdGlvblBvcHVwIH0gZnJvbSBcIi4vTm9OZXdOb3RpZmljYXRpb25Qb3B1cFwiO1xuXG50eXBlIE5ld05vdGlmaWNhdGlvblBvcHVwUHJvcHMgPSB7XG4gIG5vdGlmaWNhdGlvbjogQXN0YWxOb3RpZmQuTm90aWZpY2F0aW9uIHwgbnVsbDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBOZXdOb3RpZmljYXRpb25Qb3B1cChwcm9wczogTmV3Tm90aWZpY2F0aW9uUG9wdXBQcm9wcykge1xuICBjb25zdCBub3RpZmljYXRpb24gPSBwcm9wcy5ub3RpZmljYXRpb247XG4gIGlmICghbm90aWZpY2F0aW9uKSB7XG4gICAgcmV0dXJuIDxOb05ld05vdGlmaWNhdGlvblBvcHVwIC8+O1xuICB9XG4gIHJldHVybiAoXG4gICAgPGJveFxuICAgICAgY2xhc3NOYW1lPXtcIm5ld19ub3RpZmljYXRpb25fY2FyZF9wcmV2aWV3XCJ9XG4gICAgICB2ZXhwYW5kPXt0cnVlfVxuICAgICAgaGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgdmFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgY2hpbGQ9e1xuICAgICAgICA8Ym94XG4gICAgICAgICAgY2hpbGRyZW49e1tcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5nZXRfYXBwX2ljb24oKSA/IChcbiAgICAgICAgICAgICAgPGljb24gaWNvbj17bm90aWZpY2F0aW9uLmdldF9hcHBfaWNvbigpfSAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPGljb24gaWNvbj17XCJub3RpZmljYXRpb25cIn0gLz5cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICA8bGFiZWwgbGFiZWw9e25vdGlmaWNhdGlvbi5nZXRfc3VtbWFyeSgpfSAvPixcbiAgICAgICAgICBdfVxuICAgICAgICAvPlxuICAgICAgfVxuICAgIC8+XG4gICk7XG59XG4iLCAiaW1wb3J0IEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj0zLjBcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvblZpZXdNb2RlbCB9IGZyb20gXCIuL05vdGlmaWNhdGlvblZpZXdNb2RlbFwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyL0xvZ2dlclwiO1xuY29uc3QgTk9USUZJQ0FUSU9OU19SRUFEX0RORF9JQ09OID0gXCJpbmRpY2F0b3Itbm90aWZpY2F0aW9uLXJlYWQtZG5kXCI7XG5jb25zdCBOT1RJRklDQVRJT05TX1VOUkVBRF9ETkRfSUNPTiA9IFwiaW5kaWNhdG9yLW5vdGlmaWNhdGlvbi11bnJlYWQtZG5kXCI7XG5cbmNvbnN0IE5PVElGSUNBVElPTlNfUkVBRF9JQ09OID0gXCJpbmRpY2F0b3Itbm90aWZpY2F0aW9uLXJlYWRcIjtcbmNvbnN0IE5PVElGSUNBVElPTlNfVU5SRUFEX0lDT04gPSBcImluZGljYXRvci1ub3RpZmljYXRpb24tdW5yZWFkXCI7XG5jb25zdCBub3RpZmljYXRpb25WaWV3TW9kZWwgPSBuZXcgTm90aWZpY2F0aW9uVmlld01vZGVsKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBOb05ld05vdGlmaWNhdGlvblBvcHVwKCkge1xuICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiTm9OZXdOb3RpZmljYXRpb25Qb3B1cFwiKTtcbiAgcmV0dXJuIChcbiAgICA8Ym94XG4gICAgICBjbGFzc05hbWU9e1wibm9fbm90aWZpY2F0aW9uXCJ9XG4gICAgICB2ZXhwYW5kPXt0cnVlfVxuICAgICAgaGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgdmFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgY2hpbGQ9e25vdGlmaWNhdGlvblZpZXdNb2RlbC5nZXRJc0RvTm90RGlzdHVyYigpLmFzKChpc0RvTm90RGlzdHVyYikgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGN1cnNvcj17XCJwb2ludGVyXCJ9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpY29uX2J1dHRvbiB4c21hbGwgXCJcbiAgICAgICAgICAgIG9uQnV0dG9uUHJlc3NFdmVudD17KCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBpc0RvTm90RGlzdHVyYiA9IG5vdGlmaWNhdGlvblZpZXdNb2RlbFxuICAgICAgICAgICAgICAgIC5nZXRJc0RvTm90RGlzdHVyYigpXG4gICAgICAgICAgICAgICAgLmdldCgpO1xuICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYFRvZ2dsaW5nIERvIE5vdCBEaXN0dXJiIG1vZGU6ICR7IWlzRG9Ob3REaXN0dXJifWApO1xuICAgICAgICAgICAgICBub3RpZmljYXRpb25WaWV3TW9kZWwuc2V0RG9Ob3REaXN0dXJiKCFpc0RvTm90RGlzdHVyYik7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgY2hpbGQ9e1xuICAgICAgICAgICAgICA8aWNvblxuICAgICAgICAgICAgICAgIGljb249e25vdGlmaWNhdGlvblZpZXdNb2RlbFxuICAgICAgICAgICAgICAgICAgLmdldElzRG9Ob3REaXN0dXJiKClcbiAgICAgICAgICAgICAgICAgIC5hcygoaXNEb05vdERpc3R1cmIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uc0NvdW50ID0gbm90aWZpY2F0aW9uVmlld01vZGVsXG4gICAgICAgICAgICAgICAgICAgICAgLmdldE5vdGlmaWNhdGlvbnMoKVxuICAgICAgICAgICAgICAgICAgICAgIC5nZXQoKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RvTm90RGlzdHVyYikge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub3RpZmljYXRpb25zQ291bnQgPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICA/IE5PVElGSUNBVElPTlNfVU5SRUFEX0RORF9JQ09OXG4gICAgICAgICAgICAgICAgICAgICAgICA6IE5PVElGSUNBVElPTlNfUkVBRF9ETkRfSUNPTjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm90aWZpY2F0aW9uc0NvdW50ID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBOT1RJRklDQVRJT05TX1VOUkVBRF9JQ09OXG4gICAgICAgICAgICAgICAgICAgICAgICA6IE5PVElGSUNBVElPTlNfUkVBRF9JQ09OO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfSl9XG4gICAgLz5cbiAgKTtcbn1cbiIsICJpbXBvcnQgeyBiaW5kLCBCaW5kaW5nLCBWYXJpYWJsZSB9IGZyb20gXCJhc3RhbFwiO1xuaW1wb3J0IE5vdGlmZCBmcm9tIFwiZ2k6Ly9Bc3RhbE5vdGlmZFwiO1xuXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uVmlld01vZGVsIHtcbiAgcHJpdmF0ZSBub3RpZmlkID0gTm90aWZkLmdldF9kZWZhdWx0KCk7XG4gIHByaXZhdGUgaGFzTmV3Tm90aWZpY2F0aW9uID0gVmFyaWFibGU8Ym9vbGVhbj4oZmFsc2UpO1xuICBwcml2YXRlIHRyYW5zaXRpb25UaW1lcjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ub3RpZmlkLmNvbm5lY3QoXCJub3RpZmllZFwiLCAoKSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZU5ld05vdGlmaWNhdGlvbigpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVOZXdOb3RpZmljYXRpb24oKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvblRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50cmFuc2l0aW9uVGltZXIpO1xuICAgIH1cbiAgICB0aGlzLmhhc05ld05vdGlmaWNhdGlvbi5zZXQodHJ1ZSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Tm90aWZpY2F0aW9ucyhcbiAgICBzb3J0OiBib29sZWFuIHwgbnVsbCA9IHRydWVcbiAgKTogQmluZGluZzxOb3RpZmQuTm90aWZpY2F0aW9uW10+IHtcbiAgICByZXR1cm4gYmluZCh0aGlzLm5vdGlmaWQsIFwibm90aWZpY2F0aW9uc1wiKS5hcygobm90aWZpY2F0aW9ucykgPT4ge1xuICAgICAgaWYgKHNvcnQpIHtcbiAgICAgICAgbm90aWZpY2F0aW9ucyA9IG5vdGlmaWNhdGlvbnMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgIHJldHVybiBiLmdldF90aW1lKCkgLSBhLmdldF90aW1lKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdGlmaWNhdGlvbnM7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgY29ubmVjdE5ld05vdGlmaWNhdGlvbkNhbGxiYWNrKFxuICAgIGNhbGxiYWNrOiAoc2VsZjogTm90aWZkLk5vdGlmZCwgaWQ6IG51bWJlcikgPT4gdm9pZFxuICApIHtcbiAgICB0aGlzLm5vdGlmaWQuY29ubmVjdChcIm5vdGlmaWVkXCIsIChzZWxmLCBpZCkgPT4ge1xuICAgICAgY2FsbGJhY2soc2VsZiwgaWQpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldE5vdGlmaWNhdGlvbkJ5SWQoaWQ6IG51bWJlcik6IE5vdGlmZC5Ob3RpZmljYXRpb24ge1xuICAgIHJldHVybiB0aGlzLm5vdGlmaWQuZ2V0X25vdGlmaWNhdGlvbihpZCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0SXNEb05vdERpc3R1cmIoKTogQmluZGluZzxib29sZWFuPiB7XG4gICAgcmV0dXJuIGJpbmQodGhpcy5ub3RpZmlkLCBcImRvbnREaXN0dXJiXCIpO1xuICB9XG5cbiAgcHVibGljIHNldERvTm90RGlzdHVyYih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMubm90aWZpZC5zZXRfZG9udF9kaXN0dXJiKHZhbHVlKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IFZhcmlhYmxlLCB0aW1lb3V0LCBCaW5kaW5nLCBiaW5kIH0gZnJvbSBcImFzdGFsXCI7XG5pbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTMuMFwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyL0xvZ2dlclwiO1xuaW1wb3J0IHsgTmV3Tm90aWZpY2F0aW9uUG9wdXAgfSBmcm9tIFwiLi9OZXdOb3RpZmljYXRpb25Qb3B1cFwiO1xuaW1wb3J0IHsgTm9OZXdOb3RpZmljYXRpb25Qb3B1cCB9IGZyb20gXCIuL05vTmV3Tm90aWZpY2F0aW9uUG9wdXBcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvblZpZXdNb2RlbCB9IGZyb20gXCIuL05vdGlmaWNhdGlvblZpZXdNb2RlbFwiO1xuXG5leHBvcnQgY2xhc3MgTmV3Tm90aWZpY2F0aW9uVmlld01vZGVsIHtcbiAgcHJpdmF0ZSBub3RpZmljYXRpb25WaWV3TW9kZWwgPSBuZXcgTm90aWZpY2F0aW9uVmlld01vZGVsKCk7XG4gIHByaXZhdGUgcmVzdWx0aW5nV2lkZ2V0VmFyaWFibGUgPSBuZXcgVmFyaWFibGU8R3RrLldpZGdldD4obnVsbCEpO1xuICBwcml2YXRlIGxvZ2dlciA9IG5ldyBMb2dnZXIodGhpcy5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgcHJpdmF0ZSBzdGF0aWMgREVGQVVMVF9OT1RJRklDQVRJT05fVElNRU9VVCA9IDUwMDA7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVzdWx0aW5nV2lkZ2V0VmFyaWFibGUuc2V0KDxOb05ld05vdGlmaWNhdGlvblBvcHVwIC8+KTtcbiAgICB0aGlzLnNldHVwTmV3Tm90aWZpY2F0aW9uTGlzdGVuZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0dXBOZXdOb3RpZmljYXRpb25MaXN0ZW5lcigpOiB2b2lkIHtcbiAgICB0aGlzLm5vdGlmaWNhdGlvblZpZXdNb2RlbC5jb25uZWN0TmV3Tm90aWZpY2F0aW9uQ2FsbGJhY2soXG4gICAgICAobm90aWZpY2F0aW9uQ2xpZW50LCBub3RpZmljYXRpb25JZCkgPT4ge1xuICAgICAgICBjb25zdCBub3RpZmljYXRpb24gPVxuICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uVmlld01vZGVsLmdldE5vdGlmaWNhdGlvbkJ5SWQobm90aWZpY2F0aW9uSWQpO1xuICAgICAgICB0aGlzLnJlc3VsdGluZ1dpZGdldFZhcmlhYmxlLnNldChcbiAgICAgICAgICA8TmV3Tm90aWZpY2F0aW9uUG9wdXAgbm90aWZpY2F0aW9uPXtub3RpZmljYXRpb259IC8+XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvblRpbWVvdXQgPVxuICAgICAgICAgIG5vdGlmaWNhdGlvbi5nZXRfZXhwaXJlX3RpbWVvdXQoKSA+IDBcbiAgICAgICAgICAgID8gbm90aWZpY2F0aW9uLmdldF9leHBpcmVfdGltZW91dCgpXG4gICAgICAgICAgICA6IE5ld05vdGlmaWNhdGlvblZpZXdNb2RlbC5ERUZBVUxUX05PVElGSUNBVElPTl9USU1FT1VUO1xuXG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgICAgIGBOZXcgbm90aWZpY2F0aW9uIHJlY2VpdmVkOiAke25vdGlmaWNhdGlvbi5nZXRfYXBwX25hbWUoKX0gd2l0aCB0aW1lb3V0ICR7bm90aWZpY2F0aW9uVGltZW91dH1gXG4gICAgICAgICk7XG4gICAgICAgIHRpbWVvdXQobm90aWZpY2F0aW9uVGltZW91dCwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMucmVzdWx0aW5nV2lkZ2V0VmFyaWFibGUuc2V0KDxOb05ld05vdGlmaWNhdGlvblBvcHVwIC8+KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuICBwdWJsaWMgZ2V0UmVzdWx0aW5nV2lkZ2V0KCk6IEJpbmRpbmc8R3RrLldpZGdldD4ge1xuICAgIHJldHVybiBiaW5kKHRoaXMucmVzdWx0aW5nV2lkZ2V0VmFyaWFibGUpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFzdGFsL2d0azNcIjtcbmltcG9ydCB7IE5ld05vdGlmaWNhdGlvblZpZXdNb2RlbCB9IGZyb20gXCIuL05ld05vdGlmaWNhdGlvblZpZXdNb2RlbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gTm90aWZpY2F0aW9uc1BvcHVwKCkge1xuICBjb25zdCBuZXdOb3RpZmljYXRpb25WaWV3TW9kZWwgPSBuZXcgTmV3Tm90aWZpY2F0aW9uVmlld01vZGVsKCk7XG4gIHJldHVybiAoXG4gICAgPGJveFxuICAgICAgY2xhc3NOYW1lPXtcIm5vdGlmaWNhdGlvbl9iYXJcIn1cbiAgICAgIHZleHBhbmQ9e3RydWV9XG4gICAgICBoYWxpZ249e0d0ay5BbGlnbi5FTkR9XG4gICAgICB2YWxpZ249e0d0ay5BbGlnbi5TVEFSVH1cbiAgICAgIGNoaWxkPXtuZXdOb3RpZmljYXRpb25WaWV3TW9kZWwuZ2V0UmVzdWx0aW5nV2lkZ2V0KCl9XG4gICAgLz5cbiAgKTtcbn1cbiIsICJpbXBvcnQgeyBBc3RhbCwgQXBwLCBHZGssIEd0ayB9IGZyb20gXCJhc3RhbC9ndGszXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi9sb2dnZXIvTG9nZ2VyXCI7XG5pbXBvcnQgV29ya3NwYWNlc0JhciBmcm9tIFwiLi4vLi4vaHlwcmxhbmQvd29ya3NwYWNlcy9Xb3Jrc3BhY2VzQmFyXCI7XG5pbXBvcnQgeyBTeXN0ZW1UcmF5IH0gZnJvbSBcIi4uLy4uL3RyYXkvU3lzdGVtVHJheVwiO1xuaW1wb3J0IHsgU3lzdGVtVHJheVZpZXdNb2RlbCB9IGZyb20gXCIuLi8uLi90cmF5L1N5c3RlbVRyYXlWaWV3TW9kZWxcIjtcbmltcG9ydCBTeXN0ZW1EZXRhaWxzQmFyTW9kdWxlIGZyb20gXCIuLi8uLi9zeXN0ZW1fc3RhdHMvYmF0dGVyeS9TeXN0ZW1EZXRhaWxzXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zUG9wdXAgfSBmcm9tIFwiLi4vLi4vbm90aWZpY2F0aW9uL05vdGlmaWNhdGlvblwiO1xuXG4vLyBDb21wb25lbnRpemUgdGhlIGJhciBsYXlvdXQgc3RydWN0dXJlXG50eXBlIEJhckxheW91dFByb3BzID0ge1xuICBzdGFydFdpZGdldD86IEpTWC5FbGVtZW50O1xuICBjZW50ZXJXaWRnZXQ/OiBKU1guRWxlbWVudDtcbiAgZW5kV2lkZ2V0PzogSlNYLkVsZW1lbnQ7XG59O1xuXG4vLyBDb21wb25lbnRpemUgdGhlIHJpZ2h0IHNpZGUgYmFyIGNvbXBvbmVudHNcbnR5cGUgUmlnaHRTaWRlQmFyUHJvcHMgPSB7XG4gIGdka21vbml0b3I6IEdkay5Nb25pdG9yO1xuICBzeXN0ZW1UcmF5Vmlld01vZGVsOiBTeXN0ZW1UcmF5Vmlld01vZGVsO1xufTtcblxuZnVuY3Rpb24gUmlnaHRTaWRlQmFyKHsgZ2RrbW9uaXRvciwgc3lzdGVtVHJheVZpZXdNb2RlbCB9OiBSaWdodFNpZGVCYXJQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxib3hcbiAgICAgIHZlcnRpY2FsPXtmYWxzZX1cbiAgICAgIGhleHBhbmQ9e3RydWV9XG4gICAgICBoYWxpZ249e0d0ay5BbGlnbi5FTkR9XG4gICAgICBjaGlsZHJlbj17W1xuICAgICAgICA8U3lzdGVtRGV0YWlsc0Jhck1vZHVsZSBtb25pdG9yPXtnZGttb25pdG9yfSAvPixcbiAgICAgICAgPFN5c3RlbVRyYXkgc3lzdGVtVHJheVZpZXdNb2RlbD17c3lzdGVtVHJheVZpZXdNb2RlbH0gLz4sXG4gICAgICAgIDxOb3RpZmljYXRpb25zUG9wdXAgZ2RrbW9uaXRvcj17Z2RrbW9uaXRvcn0gLz4sXG4gICAgICBdfVxuICAgIC8+XG4gICk7XG59XG5cbi8vIENvbXBvbmVudGl6ZSB0aGUgbGVmdCBzaWRlIGJhciBjb21wb25lbnRzXG50eXBlIExlZnRTaWRlQmFyUHJvcHMgPSB7XG4gIGdka21vbml0b3I6IEdkay5Nb25pdG9yO1xufTtcblxuZnVuY3Rpb24gTGVmdFNpZGVCYXIoeyBnZGttb25pdG9yIH06IExlZnRTaWRlQmFyUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8Ym94IHZleHBhbmQ9e3RydWV9IGNoaWxkPXs8V29ya3NwYWNlc0JhciBnZGttb25pdG9yPXtnZGttb25pdG9yfSAvPn0gLz5cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFN5c3RlbVRyYXlXaW5kb3coZ2RrbW9uaXRvcjogR2RrLk1vbml0b3IpIHtcbiAgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIlN5c3RlbVRyYXlcIik7XG4gIGxvZ2dlci5kZWJ1ZyhcIlN5c3RlbVRyYXkgd2luZG93IGNyZWF0ZWRcIik7XG5cbiAgY29uc3Qgc3lzdGVtVHJheVZpZXdNb2RlbCA9IG5ldyBTeXN0ZW1UcmF5Vmlld01vZGVsKCk7XG4gIHJldHVybiAoXG4gICAgPHdpbmRvd1xuICAgICAgY2xhc3NOYW1lPVwic3lzdGVtX3RyYXlfd2luZG93XCJcbiAgICAgIGdka21vbml0b3I9e2dka21vbml0b3J9XG4gICAgICBhbmNob3I9e0FzdGFsLldpbmRvd0FuY2hvci5UT1AgfCBBc3RhbC5XaW5kb3dBbmNob3IuUklHSFR9XG4gICAgICBleGNsdXNpdml0eT17QXN0YWwuRXhjbHVzaXZpdHkuSUdOT1JFfVxuICAgICAgY2hpbGQ9ezxTeXN0ZW1UcmF5IHN5c3RlbVRyYXlWaWV3TW9kZWw9e3N5c3RlbVRyYXlWaWV3TW9kZWx9IC8+fVxuICAgIC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJhcihnZGttb25pdG9yOiBHZGsuTW9uaXRvcikge1xuICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiQmFyXCIpO1xuICBjb25zdCBzeXN0ZW1UcmF5Vmlld01vZGVsID0gbmV3IFN5c3RlbVRyYXlWaWV3TW9kZWwoKTtcbiAgbG9nZ2VyLmRlYnVnKFwiQmFyIHdpbmRvdyBjcmVhdGVkXCIpO1xuXG4gIHJldHVybiAoXG4gICAgPHdpbmRvd1xuICAgICAgY2xhc3NOYW1lPVwiaHlwcm5vdGNoX2JhclwiXG4gICAgICBuYW1lc3BhY2U9XCJoeXBybm90Y2hcIlxuICAgICAgZ2RrbW9uaXRvcj17Z2RrbW9uaXRvcn1cbiAgICAgIGFuY2hvcj17XG4gICAgICAgIEFzdGFsLldpbmRvd0FuY2hvci5UT1AgfFxuICAgICAgICBBc3RhbC5XaW5kb3dBbmNob3IuTEVGVCB8XG4gICAgICAgIEFzdGFsLldpbmRvd0FuY2hvci5SSUdIVFxuICAgICAgfVxuICAgICAgZXhjbHVzaXZpdHk9e0FzdGFsLkV4Y2x1c2l2aXR5LklHTk9SRX1cbiAgICAgIGFwcGxpY2F0aW9uPXtBcHB9XG4gICAgICBjaGlsZD17XG4gICAgICAgIDxjZW50ZXJib3hcbiAgICAgICAgICBjbGFzc05hbWU9e1wiaHlwcm5vdGNoX2Jhcl9jb250YWluZXJcIn1cbiAgICAgICAgICBzdGFydFdpZGdldD17PExlZnRTaWRlQmFyIGdka21vbml0b3I9e2dka21vbml0b3J9IC8+fVxuICAgICAgICAgIGNlbnRlcldpZGdldD17PGJveCAvPn1cbiAgICAgICAgICBlbmRXaWRnZXQ9e1xuICAgICAgICAgICAgPFJpZ2h0U2lkZUJhclxuICAgICAgICAgICAgICBnZGttb25pdG9yPXtnZGttb25pdG9yfVxuICAgICAgICAgICAgICBzeXN0ZW1UcmF5Vmlld01vZGVsPXtzeXN0ZW1UcmF5Vmlld01vZGVsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICB9XG4gICAgICAgIC8+XG4gICAgICB9XG4gICAgLz5cbiAgKTtcbn1cblxuLy8gRXhwb3J0IGNvbXBvbmVudHMgZm9yIHJldXNlXG4iLCAiaW1wb3J0IHsgQXBwLCBBc3RhbCwgR2RrIH0gZnJvbSBcImFzdGFsL2d0azNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uL2xvZ2dlci9Mb2dnZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmFyQ29udGFpbmVyQmFja2dyb3VuZChnZGttb25pdG9yOiBHZGsuTW9uaXRvcikge1xuICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiQmFyQ29udGFpbmVyQmFja2dyb3VuZFwiKTtcbiAgbG9nZ2VyLmRlYnVnKFwiQmFyQ29udGFpbmVyQmFja2dyb3VuZCB3aW5kb3cgY3JlYXRlZFwiKTtcblxuICByZXR1cm4gKFxuICAgIDx3aW5kb3dcbiAgICAgIGNsYXNzTmFtZT1cImh5cHJub3RjaFwiXG4gICAgICBuYW1lc3BhY2U9XCJoeXBybm90Y2hcIlxuICAgICAgYW5jaG9yPXtcbiAgICAgICAgQXN0YWwuV2luZG93QW5jaG9yLlRPUCB8XG4gICAgICAgIEFzdGFsLldpbmRvd0FuY2hvci5MRUZUIHxcbiAgICAgICAgQXN0YWwuV2luZG93QW5jaG9yLlJJR0hUXG4gICAgICB9XG4gICAgICBleGNsdXNpdml0eT17QXN0YWwuRXhjbHVzaXZpdHkuRVhDTFVTSVZFfVxuICAgICAgYXBwbGljYXRpb249e0FwcH1cbiAgICAgIGdka21vbml0b3I9e2dka21vbml0b3J9XG4gICAgICBjaGlsZD17PGJveCBjbGFzc05hbWU9XCJoeXBybm90Y2hfYmFyX2NvbnRhaW5lcl9iYWNrZ3JvdW5kXCIgLz59XG4gICAgLz5cbiAgKTtcbn1cbiIsICJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiYXN0YWwvZ3RrM1wiO1xuaW1wb3J0IHN0eWxlIGZyb20gXCIuL3N0eWxlL21haW4uc2Nzc1wiO1xuaW1wb3J0IEh5cHJub3RjaCBmcm9tIFwiLi9zcmMvdmlldy9IeXBybm90Y2hcIjtcbmltcG9ydCBCYXIgZnJvbSBcIi4vc3JjL3ZpZXcvYmFyL0JhclwiO1xuaW1wb3J0IEJhckNvbnRhaW5lckJhY2tncm91bmQgZnJvbSBcIi4vc3JjL3ZpZXcvYmFyL0JhckNvbnRhaW5lckJhY2tncm91bmRcIjtcblxuQXBwLnN0YXJ0KHtcbiAgY3NzOiBzdHlsZSxcbiAgbWFpbigpIHtcbiAgICBBcHAuZ2V0X21vbml0b3JzKCkubWFwKChtb25pdG9yKSA9PiB7XG4gICAgICAvLyBTeXN0ZW1EZXRhaWxzKG1vbml0b3IpO1xuICAgICAgQmFyQ29udGFpbmVyQmFja2dyb3VuZChtb25pdG9yKTtcbiAgICAgIEJhcihtb25pdG9yKTtcbiAgICAgIC8vIFdvcmtzcGFjZXMobW9uaXRvcik7XG4gICAgICAvLyBOb3RpZmljYXRpb25zV2luZG93KG1vbml0b3IpO1xuICAgICAg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YSxNQUNuQkEsT0FBTSxhQUFhLE9BQ25CQSxPQUFNLGFBQWE7QUFBQSxNQUVyQixhQUFhQSxPQUFNLFlBQVk7QUFBQSxNQUMvQixhQUFhO0FBQUEsTUFDYixPQUNFLGdCQUFBRDtBQUFBLFFBQUM7QUFBQTtBQUFBLFVBQ0MsV0FBVztBQUFBLFVBQ1gsYUFBYSxnQkFBQUEsS0FBQyxlQUFZLFlBQXdCO0FBQUEsVUFDbEQsY0FBYyxnQkFBQUEsS0FBQyxTQUFJO0FBQUEsVUFDbkIsV0FDRSxnQkFBQUE7QUFBQSxZQUFDO0FBQUE7QUFBQSxjQUNDO0FBQUEsY0FDQTtBQUFBO0FBQUEsVUFDRjtBQUFBO0FBQUEsTUFFSjtBQUFBO0FBQUEsRUFFSjtBQUVKOzs7QUM1RmUsU0FBUix1QkFBd0MsWUFBeUI7QUFDdEUsUUFBTUUsVUFBUyxJQUFJLE9BQU8sd0JBQXdCO0FBQ2xELEVBQUFBLFFBQU8sTUFBTSx1Q0FBdUM7QUFFcEQsU0FDRSxnQkFBQUM7QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNDLFdBQVU7QUFBQSxNQUNWLFdBQVU7QUFBQSxNQUNWLFFBQ0VDLE9BQU0sYUFBYSxNQUNuQkEsT0FBTSxhQUFhLE9BQ25CQSxPQUFNLGFBQWE7QUFBQSxNQUVyQixhQUFhQSxPQUFNLFlBQVk7QUFBQSxNQUMvQixhQUFhO0FBQUEsTUFDYjtBQUFBLE1BQ0EsT0FBTyxnQkFBQUQsS0FBQyxTQUFJLFdBQVUsc0NBQXFDO0FBQUE7QUFBQSxFQUM3RDtBQUVKOzs7QUNoQkEsWUFBSSxNQUFNO0FBQUEsRUFDUixLQUFLO0FBQUEsRUFDTCxPQUFPO0FBQ0wsZ0JBQUksYUFBYSxFQUFFLElBQUksQ0FBQyxZQUFZO0FBRWxDLDZCQUF1QixPQUFPO0FBQzlCLFVBQUksT0FBTztBQUdYLGdCQUFVLE9BQU87QUFBQSxJQUNuQixDQUFDO0FBQUEsRUFDSDtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbIkFzdGFsIiwgIkd0ayIsICJBc3RhbCIsICJiaW5kIiwgImludGVydmFsIiwgInRpbWVvdXQiLCAiQXN0YWwiLCAiQXN0YWwiLCAiQXN0YWwiLCAidiIsICJpbnRlcnZhbCIsICJjdG9ycyIsICJBc3RhbCIsICJBc3RhbCIsICJHdGsiLCAiQXN0YWwiLCAic25ha2VpZnkiLCAicGF0Y2giLCAiQmx1ZXRvb3RoIiwgIkh5cHJsYW5kIiwgIk1wcmlzIiwgIk5vdGlmZCIsICJXcCIsICJHT2JqZWN0IiwgIkd0ayIsICJBc3RhbCIsICJBc3RhbCIsICJHdGsiLCAiR09iamVjdCIsICJHdGsiLCAiQXN0YWwiLCAiR09iamVjdCIsICJkZWZhdWx0IiwgIkFzdGFsIiwgIkdPYmplY3QiLCAiZGVmYXVsdCIsICJHT2JqZWN0IiwgIkxvZ0xldmVsIiwgImpzeCIsICJqc3giLCAiVGltZSIsICJqc3giLCAianN4IiwgIlRpbWUiLCAianN4IiwgImpzeCIsICJqc3giLCAianN4IiwgIkd0ayIsICJsb2dnZXIiLCAianN4IiwgImxvZ2dlciIsICJqc3giLCAiQXN0YWwiLCAibG9nZ2VyIiwgImpzeCIsICJHdGsiLCAianN4IiwgIkd0ayIsICJpdGVtIiwgImpzeCIsICJqc3giLCAiR3RrIiwgImxvZ2dlciIsICJqc3giLCAiR3RrIiwgIkd0ayIsICJHdGsiLCAibG9nZ2VyIiwgImpzeCIsICJHdGsiLCAiaXNEb05vdERpc3R1cmIiLCAianN4IiwgIkd0ayIsICJqc3giLCAianN4IiwgIkd0ayIsICJqc3giLCAiR3RrIiwgImxvZ2dlciIsICJqc3giLCAiQXN0YWwiLCAibG9nZ2VyIiwgImpzeCIsICJBc3RhbCJdCn0K
